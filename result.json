[
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/ae.h",
    "line": 127,
    "headers": [
      "sys/types.h",
      "ae.h",
      "../hiredis.h",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "redisAeReadEvent",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 45,
        "end_line": 50
      },
      {
        "method_name": "redisAeWriteEvent",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 52,
        "end_line": 57
      },
      {
        "method_name": "redisAeAddRead",
        "params": "(void *privdata)",
        "start_line": 59,
        "end_line": 66
      },
      {
        "method_name": "redisAeDelRead",
        "params": "(void *privdata)",
        "start_line": 68,
        "end_line": 75
      },
      {
        "method_name": "redisAeAddWrite",
        "params": "(void *privdata)",
        "start_line": 77,
        "end_line": 84
      },
      {
        "method_name": "redisAeDelWrite",
        "params": "(void *privdata)",
        "start_line": 86,
        "end_line": 93
      },
      {
        "method_name": "redisAeCleanup",
        "params": "(void *privdata)",
        "start_line": 95,
        "end_line": 100
      },
      {
        "method_name": "redisAeAttach",
        "params": "(aeEventLoop *loop, redisAsyncContext *ac)",
        "start_line": 102,
        "end_line": 126
      }
    ],
    "structs": [
      {
        "struct_name": "redisAeEvents",
        "start_line": 38,
        "end_line": 43
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/glib.h",
    "line": 153,
    "headers": [
      "glib.h",
      "../hiredis.h",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "redis_source_add_read",
        "params": "(gpointer data)",
        "start_line": 18,
        "end_line": 23
      },
      {
        "method_name": "redis_source_del_read",
        "params": "(gpointer data)",
        "start_line": 27,
        "end_line": 32
      },
      {
        "method_name": "redis_source_add_write",
        "params": "(gpointer data)",
        "start_line": 36,
        "end_line": 41
      },
      {
        "method_name": "redis_source_del_write",
        "params": "(gpointer data)",
        "start_line": 45,
        "end_line": 50
      },
      {
        "method_name": "redis_source_cleanup",
        "params": "(gpointer data)",
        "start_line": 54,
        "end_line": 69
      },
      {
        "method_name": "redis_source_prepare",
        "params": "(GSource *source,\n                      gint    *timeout_)",
        "start_line": 74,
        "end_line": 78
      },
      {
        "method_name": "redis_source_check",
        "params": "(GSource *source)",
        "start_line": 82,
        "end_line": 85
      },
      {
        "method_name": "redis_source_dispatch",
        "params": "(GSource      *source,\n                       GSourceFunc   callback,\n                       gpointer      user_data)",
        "start_line": 91,
        "end_line": 109
      },
      {
        "method_name": "redis_source_finalize",
        "params": "(GSource *source)",
        "start_line": 113,
        "end_line": 120
      },
      {
        "method_name": "redis_source_new",
        "params": "(redisAsyncContext *ac)",
        "start_line": 124,
        "end_line": 151
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 10,
        "end_line": 14
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/ivykis.h",
    "line": 81,
    "headers": [
      "iv.h",
      "../hiredis.h",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "redisIvykisReadEvent",
        "params": "(void *arg)",
        "start_line": 12,
        "end_line": 15
      },
      {
        "method_name": "redisIvykisWriteEvent",
        "params": "(void *arg)",
        "start_line": 17,
        "end_line": 20
      },
      {
        "method_name": "redisIvykisAddRead",
        "params": "(void *privdata)",
        "start_line": 22,
        "end_line": 25
      },
      {
        "method_name": "redisIvykisDelRead",
        "params": "(void *privdata)",
        "start_line": 27,
        "end_line": 30
      },
      {
        "method_name": "redisIvykisAddWrite",
        "params": "(void *privdata)",
        "start_line": 32,
        "end_line": 35
      },
      {
        "method_name": "redisIvykisDelWrite",
        "params": "(void *privdata)",
        "start_line": 37,
        "end_line": 40
      },
      {
        "method_name": "redisIvykisCleanup",
        "params": "(void *privdata)",
        "start_line": 42,
        "end_line": 47
      },
      {
        "method_name": "redisIvykisAttach",
        "params": "(redisAsyncContext *ac)",
        "start_line": 49,
        "end_line": 80
      }
    ],
    "structs": [
      {
        "struct_name": "redisIvykisEvents",
        "start_line": 7,
        "end_line": 10
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/libev.h",
    "line": 147,
    "headers": [
      "stdlib.h",
      "sys/types.h",
      "ev.h",
      "../hiredis.h",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "redisLibevReadEvent",
        "params": "(EV_P_ ev_io *watcher, int revents)",
        "start_line": 46,
        "end_line": 54
      },
      {
        "method_name": "redisLibevWriteEvent",
        "params": "(EV_P_ ev_io *watcher, int revents)",
        "start_line": 56,
        "end_line": 64
      },
      {
        "method_name": "redisLibevAddRead",
        "params": "(void *privdata)",
        "start_line": 66,
        "end_line": 74
      },
      {
        "method_name": "redisLibevDelRead",
        "params": "(void *privdata)",
        "start_line": 76,
        "end_line": 84
      },
      {
        "method_name": "redisLibevAddWrite",
        "params": "(void *privdata)",
        "start_line": 86,
        "end_line": 94
      },
      {
        "method_name": "redisLibevDelWrite",
        "params": "(void *privdata)",
        "start_line": 96,
        "end_line": 104
      },
      {
        "method_name": "redisLibevCleanup",
        "params": "(void *privdata)",
        "start_line": 106,
        "end_line": 111
      },
      {
        "method_name": "redisLibevAttach",
        "params": "(EV_P_ redisAsyncContext *ac)",
        "start_line": 113,
        "end_line": 145
      }
    ],
    "structs": [
      {
        "struct_name": "redisLibevEvents",
        "start_line": 39,
        "end_line": 44
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/libevent.h",
    "line": 172,
    "headers": [
      "event2/event.h",
      "../hiredis.h",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "redisLibeventDestroy",
        "params": "(redisLibeventEvents *e)",
        "start_line": 49,
        "end_line": 51
      },
      {
        "method_name": "redisLibeventHandler",
        "params": "(int fd, short event, void *arg)",
        "start_line": 53,
        "end_line": 80
      },
      {
        "method_name": "redisLibeventUpdate",
        "params": "(void *privdata, short flag, int isRemove)",
        "start_line": 82,
        "end_line": 104
      },
      {
        "method_name": "redisLibeventAddRead",
        "params": "(void *privdata)",
        "start_line": 106,
        "end_line": 108
      },
      {
        "method_name": "redisLibeventDelRead",
        "params": "(void *privdata)",
        "start_line": 110,
        "end_line": 112
      },
      {
        "method_name": "redisLibeventAddWrite",
        "params": "(void *privdata)",
        "start_line": 114,
        "end_line": 116
      },
      {
        "method_name": "redisLibeventDelWrite",
        "params": "(void *privdata)",
        "start_line": 118,
        "end_line": 120
      },
      {
        "method_name": "redisLibeventCleanup",
        "params": "(void *privdata)",
        "start_line": 122,
        "end_line": 136
      },
      {
        "method_name": "redisLibeventSetTimeout",
        "params": "(void *privdata, struct timeval tv)",
        "start_line": 138,
        "end_line": 144
      },
      {
        "method_name": "redisLibeventAttach",
        "params": "(redisAsyncContext *ac, struct event_base *base)",
        "start_line": 146,
        "end_line": 171
      }
    ],
    "structs": [
      {
        "struct_name": "redisLibeventEvents",
        "start_line": 40,
        "end_line": 47
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/libuv.h",
    "line": 119,
    "headers": [
      "stdlib.h",
      "uv.h",
      "../hiredis.h",
      "../async.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "redisLibuvPoll",
        "params": "(uv_poll_t* handle, int status, int events)",
        "start_line": 16,
        "end_line": 26
      },
      {
        "method_name": "redisLibuvAddRead",
        "params": "(void *privdata)",
        "start_line": 29,
        "end_line": 35
      },
      {
        "method_name": "redisLibuvDelRead",
        "params": "(void *privdata)",
        "start_line": 38,
        "end_line": 48
      },
      {
        "method_name": "redisLibuvAddWrite",
        "params": "(void *privdata)",
        "start_line": 51,
        "end_line": 57
      },
      {
        "method_name": "redisLibuvDelWrite",
        "params": "(void *privdata)",
        "start_line": 60,
        "end_line": 70
      },
      {
        "method_name": "on_close",
        "params": "(uv_handle_t* handle)",
        "start_line": 73,
        "end_line": 77
      },
      {
        "method_name": "redisLibuvCleanup",
        "params": "(void *privdata)",
        "start_line": 80,
        "end_line": 85
      },
      {
        "method_name": "redisLibuvAttach",
        "params": "(redisAsyncContext* ac, uv_loop_t* loop)",
        "start_line": 88,
        "end_line": 118
      }
    ],
    "structs": [
      {
        "struct_name": "redisLibuvEvents",
        "start_line": 9,
        "end_line": 13
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/macosx.h",
    "line": 114,
    "headers": [
      "CoreFoundation/CoreFoundation.h",
      "../hiredis.h",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "freeRedisRunLoop",
        "params": "(RedisRunLoop* redisRunLoop)",
        "start_line": 20,
        "end_line": 33
      },
      {
        "method_name": "redisMacOSAddRead",
        "params": "(void *privdata)",
        "start_line": 35,
        "end_line": 38
      },
      {
        "method_name": "redisMacOSDelRead",
        "params": "(void *privdata)",
        "start_line": 40,
        "end_line": 43
      },
      {
        "method_name": "redisMacOSAddWrite",
        "params": "(void *privdata)",
        "start_line": 45,
        "end_line": 48
      },
      {
        "method_name": "redisMacOSDelWrite",
        "params": "(void *privdata)",
        "start_line": 50,
        "end_line": 53
      },
      {
        "method_name": "redisMacOSCleanup",
        "params": "(void *privdata)",
        "start_line": 55,
        "end_line": 58
      },
      {
        "method_name": "redisMacOSAsyncCallback",
        "params": "(CFSocketRef __unused s, CFSocketCallBackType callbackType, CFDataRef __unused address, const void __unused *data, void *info)",
        "start_line": 60,
        "end_line": 75
      },
      {
        "method_name": "redisMacOSAttach",
        "params": "(redisAsyncContext *redisAsyncCtx, CFRunLoopRef runLoop)",
        "start_line": 77,
        "end_line": 111
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 14,
        "end_line": 18
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/adapters/qt.h",
    "line": 135,
    "headers": [
      "QSocketNotifier",
      "../async.h"
    ],
    "methods": [
      {
        "method_name": "RedisQtAddRead",
        "params": "(void * adapter)",
        "start_line": 42,
        "end_line": 45
      },
      {
        "method_name": "RedisQtDelRead",
        "params": "(void * adapter)",
        "start_line": 48,
        "end_line": 51
      },
      {
        "method_name": "RedisQtAddWrite",
        "params": "(void * adapter)",
        "start_line": 54,
        "end_line": 57
      },
      {
        "method_name": "RedisQtDelWrite",
        "params": "(void * adapter)",
        "start_line": 60,
        "end_line": 63
      },
      {
        "method_name": "RedisQtCleanup",
        "params": "(void * adapter)",
        "start_line": 66,
        "end_line": 69
      },
      {
        "method_name": "m_write",
        "params": "(0)",
        "start_line": 73,
        "end_line": 73
      },
      {
        "method_name": "~RedisQtAdapter",
        "params": "()",
        "start_line": 75,
        "end_line": 79
      },
      {
        "method_name": "setContext",
        "params": "(redisAsyncContext * ac)",
        "start_line": 81,
        "end_line": 93
      },
      {
        "method_name": "addRead",
        "params": "()",
        "start_line": 96,
        "end_line": 100
      },
      {
        "method_name": "delRead",
        "params": "()",
        "start_line": 102,
        "end_line": 106
      },
      {
        "method_name": "addWrite",
        "params": "()",
        "start_line": 108,
        "end_line": 112
      },
      {
        "method_name": "delWrite",
        "params": "()",
        "start_line": 114,
        "end_line": 118
      },
      {
        "method_name": "cleanup",
        "params": "()",
        "start_line": 120,
        "end_line": 123
      },
      {
        "method_name": "read",
        "params": "()",
        "start_line": 126,
        "end_line": 126
      },
      {
        "method_name": "write",
        "params": "()",
        "start_line": 127,
        "end_line": 127
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/async.c",
    "line": 766,
    "headers": [
      "fmacros.h",
      "stdlib.h",
      "string.h",
      "strings.h",
      "ctype.h",
      "errno.h",
      "async.h",
      "net.h",
      "dict.c",
      "sds.h",
      "win32.h",
      "async_private.h"
    ],
    "methods": [
      {
        "method_name": "callbackHash",
        "params": "(const void *key)",
        "start_line": 53,
        "end_line": 56
      },
      {
        "method_name": "*callbackValDup",
        "params": "(void *privdata, const void *src)",
        "start_line": 58,
        "end_line": 63
      },
      {
        "method_name": "callbackKeyCompare",
        "params": "(void *privdata, const void *key1, const void *key2)",
        "start_line": 65,
        "end_line": 73
      },
      {
        "method_name": "callbackKeyDestructor",
        "params": "(void *privdata, void *key)",
        "start_line": 75,
        "end_line": 78
      },
      {
        "method_name": "callbackValDestructor",
        "params": "(void *privdata, void *val)",
        "start_line": 80,
        "end_line": 83
      },
      {
        "method_name": "*redisAsyncInitialize",
        "params": "(redisContext *c)",
        "start_line": 94,
        "end_line": 130
      },
      {
        "method_name": "__redisAsyncCopyError",
        "params": "(redisAsyncContext *ac)",
        "start_line": 134,
        "end_line": 141
      },
      {
        "method_name": "*redisAsyncConnectWithOptions",
        "params": "(const redisOptions *options)",
        "start_line": 143,
        "end_line": 160
      },
      {
        "method_name": "*redisAsyncConnect",
        "params": "(const char *ip, int port)",
        "start_line": 162,
        "end_line": 166
      },
      {
        "method_name": "*redisAsyncConnectBind",
        "params": "(const char *ip, int port,\n                                         const char *source_addr)",
        "start_line": 169,
        "end_line": 174
      },
      {
        "method_name": "*redisAsyncConnectBindWithReuse",
        "params": "(const char *ip, int port,\n                                                  const char *source_addr)",
        "start_line": 177,
        "end_line": 183
      },
      {
        "method_name": "*redisAsyncConnectUnix",
        "params": "(const char *path)",
        "start_line": 185,
        "end_line": 189
      },
      {
        "method_name": "redisAsyncSetConnectCallback",
        "params": "(redisAsyncContext *ac, redisConnectCallback *fn)",
        "start_line": 191,
        "end_line": 202
      },
      {
        "method_name": "redisAsyncSetDisconnectCallback",
        "params": "(redisAsyncContext *ac, redisDisconnectCallback *fn)",
        "start_line": 204,
        "end_line": 210
      },
      {
        "method_name": "__redisPushCallback",
        "params": "(redisCallbackList *list, redisCallback *source)",
        "start_line": 213,
        "end_line": 233
      },
      {
        "method_name": "__redisShiftCallback",
        "params": "(redisCallbackList *list, redisCallback *target)",
        "start_line": 235,
        "end_line": 249
      },
      {
        "method_name": "__redisRunCallback",
        "params": "(redisAsyncContext *ac, redisCallback *cb, redisReply *reply)",
        "start_line": 251,
        "end_line": 258
      },
      {
        "method_name": "__redisAsyncFree",
        "params": "(redisAsyncContext *ac)",
        "start_line": 261,
        "end_line": 303
      },
      {
        "method_name": "redisAsyncFree",
        "params": "(redisAsyncContext *ac)",
        "start_line": 309,
        "end_line": 314
      },
      {
        "method_name": "__redisAsyncDisconnect",
        "params": "(redisAsyncContext *ac)",
        "start_line": 317,
        "end_line": 342
      },
      {
        "method_name": "redisAsyncDisconnect",
        "params": "(redisAsyncContext *ac)",
        "start_line": 350,
        "end_line": 358
      },
      {
        "method_name": "__redisGetSubscribeCallback",
        "params": "(redisAsyncContext *ac, redisReply *reply, redisCallback *dstcb)",
        "start_line": 360,
        "end_line": 418
      },
      {
        "method_name": "redisProcessCallbacks",
        "params": "(redisAsyncContext *ac)",
        "start_line": 420,
        "end_line": 498
      },
      {
        "method_name": "__redisAsyncHandleConnect",
        "params": "(redisAsyncContext *ac)",
        "start_line": 503,
        "end_line": 520
      },
      {
        "method_name": "redisAsyncRead",
        "params": "(redisAsyncContext *ac)",
        "start_line": 522,
        "end_line": 532
      },
      {
        "method_name": "redisAsyncHandleRead",
        "params": "(redisAsyncContext *ac)",
        "start_line": 537,
        "end_line": 550
      },
      {
        "method_name": "redisAsyncWrite",
        "params": "(redisAsyncContext *ac)",
        "start_line": 552,
        "end_line": 568
      },
      {
        "method_name": "redisAsyncHandleWrite",
        "params": "(redisAsyncContext *ac)",
        "start_line": 570,
        "end_line": 583
      },
      {
        "method_name": "redisAsyncHandleTimeout",
        "params": "(redisAsyncContext *ac)",
        "start_line": 587,
        "end_line": 613
      },
      {
        "method_name": "*nextArgument",
        "params": "(const char *start, const char **str, size_t *len)",
        "start_line": 617,
        "end_line": 629
      },
      {
        "method_name": "__redisAsyncCommand",
        "params": "(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *cmd, size_t len)",
        "start_line": 634,
        "end_line": 712
      },
      {
        "method_name": "redisvAsyncCommand",
        "params": "(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap)",
        "start_line": 714,
        "end_line": 727
      },
      {
        "method_name": "redisAsyncCommand",
        "params": "(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...)",
        "start_line": 729,
        "end_line": 736
      },
      {
        "method_name": "redisAsyncCommandArgv",
        "params": "(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen)",
        "start_line": 738,
        "end_line": 748
      },
      {
        "method_name": "redisAsyncFormattedCommand",
        "params": "(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *cmd, size_t len)",
        "start_line": 750,
        "end_line": 753
      },
      {
        "method_name": "redisAsyncSetTimeout",
        "params": "(redisAsyncContext *ac, struct timeval tv)",
        "start_line": 755,
        "end_line": 766
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/async.h",
    "line": 142,
    "headers": [
      "hiredis.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "redisCallback",
        "start_line": 45,
        "end_line": 50
      },
      {
        "struct_name": "redisCallbackList",
        "start_line": 53,
        "end_line": 55
      },
      {
        "struct_name": "redisAsyncContext",
        "start_line": 63,
        "end_line": 108
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/async_private.h",
    "line": 72,
    "headers": [],
    "methods": [
      {
        "method_name": "_EL_DEL_READ",
        "params": "(ctx)",
        "start_line": 40,
        "end_line": 42
      },
      {
        "method_name": "_EL_DEL_WRITE",
        "params": "(ctx)",
        "start_line": 48,
        "end_line": 50
      },
      {
        "method_name": "_EL_CLEANUP",
        "params": "(ctx)",
        "start_line": 51,
        "end_line": 54
      },
      {
        "method_name": "refreshTimeout",
        "params": "(redisAsyncContext *ctx)",
        "start_line": 56,
        "end_line": 67
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/dict.c",
    "line": 338,
    "headers": [
      "fmacros.h",
      "stdlib.h",
      "assert.h",
      "limits.h",
      "dict.h"
    ],
    "methods": [
      {
        "method_name": "dictGenHashFunction",
        "params": "(const unsigned char *buf, int len)",
        "start_line": 53,
        "end_line": 59
      },
      {
        "method_name": "_dictReset",
        "params": "(dict *ht)",
        "start_line": 65,
        "end_line": 70
      },
      {
        "method_name": "*dictCreate",
        "params": "(dictType *type, void *privDataPtr)",
        "start_line": 73,
        "end_line": 77
      },
      {
        "method_name": "_dictInit",
        "params": "(dict *ht, dictType *type, void *privDataPtr)",
        "start_line": 80,
        "end_line": 85
      },
      {
        "method_name": "dictExpand",
        "params": "(dict *ht, unsigned long size)",
        "start_line": 88,
        "end_line": 132
      },
      {
        "method_name": "dictAdd",
        "params": "(dict *ht, void *key, void *val)",
        "start_line": 135,
        "end_line": 154
      },
      {
        "method_name": "dictReplace",
        "params": "(dict *ht, void *key, void *val)",
        "start_line": 160,
        "end_line": 179
      },
      {
        "method_name": "dictDelete",
        "params": "(dict *ht, const void *key)",
        "start_line": 182,
        "end_line": 210
      },
      {
        "method_name": "_dictClear",
        "params": "(dict *ht)",
        "start_line": 213,
        "end_line": 235
      },
      {
        "method_name": "dictRelease",
        "params": "(dict *ht)",
        "start_line": 238,
        "end_line": 241
      },
      {
        "method_name": "*dictFind",
        "params": "(dict *ht, const void *key)",
        "start_line": 243,
        "end_line": 256
      },
      {
        "method_name": "*dictGetIterator",
        "params": "(dict *ht)",
        "start_line": 258,
        "end_line": 266
      },
      {
        "method_name": "*dictNext",
        "params": "(dictIterator *iter)",
        "start_line": 268,
        "end_line": 286
      },
      {
        "method_name": "dictReleaseIterator",
        "params": "(dictIterator *iter)",
        "start_line": 288,
        "end_line": 290
      },
      {
        "method_name": "_dictExpandIfNeeded",
        "params": "(dict *ht)",
        "start_line": 295,
        "end_line": 303
      },
      {
        "method_name": "_dictNextPower",
        "params": "(unsigned long size)",
        "start_line": 306,
        "end_line": 315
      },
      {
        "method_name": "_dictKeyIndex",
        "params": "(dict *ht, const void *key)",
        "start_line": 320,
        "end_line": 337
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/dict.h",
    "line": 126,
    "headers": [],
    "methods": [
      {
        "method_name": "dictSetHashVal",
        "params": "(ht, entry, _val_)",
        "start_line": 83,
        "end_line": 88
      },
      {
        "method_name": "dictSetHashKey",
        "params": "(ht, entry, _key_)",
        "start_line": 94,
        "end_line": 99
      }
    ],
    "structs": [
      {
        "struct_name": "dictEntry",
        "start_line": 45,
        "end_line": 49
      },
      {
        "struct_name": "dictType",
        "start_line": 51,
        "end_line": 58
      },
      {
        "struct_name": "dict",
        "start_line": 60,
        "end_line": 67
      },
      {
        "struct_name": "dictIterator",
        "start_line": 69,
        "end_line": 73
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-ae.c",
    "line": 62,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "signal.h",
      "hiredis.h",
      "async.h",
      "adapters/ae.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 13,
        "end_line": 20
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 22,
        "end_line": 30
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 32,
        "end_line": 41
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 43,
        "end_line": 61
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-glib.c",
    "line": 73,
    "headers": [
      "stdlib.h",
      "hiredis.h",
      "async.h",
      "adapters/glib.h"
    ],
    "methods": [
      {
        "method_name": "connect_cb",
        "params": "(const redisAsyncContext *ac G_GNUC_UNUSED,\n            int status)",
        "start_line": 12,
        "end_line": 19
      },
      {
        "method_name": "disconnect_cb",
        "params": "(const redisAsyncContext *ac G_GNUC_UNUSED,\n               int status)",
        "start_line": 24,
        "end_line": 31
      },
      {
        "method_name": "command_cb",
        "params": "(redisAsyncContext *ac,\n           gpointer r,\n           gpointer user_data G_GNUC_UNUSED)",
        "start_line": 37,
        "end_line": 45
      },
      {
        "method_name": "main",
        "params": "(gint argc     G_GNUC_UNUSED,\n      gchar *argv[] G_GNUC_UNUSED)",
        "start_line": 50,
        "end_line": 73
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-ivykis.c",
    "line": 58,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "signal.h",
      "hiredis.h",
      "async.h",
      "adapters/ivykis.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 10,
        "end_line": 17
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 19,
        "end_line": 25
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 27,
        "end_line": 33
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 35,
        "end_line": 58
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-libev.c",
    "line": 52,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "signal.h",
      "hiredis.h",
      "async.h",
      "adapters/libev.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 10,
        "end_line": 17
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 19,
        "end_line": 25
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 27,
        "end_line": 33
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 35,
        "end_line": 52
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-libevent-ssl.c",
    "line": 73,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "signal.h",
      "hiredis.h",
      "hiredis_ssl.h",
      "async.h",
      "adapters/libevent.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 11,
        "end_line": 18
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 20,
        "end_line": 26
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 28,
        "end_line": 34
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 36,
        "end_line": 73
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-libevent.c",
    "line": 64,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "signal.h",
      "hiredis.h",
      "async.h",
      "adapters/libevent.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 10,
        "end_line": 22
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 24,
        "end_line": 30
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 32,
        "end_line": 38
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 40,
        "end_line": 64
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-libuv.c",
    "line": 53,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "signal.h",
      "hiredis.h",
      "async.h",
      "adapters/libuv.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 10,
        "end_line": 17
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 19,
        "end_line": 25
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 27,
        "end_line": 33
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 35,
        "end_line": 53
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-macosx.c",
    "line": 66,
    "headers": [
      "stdio.h",
      "hiredis.h",
      "async.h",
      "adapters/macosx.h"
    ],
    "methods": [
      {
        "method_name": "getCallback",
        "params": "(redisAsyncContext *c, void *r, void *privdata)",
        "start_line": 12,
        "end_line": 19
      },
      {
        "method_name": "connectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 21,
        "end_line": 27
      },
      {
        "method_name": "disconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 29,
        "end_line": 36
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 38,
        "end_line": 65
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-qt.h",
    "line": 32,
    "headers": [
      "adapters/qt.h"
    ],
    "methods": [
      {
        "method_name": "m_value",
        "params": "(value)",
        "start_line": 12,
        "end_line": 12
      },
      {
        "method_name": "finish",
        "params": "()",
        "start_line": 21,
        "end_line": 21
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example-ssl.c",
    "line": 97,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "hiredis.h",
      "hiredis_ssl.h"
    ],
    "methods": [
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 8,
        "end_line": 97
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/examples/example.c",
    "line": 91,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "hiredis.h"
    ],
    "methods": [
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 7,
        "end_line": 91
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/fmacros.h",
    "line": 12,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/hiredis.c",
    "line": 1086,
    "headers": [
      "fmacros.h",
      "string.h",
      "stdlib.h",
      "assert.h",
      "errno.h",
      "ctype.h",
      "hiredis.h",
      "net.h",
      "sds.h",
      "async.h",
      "win32.h"
    ],
    "methods": [
      {
        "method_name": "*createReplyObject",
        "params": "(int type)",
        "start_line": 76,
        "end_line": 84
      },
      {
        "method_name": "freeReplyObject",
        "params": "(void *reply)",
        "start_line": 87,
        "end_line": 114
      },
      {
        "method_name": "*createStringObject",
        "params": "(const redisReadTask *task, char *str, size_t len)",
        "start_line": 116,
        "end_line": 161
      },
      {
        "method_name": "*createArrayObject",
        "params": "(const redisReadTask *task, size_t elements)",
        "start_line": 163,
        "end_line": 188
      },
      {
        "method_name": "*createIntegerObject",
        "params": "(const redisReadTask *task, long long value)",
        "start_line": 190,
        "end_line": 207
      },
      {
        "method_name": "*createDoubleObject",
        "params": "(const redisReadTask *task, double value, char *str, size_t len)",
        "start_line": 209,
        "end_line": 239
      },
      {
        "method_name": "*createNilObject",
        "params": "(const redisReadTask *task)",
        "start_line": 241,
        "end_line": 256
      },
      {
        "method_name": "*createBoolObject",
        "params": "(const redisReadTask *task, int bval)",
        "start_line": 258,
        "end_line": 275
      },
      {
        "method_name": "countDigits",
        "params": "(uint64_t v)",
        "start_line": 279,
        "end_line": 289
      },
      {
        "method_name": "bulklen",
        "params": "(size_t len)",
        "start_line": 292,
        "end_line": 294
      },
      {
        "method_name": "redisvFormatCommand",
        "params": "(char **target, const char *format, va_list ap)",
        "start_line": 296,
        "end_line": 524
      },
      {
        "method_name": "redisFormatCommand",
        "params": "(char **target, const char *format, ...)",
        "start_line": 538,
        "end_line": 551
      },
      {
        "method_name": "redisFormatSdsCommandArgv",
        "params": "(sds *target, int argc, const char **argv,\n                              const size_t *argvlen)",
        "start_line": 561,
        "end_line": 601
      },
      {
        "method_name": "redisFreeSdsCommand",
        "params": "(sds cmd)",
        "start_line": 603,
        "end_line": 605
      },
      {
        "method_name": "redisFormatCommandArgv",
        "params": "(char **target, int argc, const char **argv, const size_t *argvlen)",
        "start_line": 612,
        "end_line": 648
      },
      {
        "method_name": "redisFreeCommand",
        "params": "(char *cmd)",
        "start_line": 650,
        "end_line": 652
      },
      {
        "method_name": "__redisSetError",
        "params": "(redisContext *c, int type, const char *str)",
        "start_line": 654,
        "end_line": 668
      },
      {
        "method_name": "*redisReaderCreate",
        "params": "(void)",
        "start_line": 670,
        "end_line": 672
      },
      {
        "method_name": "*redisContextInit",
        "params": "(const redisOptions *options)",
        "start_line": 674,
        "end_line": 692
      },
      {
        "method_name": "redisFree",
        "params": "(redisContext *c)",
        "start_line": 694,
        "end_line": 711
      },
      {
        "method_name": "redisFreeKeepFd",
        "params": "(redisContext *c)",
        "start_line": 713,
        "end_line": 718
      },
      {
        "method_name": "redisReconnect",
        "params": "(redisContext *c)",
        "start_line": 720,
        "end_line": 749
      },
      {
        "method_name": "*redisConnectWithOptions",
        "params": "(const redisOptions *options)",
        "start_line": 751,
        "end_line": 784
      },
      {
        "method_name": "*redisConnect",
        "params": "(const char *ip, int port)",
        "start_line": 789,
        "end_line": 793
      },
      {
        "method_name": "*redisConnectWithTimeout",
        "params": "(const char *ip, int port, const struct timeval tv)",
        "start_line": 795,
        "end_line": 800
      },
      {
        "method_name": "*redisConnectNonBlock",
        "params": "(const char *ip, int port)",
        "start_line": 802,
        "end_line": 807
      },
      {
        "method_name": "*redisConnectBindNonBlock",
        "params": "(const char *ip, int port,\n                                       const char *source_addr)",
        "start_line": 810,
        "end_line": 816
      },
      {
        "method_name": "*redisConnectBindNonBlockWithReuse",
        "params": "(const char *ip, int port,\n                                                const char *source_addr)",
        "start_line": 819,
        "end_line": 825
      },
      {
        "method_name": "*redisConnectUnix",
        "params": "(const char *path)",
        "start_line": 827,
        "end_line": 831
      },
      {
        "method_name": "*redisConnectUnixWithTimeout",
        "params": "(const char *path, const struct timeval tv)",
        "start_line": 833,
        "end_line": 838
      },
      {
        "method_name": "*redisConnectUnixNonBlock",
        "params": "(const char *path)",
        "start_line": 840,
        "end_line": 845
      },
      {
        "method_name": "*redisConnectFd",
        "params": "(redisFD fd)",
        "start_line": 847,
        "end_line": 852
      },
      {
        "method_name": "redisSetTimeout",
        "params": "(redisContext *c, const struct timeval tv)",
        "start_line": 855,
        "end_line": 859
      },
      {
        "method_name": "redisEnableKeepAlive",
        "params": "(redisContext *c)",
        "start_line": 862,
        "end_line": 866
      },
      {
        "method_name": "redisBufferRead",
        "params": "(redisContext *c)",
        "start_line": 873,
        "end_line": 892
      },
      {
        "method_name": "redisBufferWrite",
        "params": "(redisContext *c, int *done)",
        "start_line": 903,
        "end_line": 924
      },
      {
        "method_name": "redisGetReplyFromReader",
        "params": "(redisContext *c, void **reply)",
        "start_line": 928,
        "end_line": 934
      },
      {
        "method_name": "redisGetReply",
        "params": "(redisContext *c, void **reply)",
        "start_line": 936,
        "end_line": 964
      },
      {
        "method_name": "__redisAppendCommand",
        "params": "(redisContext *c, const char *cmd, size_t len)",
        "start_line": 973,
        "end_line": 984
      },
      {
        "method_name": "redisAppendFormattedCommand",
        "params": "(redisContext *c, const char *cmd, size_t len)",
        "start_line": 986,
        "end_line": 993
      },
      {
        "method_name": "redisvAppendCommand",
        "params": "(redisContext *c, const char *format, va_list ap)",
        "start_line": 995,
        "end_line": 1015
      },
      {
        "method_name": "redisAppendCommand",
        "params": "(redisContext *c, const char *format, ...)",
        "start_line": 1017,
        "end_line": 1025
      },
      {
        "method_name": "redisAppendCommandArgv",
        "params": "(redisContext *c, int argc, const char **argv, const size_t *argvlen)",
        "start_line": 1027,
        "end_line": 1044
      },
      {
        "method_name": "*__redisBlockForReply",
        "params": "(redisContext *c)",
        "start_line": 1057,
        "end_line": 1066
      },
      {
        "method_name": "*redisvCommand",
        "params": "(redisContext *c, const char *format, va_list ap)",
        "start_line": 1068,
        "end_line": 1072
      },
      {
        "method_name": "*redisCommand",
        "params": "(redisContext *c, const char *format, ...)",
        "start_line": 1074,
        "end_line": 1080
      },
      {
        "method_name": "*redisCommandArgv",
        "params": "(redisContext *c, int argc, const char **argv, const size_t *argvlen)",
        "start_line": 1082,
        "end_line": 1086
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/hiredis.h",
    "line": 299,
    "headers": [
      "read.h",
      "stdarg.h",
      "sys/time.h",
      "sds.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "redisReply",
        "start_line": 98,
        "end_line": 109
      },
      {
        "struct_name": "",
        "start_line": 157,
        "end_line": 181
      },
      {
        "struct_name": "redisContextFuncs",
        "start_line": 198,
        "end_line": 204
      },
      {
        "struct_name": "redisContext",
        "start_line": 207,
        "end_line": 236
      }
    ],
    "enums": [
      {
        "enum_name": "redisConnectionType",
        "start_line": 124,
        "end_line": 128
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/hiredis_ssl.h",
    "line": 53,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/net.c",
    "line": 571,
    "headers": [
      "fmacros.h",
      "sys/types.h",
      "fcntl.h",
      "string.h",
      "errno.h",
      "stdarg.h",
      "stdio.h",
      "limits.h",
      "stdlib.h",
      "net.h",
      "sds.h",
      "sockcompat.h",
      "win32.h"
    ],
    "methods": [
      {
        "method_name": "redisNetClose",
        "params": "(redisContext *c)",
        "start_line": 53,
        "end_line": 58
      },
      {
        "method_name": "redisNetRead",
        "params": "(redisContext *c, char *buf, size_t bufcap)",
        "start_line": 60,
        "end_line": 80
      },
      {
        "method_name": "redisNetWrite",
        "params": "(redisContext *c)",
        "start_line": 82,
        "end_line": 93
      },
      {
        "method_name": "__redisSetErrorFromErrno",
        "params": "(redisContext *c, int type, const char *prefix)",
        "start_line": 95,
        "end_line": 104
      },
      {
        "method_name": "redisSetReuseAddr",
        "params": "(redisContext *c)",
        "start_line": 106,
        "end_line": 114
      },
      {
        "method_name": "redisCreateSocket",
        "params": "(redisContext *c, int type)",
        "start_line": 116,
        "end_line": 129
      },
      {
        "method_name": "redisSetBlocking",
        "params": "(redisContext *c, int blocking)",
        "start_line": 131,
        "end_line": 163
      },
      {
        "method_name": "redisKeepAlive",
        "params": "(redisContext *c, int interval)",
        "start_line": 165,
        "end_line": 204
      },
      {
        "method_name": "redisSetTcpNoDelay",
        "params": "(redisContext *c)",
        "start_line": 206,
        "end_line": 214
      },
      {
        "method_name": "redisContextTimeoutMsec",
        "params": "(redisContext *c, long *result)",
        "start_line": 219,
        "end_line": 239
      },
      {
        "method_name": "redisContextWaitReady",
        "params": "(redisContext *c, long msec)",
        "start_line": 241,
        "end_line": 272
      },
      {
        "method_name": "redisCheckConnectDone",
        "params": "(redisContext *c, int *completed)",
        "start_line": 274,
        "end_line": 292
      },
      {
        "method_name": "redisCheckSocketError",
        "params": "(redisContext *c)",
        "start_line": 294,
        "end_line": 314
      },
      {
        "method_name": "redisContextSetTimeout",
        "params": "(redisContext *c, const struct timeval tv)",
        "start_line": 316,
        "end_line": 333
      },
      {
        "method_name": "_redisContextConnectTcp",
        "params": "(redisContext *c, const char *addr, int port,\n                                   const struct timeval *timeout,\n                                   const char *source_addr)",
        "start_line": 337,
        "end_line": 503
      },
      {
        "method_name": "redisContextConnectTcp",
        "params": "(redisContext *c, const char *addr, int port,\n                           const struct timeval *timeout)",
        "start_line": 506,
        "end_line": 508
      },
      {
        "method_name": "redisContextConnectBindTcp",
        "params": "(redisContext *c, const char *addr, int port,\n                               const struct timeval *timeout,\n                               const char *source_addr)",
        "start_line": 512,
        "end_line": 514
      },
      {
        "method_name": "redisContextConnectUnix",
        "params": "(redisContext *c, const char *path, const struct timeval *timeout)",
        "start_line": 516,
        "end_line": 571
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/net.h",
    "line": 54,
    "headers": [
      "hiredis.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/read.c",
    "line": 681,
    "headers": [
      "fmacros.h",
      "string.h",
      "stdlib.h",
      "unistd.h",
      "strings.h",
      "errno.h",
      "ctype.h",
      "limits.h",
      "math.h",
      "read.h",
      "sds.h",
      "win32.h"
    ],
    "methods": [
      {
        "method_name": "__redisReaderSetError",
        "params": "(redisReader *r, int type, const char *str)",
        "start_line": 49,
        "end_line": 71
      },
      {
        "method_name": "chrtos",
        "params": "(char *buf, size_t size, char byte)",
        "start_line": 73,
        "end_line": 95
      },
      {
        "method_name": "__redisReaderSetErrorProtocolByte",
        "params": "(redisReader *r, char byte)",
        "start_line": 97,
        "end_line": 104
      },
      {
        "method_name": "__redisReaderSetErrorOOM",
        "params": "(redisReader *r)",
        "start_line": 106,
        "end_line": 108
      },
      {
        "method_name": "*readBytes",
        "params": "(redisReader *r, unsigned int bytes)",
        "start_line": 110,
        "end_line": 118
      },
      {
        "method_name": "*seekNewline",
        "params": "(char *s, size_t len)",
        "start_line": 121,
        "end_line": 145
      },
      {
        "method_name": "string2ll",
        "params": "(const char *s, size_t slen, long long *value)",
        "start_line": 159,
        "end_line": 220
      },
      {
        "method_name": "*readLine",
        "params": "(redisReader *r, int *_len)",
        "start_line": 222,
        "end_line": 235
      },
      {
        "method_name": "moveToNextTask",
        "params": "(redisReader *r)",
        "start_line": 237,
        "end_line": 262
      },
      {
        "method_name": "processLineItem",
        "params": "(redisReader *r)",
        "start_line": 264,
        "end_line": 344
      },
      {
        "method_name": "processBulkItem",
        "params": "(redisReader *r)",
        "start_line": 346,
        "end_line": 416
      },
      {
        "method_name": "processAggregateItem",
        "params": "(redisReader *r)",
        "start_line": 419,
        "end_line": 495
      },
      {
        "method_name": "processItem",
        "params": "(redisReader *r)",
        "start_line": 497,
        "end_line": 568
      },
      {
        "method_name": "*redisReaderCreateWithFunctions",
        "params": "(redisReplyObjectFunctions *fn)",
        "start_line": 570,
        "end_line": 587
      },
      {
        "method_name": "redisReaderFree",
        "params": "(redisReader *r)",
        "start_line": 589,
        "end_line": 596
      },
      {
        "method_name": "redisReaderFeed",
        "params": "(redisReader *r, const char *buf, size_t len)",
        "start_line": 598,
        "end_line": 628
      },
      {
        "method_name": "redisReaderGetReply",
        "params": "(redisReader *r, void **reply)",
        "start_line": 630,
        "end_line": 681
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/read.h",
    "line": 122,
    "headers": [
      "stdio.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "redisReadTask",
        "start_line": 72,
        "end_line": 79
      },
      {
        "struct_name": "redisReplyObjectFunctions",
        "start_line": 81,
        "end_line": 89
      },
      {
        "struct_name": "redisReader",
        "start_line": 91,
        "end_line": 106
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/sds.c",
    "line": 1291,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "ctype.h",
      "assert.h",
      "sds.h",
      "sdsalloc.h",
      "stdio.h",
      "testhelp.h",
      "limits.h"
    ],
    "methods": [
      {
        "method_name": "sdsHdrSize",
        "params": "(char type)",
        "start_line": 41,
        "end_line": 55
      },
      {
        "method_name": "sdsReqType",
        "params": "(size_t string_size)",
        "start_line": 57,
        "end_line": 67
      },
      {
        "method_name": "sdsnewlen",
        "params": "(const void *init, size_t initlen)",
        "start_line": 81,
        "end_line": 135
      },
      {
        "method_name": "sdsempty",
        "params": "(void)",
        "start_line": 139,
        "end_line": 141
      },
      {
        "method_name": "sdsnew",
        "params": "(const char *init)",
        "start_line": 144,
        "end_line": 147
      },
      {
        "method_name": "sdsdup",
        "params": "(const sds s)",
        "start_line": 150,
        "end_line": 152
      },
      {
        "method_name": "sdsfree",
        "params": "(sds s)",
        "start_line": 155,
        "end_line": 158
      },
      {
        "method_name": "sdsupdatelen",
        "params": "(sds s)",
        "start_line": 174,
        "end_line": 177
      },
      {
        "method_name": "sdsclear",
        "params": "(sds s)",
        "start_line": 183,
        "end_line": 186
      },
      {
        "method_name": "sdsMakeRoomFor",
        "params": "(sds s, size_t addlen)",
        "start_line": 194,
        "end_line": 240
      },
      {
        "method_name": "sdsRemoveFreeSpace",
        "params": "(sds s)",
        "start_line": 248,
        "end_line": 272
      },
      {
        "method_name": "sdsAllocSize",
        "params": "(sds s)",
        "start_line": 281,
        "end_line": 284
      },
      {
        "method_name": "*sdsAllocPtr",
        "params": "(sds s)",
        "start_line": 288,
        "end_line": 290
      },
      {
        "method_name": "sdsIncrLen",
        "params": "(sds s, int incr)",
        "start_line": 315,
        "end_line": 354
      },
      {
        "method_name": "sdsgrowzero",
        "params": "(sds s, size_t len)",
        "start_line": 361,
        "end_line": 372
      },
      {
        "method_name": "sdscatlen",
        "params": "(sds s, const void *t, size_t len)",
        "start_line": 379,
        "end_line": 388
      },
      {
        "method_name": "sdscat",
        "params": "(sds s, const char *t)",
        "start_line": 394,
        "end_line": 396
      },
      {
        "method_name": "sdscatsds",
        "params": "(sds s, const sds t)",
        "start_line": 402,
        "end_line": 404
      },
      {
        "method_name": "sdscpylen",
        "params": "(sds s, const char *t, size_t len)",
        "start_line": 408,
        "end_line": 417
      },
      {
        "method_name": "sdscpy",
        "params": "(sds s, const char *t)",
        "start_line": 421,
        "end_line": 423
      },
      {
        "method_name": "sdsll2str",
        "params": "(char *s, long long value)",
        "start_line": 432,
        "end_line": 461
      },
      {
        "method_name": "sdsull2str",
        "params": "(char *s, unsigned long long v)",
        "start_line": 464,
        "end_line": 490
      },
      {
        "method_name": "sdsfromlonglong",
        "params": "(long long value)",
        "start_line": 496,
        "end_line": 501
      },
      {
        "method_name": "sdscatvprintf",
        "params": "(sds s, const char *fmt, va_list ap)",
        "start_line": 504,
        "end_line": 539
      },
      {
        "method_name": "sdscatprintf",
        "params": "(sds s, const char *fmt, ...)",
        "start_line": 557,
        "end_line": 564
      },
      {
        "method_name": "sdscatfmt",
        "params": "(sds s, char const *fmt, ...)",
        "start_line": 582,
        "end_line": 676
      },
      {
        "method_name": "sdstrim",
        "params": "(sds s, const char *cset)",
        "start_line": 692,
        "end_line": 705
      },
      {
        "method_name": "sdsrange",
        "params": "(sds s, int start, int end)",
        "start_line": 723,
        "end_line": 749
      },
      {
        "method_name": "sdstolower",
        "params": "(sds s)",
        "start_line": 752,
        "end_line": 756
      },
      {
        "method_name": "sdstoupper",
        "params": "(sds s)",
        "start_line": 759,
        "end_line": 763
      },
      {
        "method_name": "sdscmp",
        "params": "(const sds s1, const sds s2)",
        "start_line": 776,
        "end_line": 786
      },
      {
        "method_name": "*sdssplitlen",
        "params": "(const char *s, int len, const char *sep, int seplen, int *count)",
        "start_line": 804,
        "end_line": 851
      },
      {
        "method_name": "sdsfreesplitres",
        "params": "(sds *tokens, int count)",
        "start_line": 854,
        "end_line": 859
      },
      {
        "method_name": "sdscatrepr",
        "params": "(sds s, const char *p, size_t len)",
        "start_line": 867,
        "end_line": 890
      },
      {
        "method_name": "is_hex_digit",
        "params": "(char c)",
        "start_line": 894,
        "end_line": 897
      },
      {
        "method_name": "hex_digit_to_int",
        "params": "(char c)",
        "start_line": 901,
        "end_line": 921
      },
      {
        "method_name": "*sdssplitargs",
        "params": "(const char *line, int *argc)",
        "start_line": 942,
        "end_line": 1058
      },
      {
        "method_name": "sdsmapchars",
        "params": "(sds s, const char *from, const char *to, size_t setlen)",
        "start_line": 1069,
        "end_line": 1081
      },
      {
        "method_name": "sdsjoin",
        "params": "(char **argv, int argc, char *sep)",
        "start_line": 1085,
        "end_line": 1094
      },
      {
        "method_name": "sdsjoinsds",
        "params": "(sds *argv, int argc, const char *sep, size_t seplen)",
        "start_line": 1097,
        "end_line": 1106
      },
      {
        "method_name": "*sds_malloc",
        "params": "(size_t size)",
        "start_line": 1113,
        "end_line": 1113
      },
      {
        "method_name": "*sds_realloc",
        "params": "(void *ptr, size_t size)",
        "start_line": 1114,
        "end_line": 1114
      },
      {
        "method_name": "sds_free",
        "params": "(void *ptr)",
        "start_line": 1115,
        "end_line": 1115
      },
      {
        "method_name": "sdsTest",
        "params": "(void)",
        "start_line": 1123,
        "end_line": 1284
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 1288,
        "end_line": 1290
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/sds.h",
    "line": 276,
    "headers": [
      "stdarg.h",
      "stdint.h"
    ],
    "methods": [
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 49,
        "end_line": 52
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 53,
        "end_line": 58
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 59,
        "end_line": 64
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 65,
        "end_line": 70
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 71,
        "end_line": 76
      },
      {
        "method_name": "sdslen",
        "params": "(const sds s)",
        "start_line": 89,
        "end_line": 104
      },
      {
        "method_name": "sdsavail",
        "params": "(const sds s)",
        "start_line": 106,
        "end_line": 130
      },
      {
        "method_name": "sdssetlen",
        "params": "(sds s, size_t newlen)",
        "start_line": 132,
        "end_line": 154
      },
      {
        "method_name": "sdsinclen",
        "params": "(sds s, size_t inc)",
        "start_line": 156,
        "end_line": 179
      },
      {
        "method_name": "sdsalloc",
        "params": "(const sds s)",
        "start_line": 182,
        "end_line": 197
      },
      {
        "method_name": "sdssetalloc",
        "params": "(sds s, size_t newlen)",
        "start_line": 199,
        "end_line": 218
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/sdsalloc.h",
    "line": 42,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/sockcompat.c",
    "line": 248,
    "headers": [
      "sockcompat.h"
    ],
    "methods": [
      {
        "method_name": "_wsaErrorToErrno",
        "params": "(int err)",
        "start_line": 35,
        "end_line": 95
      },
      {
        "method_name": "_updateErrno",
        "params": "(int success)",
        "start_line": 97,
        "end_line": 99
      },
      {
        "method_name": "_initWinsock",
        "params": "()",
        "start_line": 101,
        "end_line": 113
      },
      {
        "method_name": "win32_getaddrinfo",
        "params": "(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res)",
        "start_line": 115,
        "end_line": 132
      },
      {
        "method_name": "*win32_gai_strerror",
        "params": "(int errcode)",
        "start_line": 134,
        "end_line": 147
      },
      {
        "method_name": "win32_freeaddrinfo",
        "params": "(struct addrinfo *res)",
        "start_line": 149,
        "end_line": 151
      },
      {
        "method_name": "win32_socket",
        "params": "(int domain, int type, int protocol)",
        "start_line": 153,
        "end_line": 163
      },
      {
        "method_name": "win32_ioctl",
        "params": "(SOCKET fd, unsigned long request, unsigned long *argp)",
        "start_line": 165,
        "end_line": 169
      },
      {
        "method_name": "win32_bind",
        "params": "(SOCKET sockfd, const struct sockaddr *addr, socklen_t addrlen)",
        "start_line": 171,
        "end_line": 175
      },
      {
        "method_name": "win32_connect",
        "params": "(SOCKET sockfd, const struct sockaddr *addr, socklen_t addrlen)",
        "start_line": 177,
        "end_line": 189
      },
      {
        "method_name": "win32_getsockopt",
        "params": "(SOCKET sockfd, int level, int optname, void *optval, socklen_t *optlen)",
        "start_line": 191,
        "end_line": 210
      },
      {
        "method_name": "win32_setsockopt",
        "params": "(SOCKET sockfd, int level, int optname, const void *optval, socklen_t optlen)",
        "start_line": 212,
        "end_line": 223
      },
      {
        "method_name": "win32_close",
        "params": "(SOCKET fd)",
        "start_line": 225,
        "end_line": 229
      },
      {
        "method_name": "win32_recv",
        "params": "(SOCKET sockfd, void *buf, size_t len, int flags)",
        "start_line": 231,
        "end_line": 235
      },
      {
        "method_name": "win32_send",
        "params": "(SOCKET sockfd, const void *buf, size_t len, int flags)",
        "start_line": 237,
        "end_line": 241
      },
      {
        "method_name": "win32_poll",
        "params": "(struct pollfd *fds, nfds_t nfds, int timeout)",
        "start_line": 243,
        "end_line": 247
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/sockcompat.h",
    "line": 91,
    "headers": [
      "unistd.h",
      "sys/socket.h",
      "sys/select.h",
      "sys/un.h",
      "netinet/in.h",
      "netinet/tcp.h",
      "arpa/inet.h",
      "netdb.h",
      "poll.h",
      "winsock2.h",
      "ws2tcpip.h",
      "stddef.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/ssl.c",
    "line": 448,
    "headers": [
      "hiredis.h",
      "async.h",
      "assert.h",
      "pthread.h",
      "errno.h",
      "string.h",
      "openssl/ssl.h",
      "openssl/err.h",
      "async_private.h"
    ],
    "methods": [
      {
        "method_name": "sslLogCallback",
        "params": "(const SSL *ssl, int where, int ret)",
        "start_line": 84,
        "end_line": 109
      },
      {
        "method_name": "sslLockInit",
        "params": "(sslLockType *l)",
        "start_line": 123,
        "end_line": 125
      },
      {
        "method_name": "sslLockAcquire",
        "params": "(sslLockType *l)",
        "start_line": 126,
        "end_line": 128
      },
      {
        "method_name": "sslLockRelease",
        "params": "(sslLockType *l)",
        "start_line": 129,
        "end_line": 131
      },
      {
        "method_name": "opensslDoLock",
        "params": "(int mode, int lkid, const char *f, int line)",
        "start_line": 134,
        "end_line": 145
      },
      {
        "method_name": "initOpensslLocks",
        "params": "(void)",
        "start_line": 147,
        "end_line": 159
      },
      {
        "method_name": "redisSSLConnect",
        "params": "(redisContext *c, SSL_CTX *ssl_ctx, SSL *ssl)",
        "start_line": 166,
        "end_line": 207
      },
      {
        "method_name": "redisInitiateSSL",
        "params": "(redisContext *c, SSL *ssl)",
        "start_line": 209,
        "end_line": 211
      },
      {
        "method_name": "redisSecureConnection",
        "params": "(redisContext *c, const char *capath,\n                          const char *certpath, const char *keypath, const char *servername)",
        "start_line": 214,
        "end_line": 280
      },
      {
        "method_name": "maybeCheckWant",
        "params": "(redisSSLContext *rssl, int rv)",
        "start_line": 282,
        "end_line": 296
      },
      {
        "method_name": "redisSSLFreeContext",
        "params": "(void *privdata)",
        "start_line": 302,
        "end_line": 315
      },
      {
        "method_name": "redisSSLRead",
        "params": "(redisContext *c, char *buf, size_t bufcap)",
        "start_line": 317,
        "end_line": 357
      },
      {
        "method_name": "redisSSLWrite",
        "params": "(redisContext *c)",
        "start_line": 359,
        "end_line": 379
      },
      {
        "method_name": "redisSSLAsyncRead",
        "params": "(redisAsyncContext *ac)",
        "start_line": 381,
        "end_line": 409
      },
      {
        "method_name": "redisSSLAsyncWrite",
        "params": "(redisAsyncContext *ac)",
        "start_line": 411,
        "end_line": 439
      }
    ],
    "structs": [
      {
        "struct_name": "redisSSLContext",
        "start_line": 49,
        "end_line": 75
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/test.c",
    "line": 1012,
    "headers": [
      "fmacros.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "strings.h",
      "sys/socket.h",
      "sys/time.h",
      "netdb.h",
      "assert.h",
      "unistd.h",
      "signal.h",
      "errno.h",
      "limits.h",
      "hiredis.h",
      "hiredis_ssl.h"
    ],
    "methods": [
      {
        "method_name": "test",
        "params": "(_s)",
        "start_line": 52,
        "end_line": 52
      },
      {
        "method_name": "printf",
        "params": "(\"\\033[0;32mPASSED\\033[0;0m\\n\")",
        "start_line": 53,
        "end_line": 53
      },
      {
        "method_name": "usec",
        "params": "(void)",
        "start_line": 55,
        "end_line": 59
      },
      {
        "method_name": "*select_database",
        "params": "(redisContext *c)",
        "start_line": 68,
        "end_line": 88
      },
      {
        "method_name": "disconnect",
        "params": "(redisContext *c, int keep_fd)",
        "start_line": 90,
        "end_line": 106
      },
      {
        "method_name": "do_ssl_handshake",
        "params": "(redisContext *c, struct config config)",
        "start_line": 108,
        "end_line": 120
      },
      {
        "method_name": "*do_connect",
        "params": "(struct config config)",
        "start_line": 122,
        "end_line": 157
      },
      {
        "method_name": "do_reconnect",
        "params": "(redisContext *c, struct config config)",
        "start_line": 159,
        "end_line": 165
      },
      {
        "method_name": "test_format_commands",
        "params": "(void)",
        "start_line": 167,
        "end_line": 285
      },
      {
        "method_name": "test_append_formatted_commands",
        "params": "(struct config config)",
        "start_line": 287,
        "end_line": 307
      },
      {
        "method_name": "test_reply_reader",
        "params": "(void)",
        "start_line": 309,
        "end_line": 462
      },
      {
        "method_name": "test_free_null",
        "params": "(void)",
        "start_line": 464,
        "end_line": 475
      },
      {
        "method_name": "test_blocking_connection_errors",
        "params": "(void)",
        "start_line": 478,
        "end_line": 517
      },
      {
        "method_name": "test_blocking_connection",
        "params": "(struct config config)",
        "start_line": 519,
        "end_line": 595
      },
      {
        "method_name": "test_blocking_connection_timeouts",
        "params": "(struct config config)",
        "start_line": 597,
        "end_line": 642
      },
      {
        "method_name": "test_blocking_io_errors",
        "params": "(struct config config)",
        "start_line": 644,
        "end_line": 693
      },
      {
        "method_name": "test_invalid_timeout_errors",
        "params": "(struct config config)",
        "start_line": 695,
        "end_line": 717
      },
      {
        "method_name": "test_throughput",
        "params": "(struct config config)",
        "start_line": 719,
        "end_line": 806
      },
      {
        "method_name": "__test_callback",
        "params": "(redisContext *c, void *privdata)",
        "start_line": 809,
        "end_line": 814
      },
      {
        "method_name": "__test_reply_callback",
        "params": "(redisContext *c, redisReply *reply, void *privdata)",
        "start_line": 816,
        "end_line": 822
      },
      {
        "method_name": "*__connect_nonblock",
        "params": "()",
        "start_line": 824,
        "end_line": 828
      },
      {
        "method_name": "test_nonblocking_connection",
        "params": "()",
        "start_line": 830,
        "end_line": 905
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 907,
        "end_line": 1012
      }
    ],
    "structs": [
      {
        "struct_name": "config",
        "start_line": 28,
        "end_line": 48
      }
    ],
    "enums": [
      {
        "enum_name": "connection_type",
        "start_line": 21,
        "end_line": 26
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/hiredis/win32.h",
    "line": 56,
    "headers": [
      "winsock2.h"
    ],
    "methods": [
      {
        "method_name": "c99_vsnprintf",
        "params": "(char* str, size_t size, const char* format, va_list ap)",
        "start_line": 27,
        "end_line": 36
      },
      {
        "method_name": "c99_snprintf",
        "params": "(char* str, size_t size, const char* format, ...)",
        "start_line": 39,
        "end_line": 48
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_externs.h",
    "line": 94,
    "headers": [
      "jemalloc/internal/bin.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/pages.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/stats.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h",
    "line": 57,
    "headers": [],
    "methods": [
      {
        "method_name": "arena_ind_get",
        "params": "(const arena_t *arena)",
        "start_line": 5,
        "end_line": 7
      },
      {
        "method_name": "arena_internal_add",
        "params": "(arena_t *arena, size_t size)",
        "start_line": 10,
        "end_line": 12
      },
      {
        "method_name": "arena_internal_sub",
        "params": "(arena_t *arena, size_t size)",
        "start_line": 15,
        "end_line": 17
      },
      {
        "method_name": "arena_internal_get",
        "params": "(arena_t *arena)",
        "start_line": 20,
        "end_line": 22
      },
      {
        "method_name": "arena_prof_accum",
        "params": "(tsdn_t *tsdn, arena_t *arena, uint64_t accumbytes)",
        "start_line": 25,
        "end_line": 33
      },
      {
        "method_name": "percpu_arena_update",
        "params": "(tsd_t *tsd, unsigned cpu)",
        "start_line": 36,
        "end_line": 55
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h",
    "line": 354,
    "headers": [
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/rtree.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/sz.h",
      "jemalloc/internal/ticker.h"
    ],
    "methods": [
      {
        "method_name": "arena_prof_tctx_get",
        "params": "(tsdn_t *tsdn, const void *ptr, alloc_ctx_t *alloc_ctx)",
        "start_line": 12,
        "end_line": 28
      },
      {
        "method_name": "arena_prof_tctx_set",
        "params": "(tsdn_t *tsdn, const void *ptr, UNUSED size_t usize,\n    alloc_ctx_t *alloc_ctx, prof_tctx_t *tctx)",
        "start_line": 32,
        "end_line": 47
      },
      {
        "method_name": "arena_prof_tctx_reset",
        "params": "(tsdn_t *tsdn, const void *ptr, UNUSED prof_tctx_t *tctx)",
        "start_line": 50,
        "end_line": 58
      },
      {
        "method_name": "arena_decay_ticks",
        "params": "(tsdn_t *tsdn, arena_t *arena, unsigned nticks)",
        "start_line": 61,
        "end_line": 76
      },
      {
        "method_name": "arena_decay_tick",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 79,
        "end_line": 84
      },
      {
        "method_name": "arena_malloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t size, szind_t ind, bool zero,\n    tcache_t *tcache, bool slow_path)",
        "start_line": 88,
        "end_line": 106
      },
      {
        "method_name": "arena_aalloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 109,
        "end_line": 111
      },
      {
        "method_name": "arena_salloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 114,
        "end_line": 125
      },
      {
        "method_name": "arena_vsalloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 128,
        "end_line": 158
      },
      {
        "method_name": "arena_dalloc_no_tcache",
        "params": "(tsdn_t *tsdn, void *ptr)",
        "start_line": 161,
        "end_line": 187
      },
      {
        "method_name": "arena_dalloc",
        "params": "(tsdn_t *tsdn, void *ptr, tcache_t *tcache,\n    alloc_ctx_t *alloc_ctx, bool slow_path)",
        "start_line": 191,
        "end_line": 240
      },
      {
        "method_name": "arena_sdalloc_no_tcache",
        "params": "(tsdn_t *tsdn, void *ptr, size_t size)",
        "start_line": 243,
        "end_line": 284
      },
      {
        "method_name": "arena_sdalloc",
        "params": "(tsdn_t *tsdn, void *ptr, size_t size, tcache_t *tcache,\n    alloc_ctx_t *alloc_ctx, bool slow_path)",
        "start_line": 288,
        "end_line": 352
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_stats.h",
    "line": 237,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/mutex_prof.h",
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [
      {
        "method_name": "arena_stats_init",
        "params": "(UNUSED tsdn_t *tsdn, arena_stats_t *arena_stats)",
        "start_line": 98,
        "end_line": 112
      },
      {
        "method_name": "arena_stats_lock",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats)",
        "start_line": 115,
        "end_line": 119
      },
      {
        "method_name": "arena_stats_unlock",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats)",
        "start_line": 122,
        "end_line": 126
      },
      {
        "method_name": "arena_stats_read_u64",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats,\n    arena_stats_u64_t *p)",
        "start_line": 130,
        "end_line": 137
      },
      {
        "method_name": "arena_stats_add_u64",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats,\n    arena_stats_u64_t *p, uint64_t x)",
        "start_line": 141,
        "end_line": 148
      },
      {
        "method_name": "arena_stats_sub_u64",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats,\n    arena_stats_u64_t *p, uint64_t x)",
        "start_line": 152,
        "end_line": 161
      },
      {
        "method_name": "arena_stats_accum_u64",
        "params": "(arena_stats_u64_t *dst, uint64_t src)",
        "start_line": 169,
        "end_line": 176
      },
      {
        "method_name": "arena_stats_read_zu",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p)",
        "start_line": 179,
        "end_line": 186
      },
      {
        "method_name": "arena_stats_add_zu",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p,\n    size_t x)",
        "start_line": 190,
        "end_line": 198
      },
      {
        "method_name": "arena_stats_sub_zu",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p,\n    size_t x)",
        "start_line": 202,
        "end_line": 211
      },
      {
        "method_name": "arena_stats_accum_zu",
        "params": "(atomic_zu_t *dst, size_t src)",
        "start_line": 215,
        "end_line": 218
      },
      {
        "method_name": "arena_stats_large_nrequests_add",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats,\n    szind_t szind, uint64_t nrequests)",
        "start_line": 222,
        "end_line": 227
      },
      {
        "method_name": "arena_stats_mapped_add",
        "params": "(tsdn_t *tsdn, arena_stats_t *arena_stats, size_t size)",
        "start_line": 230,
        "end_line": 234
      }
    ],
    "structs": [
      {
        "struct_name": "arena_stats_large_s",
        "start_line": 22,
        "end_line": 39
      },
      {
        "struct_name": "arena_stats_decay_s",
        "start_line": 42,
        "end_line": 49
      },
      {
        "struct_name": "arena_stats_s",
        "start_line": 57,
        "end_line": 95
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_structs_a.h",
    "line": 11,
    "headers": [
      "jemalloc/internal/bitmap.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "arena_slab_data_s",
        "start_line": 6,
        "end_line": 9
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_structs_b.h",
    "line": 229,
    "headers": [
      "jemalloc/internal/arena_stats.h",
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/bin.h",
      "jemalloc/internal/bitmap.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/nstime.h",
      "jemalloc/internal/ql.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/smoothstep.h",
      "jemalloc/internal/ticker.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "arena_decay_s",
        "start_line": 17,
        "end_line": 75
      },
      {
        "struct_name": "arena_s",
        "start_line": 77,
        "end_line": 216
      },
      {
        "struct_name": "arena_tdata_s",
        "start_line": 219,
        "end_line": 221
      },
      {
        "struct_name": "alloc_ctx_s",
        "start_line": 224,
        "end_line": 227
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/arena_types.h",
    "line": 43,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 20,
        "end_line": 38
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/assert.h",
    "line": 56,
    "headers": [
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "assert",
        "params": "(e)",
        "start_line": 9,
        "end_line": 16
      },
      {
        "method_name": "not_reached",
        "params": "()",
        "start_line": 20,
        "end_line": 28
      },
      {
        "method_name": "not_implemented",
        "params": "()",
        "start_line": 32,
        "end_line": 38
      },
      {
        "method_name": "assert_not_implemented",
        "params": "(e)",
        "start_line": 42,
        "end_line": 46
      },
      {
        "method_name": "cassert",
        "params": "(c)",
        "start_line": 51,
        "end_line": 55
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/atomic.h",
    "line": 77,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/atomic_c11.h",
    "line": 97,
    "headers": [
      "stdatomic.h"
    ],
    "methods": [
      {
        "method_name": "atomic_load_##short_type",
        "params": "(const atomic_##short_type##_t *a,\t\t\\\n    atomic_memory_order_t mo)",
        "start_line": 23,
        "end_line": 32
      },
      {
        "method_name": "atomic_store_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 36,
        "end_line": 38
      },
      {
        "method_name": "atomic_exchange_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 42,
        "end_line": 44
      },
      {
        "method_name": "atomic_compare_exchange_weak_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 49,
        "end_line": 52
      },
      {
        "method_name": "atomic_compare_exchange_strong_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 57,
        "end_line": 60
      },
      {
        "method_name": "atomic_fetch_add_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 72,
        "end_line": 74
      },
      {
        "method_name": "atomic_fetch_sub_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 78,
        "end_line": 80
      },
      {
        "method_name": "atomic_fetch_and_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 83,
        "end_line": 85
      },
      {
        "method_name": "atomic_fetch_or_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 88,
        "end_line": 90
      },
      {
        "method_name": "atomic_fetch_xor_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 93,
        "end_line": 95
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h",
    "line": 127,
    "headers": [
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "ATOMIC_INIT",
        "params": "(...)",
        "start_line": 6,
        "end_line": 6
      },
      {
        "method_name": "atomic_enum_to_builtin",
        "params": "(atomic_memory_order_t mo)",
        "start_line": 17,
        "end_line": 32
      },
      {
        "method_name": "atomic_fence",
        "params": "(atomic_memory_order_t mo)",
        "start_line": 35,
        "end_line": 37
      },
      {
        "method_name": "atomic_load_##short_type",
        "params": "(const atomic_##short_type##_t *a,\t\t\\\n    atomic_memory_order_t mo)",
        "start_line": 47,
        "end_line": 51
      },
      {
        "method_name": "atomic_store_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\t\\\n    atomic_memory_order_t mo)",
        "start_line": 55,
        "end_line": 57
      },
      {
        "method_name": "atomic_exchange_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 61,
        "end_line": 66
      },
      {
        "method_name": "atomic_compare_exchange_weak_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 71,
        "end_line": 75
      },
      {
        "method_name": "atomic_compare_exchange_strong_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 80,
        "end_line": 85
      },
      {
        "method_name": "atomic_fetch_add_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 94,
        "end_line": 97
      },
      {
        "method_name": "atomic_fetch_sub_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 101,
        "end_line": 104
      },
      {
        "method_name": "atomic_fetch_and_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 108,
        "end_line": 111
      },
      {
        "method_name": "atomic_fetch_or_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 115,
        "end_line": 118
      },
      {
        "method_name": "atomic_fetch_xor_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 122,
        "end_line": 125
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 41,
        "end_line": 43
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 8,
        "end_line": 14
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h",
    "line": 191,
    "headers": [],
    "methods": [
      {
        "method_name": "ATOMIC_INIT",
        "params": "(...)",
        "start_line": 4,
        "end_line": 4
      },
      {
        "method_name": "atomic_fence",
        "params": "(atomic_memory_order_t mo)",
        "start_line": 15,
        "end_line": 44
      },
      {
        "method_name": "atomic_pre_sc_load_fence",
        "params": "()",
        "start_line": 64,
        "end_line": 71
      },
      {
        "method_name": "atomic_post_sc_store_fence",
        "params": "()",
        "start_line": 74,
        "end_line": 82
      },
      {
        "method_name": "atomic_load_##short_type",
        "params": "(const atomic_##short_type##_t *a,\t\t\\\n    atomic_memory_order_t mo)",
        "start_line": 92,
        "end_line": 101
      },
      {
        "method_name": "atomic_store_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 105,
        "end_line": 113
      },
      {
        "method_name": "atomic_exchange_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 117,
        "end_line": 128
      },
      {
        "method_name": "atomic_compare_exchange_weak_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 133,
        "end_line": 142
      },
      {
        "method_name": "atomic_compare_exchange_strong_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 146,
        "end_line": 155
      },
      {
        "method_name": "atomic_fetch_add_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 163,
        "end_line": 165
      },
      {
        "method_name": "atomic_fetch_sub_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 169,
        "end_line": 171
      },
      {
        "method_name": "atomic_fetch_and_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 175,
        "end_line": 177
      },
      {
        "method_name": "atomic_fetch_or_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 181,
        "end_line": 183
      },
      {
        "method_name": "atomic_fetch_xor_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 187,
        "end_line": 189
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 86,
        "end_line": 88
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 6,
        "end_line": 12
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/atomic_msvc.h",
    "line": 158,
    "headers": [],
    "methods": [
      {
        "method_name": "ATOMIC_INIT",
        "params": "(...)",
        "start_line": 4,
        "end_line": 4
      },
      {
        "method_name": "atomic_fence",
        "params": "(atomic_memory_order_t mo)",
        "start_line": 20,
        "end_line": 36
      },
      {
        "method_name": "atomic_load_##short_type",
        "params": "(const atomic_##short_type##_t *a,\t\t\\\n    atomic_memory_order_t mo)",
        "start_line": 61,
        "end_line": 67
      },
      {
        "method_name": "atomic_store_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 71,
        "end_line": 79
      },
      {
        "method_name": "atomic_exchange_##short_type",
        "params": "(atomic_##short_type##_t *a, type val,\t\\\n    atomic_memory_order_t mo)",
        "start_line": 83,
        "end_line": 86
      },
      {
        "method_name": "atomic_compare_exchange_weak_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 91,
        "end_line": 105
      },
      {
        "method_name": "atomic_compare_exchange_strong_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\\\n    type *expected, type desired, atomic_memory_order_t success_mo,\t\\\n    atomic_memory_order_t failure_mo)",
        "start_line": 110,
        "end_line": 114
      },
      {
        "method_name": "atomic_fetch_add_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 122,
        "end_line": 125
      },
      {
        "method_name": "atomic_fetch_sub_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 129,
        "end_line": 138
      },
      {
        "method_name": "atomic_fetch_and_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 141,
        "end_line": 144
      },
      {
        "method_name": "atomic_fetch_or_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 147,
        "end_line": 150
      },
      {
        "method_name": "atomic_fetch_xor_##short_type",
        "params": "(atomic_##short_type##_t *a,\t\t\\\n    type val, atomic_memory_order_t mo)",
        "start_line": 153,
        "end_line": 156
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 55,
        "end_line": 57
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 6,
        "end_line": 12
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/background_thread_externs.h",
    "line": 33,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h",
    "line": 57,
    "headers": [],
    "methods": [
      {
        "method_name": "background_thread_enabled",
        "params": "(void)",
        "start_line": 5,
        "end_line": 7
      },
      {
        "method_name": "background_thread_enabled_set",
        "params": "(tsdn_t *tsdn, bool state)",
        "start_line": 10,
        "end_line": 13
      },
      {
        "method_name": "arena_background_thread_info_get",
        "params": "(arena_t *arena)",
        "start_line": 16,
        "end_line": 19
      },
      {
        "method_name": "background_thread_wakeup_time_get",
        "params": "(background_thread_info_t *info)",
        "start_line": 22,
        "end_line": 27
      },
      {
        "method_name": "background_thread_wakeup_time_set",
        "params": "(tsdn_t *tsdn, background_thread_info_t *info,\n    uint64_t wakeup_time)",
        "start_line": 31,
        "end_line": 36
      },
      {
        "method_name": "background_thread_indefinite_sleep",
        "params": "(background_thread_info_t *info)",
        "start_line": 39,
        "end_line": 41
      },
      {
        "method_name": "arena_background_thread_inactivity_check",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    bool is_background_thread)",
        "start_line": 45,
        "end_line": 55
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/background_thread_structs.h",
    "line": 53,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "background_thread_info_s",
        "start_line": 20,
        "end_line": 43
      },
      {
        "struct_name": "background_thread_stats_s",
        "start_line": 46,
        "end_line": 50
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 13,
        "end_line": 18
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/base_externs.h",
    "line": 22,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/base_inlines.h",
    "line": 13,
    "headers": [],
    "methods": [
      {
        "method_name": "base_ind_get",
        "params": "(const base_t *base)",
        "start_line": 5,
        "end_line": 7
      },
      {
        "method_name": "metadata_thp_enabled",
        "params": "(void)",
        "start_line": 10,
        "end_line": 12
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/base_structs.h",
    "line": 59,
    "headers": [
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "base_block_s",
        "start_line": 9,
        "end_line": 18
      },
      {
        "struct_name": "base_s",
        "start_line": 20,
        "end_line": 57
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/base_types.h",
    "line": 33,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 18,
        "end_line": 31
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/bin.h",
    "line": 106,
    "headers": [
      "jemalloc/internal/extent_types.h",
      "jemalloc/internal/extent_structs.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/bin_stats.h"
    ],
    "methods": [
      {
        "method_name": "bin_stats_merge",
        "params": "(tsdn_t *tsdn, bin_stats_t *dst_bin_stats, bin_t *bin)",
        "start_line": 91,
        "end_line": 104
      }
    ],
    "structs": [
      {
        "struct_name": "bin_info_s",
        "start_line": 34,
        "end_line": 49
      },
      {
        "struct_name": "bin_s",
        "start_line": 55,
        "end_line": 79
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/bin_stats.h",
    "line": 51,
    "headers": [
      "jemalloc/internal/mutex_prof.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "bin_stats_s",
        "start_line": 7,
        "end_line": 49
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/bit_util.h",
    "line": 165,
    "headers": [
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "ffs_llu",
        "params": "(unsigned long long bitmap)",
        "start_line": 16,
        "end_line": 18
      },
      {
        "method_name": "ffs_lu",
        "params": "(unsigned long bitmap)",
        "start_line": 21,
        "end_line": 23
      },
      {
        "method_name": "ffs_u",
        "params": "(unsigned bitmap)",
        "start_line": 26,
        "end_line": 28
      },
      {
        "method_name": "ffs_zu",
        "params": "(size_t bitmap)",
        "start_line": 31,
        "end_line": 41
      },
      {
        "method_name": "ffs_u64",
        "params": "(uint64_t bitmap)",
        "start_line": 44,
        "end_line": 52
      },
      {
        "method_name": "ffs_u32",
        "params": "(uint32_t bitmap)",
        "start_line": 55,
        "end_line": 62
      },
      {
        "method_name": "pow2_ceil_u64",
        "params": "(uint64_t x)",
        "start_line": 65,
        "end_line": 75
      },
      {
        "method_name": "pow2_ceil_u32",
        "params": "(uint32_t x)",
        "start_line": 78,
        "end_line": 87
      },
      {
        "method_name": "pow2_ceil_zu",
        "params": "(size_t x)",
        "start_line": 91,
        "end_line": 97
      },
      {
        "method_name": "lg_floor",
        "params": "(size_t x)",
        "start_line": 101,
        "end_line": 111
      },
      {
        "method_name": "lg_floor",
        "params": "(size_t x)",
        "start_line": 114,
        "end_line": 128
      },
      {
        "method_name": "lg_floor",
        "params": "(size_t x)",
        "start_line": 131,
        "end_line": 141
      },
      {
        "method_name": "lg_floor",
        "params": "(size_t x)",
        "start_line": 144,
        "end_line": 160
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/bitmap.h",
    "line": 369,
    "headers": [
      "jemalloc/internal/arena_types.h",
      "jemalloc/internal/bit_util.h",
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [
      {
        "method_name": "BITMAP_INFO_INITIALIZER",
        "params": "(nbits)",
        "start_line": 110,
        "end_line": 131
      },
      {
        "method_name": "BITMAP_INFO_INITIALIZER",
        "params": "(nbits)",
        "start_line": 138,
        "end_line": 143
      },
      {
        "method_name": "bitmap_full",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo)",
        "start_line": 176,
        "end_line": 192
      },
      {
        "method_name": "bitmap_get",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit)",
        "start_line": 195,
        "end_line": 203
      },
      {
        "method_name": "bitmap_set",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit)",
        "start_line": 206,
        "end_line": 238
      },
      {
        "method_name": "bitmap_ffu",
        "params": "(const bitmap_t *bitmap, const bitmap_info_t *binfo, size_t min_bit)",
        "start_line": 242,
        "end_line": 297
      },
      {
        "method_name": "bitmap_sfu",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo)",
        "start_line": 301,
        "end_line": 328
      },
      {
        "method_name": "bitmap_unset",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit)",
        "start_line": 331,
        "end_line": 367
      }
    ],
    "structs": [
      {
        "struct_name": "bitmap_level_s",
        "start_line": 147,
        "end_line": 150
      },
      {
        "struct_name": "bitmap_info_s",
        "start_line": 152,
        "end_line": 169
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/cache_bin.h",
    "line": 114,
    "headers": [
      "jemalloc/internal/ql.h"
    ],
    "methods": [
      {
        "method_name": "cache_bin_array_descriptor_init",
        "params": "(cache_bin_array_descriptor_t *descriptor,\n    cache_bin_t *bins_small, cache_bin_t *bins_large)",
        "start_line": 81,
        "end_line": 85
      },
      {
        "method_name": "cache_bin_alloc_easy",
        "params": "(cache_bin_t *bin, bool *success)",
        "start_line": 88,
        "end_line": 112
      }
    ],
    "structs": [
      {
        "struct_name": "cache_bin_stats_s",
        "start_line": 25,
        "end_line": 31
      },
      {
        "struct_name": "cache_bin_info_s",
        "start_line": 38,
        "end_line": 41
      },
      {
        "struct_name": "cache_bin_s",
        "start_line": 44,
        "end_line": 65
      },
      {
        "struct_name": "cache_bin_array_descriptor_s",
        "start_line": 68,
        "end_line": 77
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/ckh.h",
    "line": 101,
    "headers": [
      "jemalloc/internal/tsd.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 28,
        "end_line": 31
      },
      {
        "struct_name": "",
        "start_line": 34,
        "end_line": 63
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/ctl.h",
    "line": 131,
    "headers": [
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/mutex_prof.h",
      "jemalloc/internal/ql.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/stats.h"
    ],
    "methods": [
      {
        "method_name": "xmallctl",
        "params": "(name, oldp, oldlenp, newp, newlen)",
        "start_line": 104,
        "end_line": 112
      },
      {
        "method_name": "xmallctlnametomib",
        "params": "(name, mibp, miblenp)",
        "start_line": 114,
        "end_line": 120
      },
      {
        "method_name": "xmallctlbymib",
        "params": "(mib, miblen, oldp, oldlenp, newp, newlen)",
        "start_line": 122,
        "end_line": 129
      }
    ],
    "structs": [
      {
        "struct_name": "ctl_node_s",
        "start_line": 14,
        "end_line": 16
      },
      {
        "struct_name": "ctl_named_node_s",
        "start_line": 18,
        "end_line": 26
      },
      {
        "struct_name": "ctl_indexed_node_s",
        "start_line": 28,
        "end_line": 32
      },
      {
        "struct_name": "ctl_arena_stats_s",
        "start_line": 34,
        "end_line": 45
      },
      {
        "struct_name": "ctl_stats_s",
        "start_line": 47,
        "end_line": 58
      },
      {
        "struct_name": "ctl_arena_s",
        "start_line": 61,
        "end_line": 77
      },
      {
        "struct_name": "ctl_arenas_s",
        "start_line": 79,
        "end_line": 91
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/div.h",
    "line": 41,
    "headers": [
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "div_compute",
        "params": "(div_info_t *div_info, size_t n)",
        "start_line": 26,
        "end_line": 39
      }
    ],
    "structs": [
      {
        "struct_name": "div_info_s",
        "start_line": 16,
        "end_line": 21
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/emitter.h",
    "line": 435,
    "headers": [
      "jemalloc/internal/ql.h"
    ],
    "methods": [
      {
        "method_name": "emitter_row_init",
        "params": "(emitter_row_t *row)",
        "start_line": 64,
        "end_line": 66
      },
      {
        "method_name": "emitter_col_init",
        "params": "(emitter_col_t *col, emitter_row_t *row)",
        "start_line": 69,
        "end_line": 72
      },
      {
        "method_name": "(*write_cb)",
        "params": "(void *, const char *), void *cbopaque)",
        "start_line": 87,
        "end_line": 93
      },
      {
        "method_name": "emitter_printf",
        "params": "(emitter_t *emitter, const char *format, ...)",
        "start_line": 98,
        "end_line": 104
      },
      {
        "method_name": "emitter_table_printf",
        "params": "(emitter_t *emitter, const char *format, ...)",
        "start_line": 109,
        "end_line": 116
      },
      {
        "method_name": "emitter_gen_fmt",
        "params": "(char *out_fmt, size_t out_size, const char *fmt_specifier,\n    emitter_justify_t justify, int width)",
        "start_line": 120,
        "end_line": 134
      },
      {
        "method_name": "emitter_print_value",
        "params": "(emitter_t *emitter, emitter_justify_t justify, int width,\n    emitter_type_t value_type, const void *value)",
        "start_line": 145,
        "end_line": 205
      },
      {
        "method_name": "emitter_nest_inc",
        "params": "(emitter_t *emitter)",
        "start_line": 210,
        "end_line": 213
      },
      {
        "method_name": "emitter_nest_dec",
        "params": "(emitter_t *emitter)",
        "start_line": 216,
        "end_line": 219
      },
      {
        "method_name": "emitter_indent",
        "params": "(emitter_t *emitter)",
        "start_line": 222,
        "end_line": 234
      },
      {
        "method_name": "emitter_json_key_prefix",
        "params": "(emitter_t *emitter)",
        "start_line": 237,
        "end_line": 240
      },
      {
        "method_name": "emitter_begin",
        "params": "(emitter_t *emitter)",
        "start_line": 243,
        "end_line": 261
      },
      {
        "method_name": "emitter_kv_note",
        "params": "(emitter_t *emitter, const char *json_key, const char *table_key,\n    emitter_type_t value_type, const void *value,\n    const char *table_note_key, emitter_type_t table_note_value_type,\n    const void *table_note_value)",
        "start_line": 271,
        "end_line": 292
      },
      {
        "method_name": "emitter_kv",
        "params": "(emitter_t *emitter, const char *json_key, const char *table_key,\n    emitter_type_t value_type, const void *value)",
        "start_line": 296,
        "end_line": 299
      },
      {
        "method_name": "emitter_json_kv",
        "params": "(emitter_t *emitter, const char *json_key,\n    emitter_type_t value_type, const void *value)",
        "start_line": 303,
        "end_line": 307
      },
      {
        "method_name": "emitter_table_kv",
        "params": "(emitter_t *emitter, const char *table_key,\n    emitter_type_t value_type, const void *value)",
        "start_line": 311,
        "end_line": 315
      },
      {
        "method_name": "emitter_dict_begin",
        "params": "(emitter_t *emitter, const char *json_key,\n    const char *table_header)",
        "start_line": 319,
        "end_line": 342
      },
      {
        "method_name": "emitter_json_dict_begin",
        "params": "(emitter_t *emitter, const char *json_key)",
        "start_line": 345,
        "end_line": 349
      },
      {
        "method_name": "emitter_json_dict_end",
        "params": "(emitter_t *emitter)",
        "start_line": 352,
        "end_line": 356
      },
      {
        "method_name": "emitter_table_dict_begin",
        "params": "(emitter_t *emitter, const char *table_key)",
        "start_line": 359,
        "end_line": 363
      },
      {
        "method_name": "emitter_table_dict_end",
        "params": "(emitter_t *emitter)",
        "start_line": 366,
        "end_line": 370
      },
      {
        "method_name": "emitter_json_arr_begin",
        "params": "(emitter_t *emitter, const char *json_key)",
        "start_line": 373,
        "end_line": 379
      },
      {
        "method_name": "emitter_json_arr_end",
        "params": "(emitter_t *emitter)",
        "start_line": 382,
        "end_line": 390
      },
      {
        "method_name": "emitter_json_arr_obj_begin",
        "params": "(emitter_t *emitter)",
        "start_line": 393,
        "end_line": 410
      },
      {
        "method_name": "emitter_json_arr_value",
        "params": "(emitter_t *emitter, emitter_type_t value_type,\n    const void *value)",
        "start_line": 414,
        "end_line": 420
      },
      {
        "method_name": "emitter_table_row",
        "params": "(emitter_t *emitter, emitter_row_t *row)",
        "start_line": 423,
        "end_line": 433
      }
    ],
    "structs": [
      {
        "struct_name": "emitter_col_s",
        "start_line": 38,
        "end_line": 56
      },
      {
        "struct_name": "emitter_row_s",
        "start_line": 59,
        "end_line": 61
      },
      {
        "struct_name": "emitter_s",
        "start_line": 75,
        "end_line": 83
      }
    ],
    "enums": [
      {
        "enum_name": "emitter_output_e",
        "start_line": 7,
        "end_line": 10
      },
      {
        "enum_name": "emitter_justify_e",
        "start_line": 13,
        "end_line": 18
      },
      {
        "enum_name": "emitter_type_e",
        "start_line": 21,
        "end_line": 35
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/extent_dss.h",
    "line": 26,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 4,
        "end_line": 10
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/extent_externs.h",
    "line": 73,
    "headers": [
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/mutex_pool.h",
      "jemalloc/internal/ph.h",
      "jemalloc/internal/rtree.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/extent_inlines.h",
    "line": 433,
    "headers": [
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/mutex_pool.h",
      "jemalloc/internal/pages.h",
      "jemalloc/internal/prng.h",
      "jemalloc/internal/ql.h",
      "jemalloc/internal/sz.h"
    ],
    "methods": [
      {
        "method_name": "extent_lock",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 12,
        "end_line": 15
      },
      {
        "method_name": "extent_unlock",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 18,
        "end_line": 21
      },
      {
        "method_name": "extent_lock2",
        "params": "(tsdn_t *tsdn, extent_t *extent1, extent_t *extent2)",
        "start_line": 24,
        "end_line": 28
      },
      {
        "method_name": "extent_unlock2",
        "params": "(tsdn_t *tsdn, extent_t *extent1, extent_t *extent2)",
        "start_line": 31,
        "end_line": 35
      },
      {
        "method_name": "extent_arena_get",
        "params": "(const extent_t *extent)",
        "start_line": 38,
        "end_line": 50
      },
      {
        "method_name": "extent_szind_get_maybe_invalid",
        "params": "(const extent_t *extent)",
        "start_line": 53,
        "end_line": 58
      },
      {
        "method_name": "extent_szind_get",
        "params": "(const extent_t *extent)",
        "start_line": 61,
        "end_line": 65
      },
      {
        "method_name": "extent_usize_get",
        "params": "(const extent_t *extent)",
        "start_line": 68,
        "end_line": 70
      },
      {
        "method_name": "extent_sn_get",
        "params": "(const extent_t *extent)",
        "start_line": 73,
        "end_line": 76
      },
      {
        "method_name": "extent_state_get",
        "params": "(const extent_t *extent)",
        "start_line": 79,
        "end_line": 82
      },
      {
        "method_name": "extent_zeroed_get",
        "params": "(const extent_t *extent)",
        "start_line": 85,
        "end_line": 88
      },
      {
        "method_name": "extent_committed_get",
        "params": "(const extent_t *extent)",
        "start_line": 91,
        "end_line": 94
      },
      {
        "method_name": "extent_dumpable_get",
        "params": "(const extent_t *extent)",
        "start_line": 97,
        "end_line": 100
      },
      {
        "method_name": "extent_slab_get",
        "params": "(const extent_t *extent)",
        "start_line": 103,
        "end_line": 106
      },
      {
        "method_name": "extent_nfree_get",
        "params": "(const extent_t *extent)",
        "start_line": 109,
        "end_line": 113
      },
      {
        "method_name": "extent_base_get",
        "params": "(const extent_t *extent)",
        "start_line": 116,
        "end_line": 120
      },
      {
        "method_name": "extent_addr_get",
        "params": "(const extent_t *extent)",
        "start_line": 123,
        "end_line": 127
      },
      {
        "method_name": "extent_size_get",
        "params": "(const extent_t *extent)",
        "start_line": 130,
        "end_line": 132
      },
      {
        "method_name": "extent_esn_get",
        "params": "(const extent_t *extent)",
        "start_line": 135,
        "end_line": 137
      },
      {
        "method_name": "extent_bsize_get",
        "params": "(const extent_t *extent)",
        "start_line": 140,
        "end_line": 142
      },
      {
        "method_name": "extent_before_get",
        "params": "(const extent_t *extent)",
        "start_line": 145,
        "end_line": 147
      },
      {
        "method_name": "extent_last_get",
        "params": "(const extent_t *extent)",
        "start_line": 150,
        "end_line": 153
      },
      {
        "method_name": "extent_past_get",
        "params": "(const extent_t *extent)",
        "start_line": 156,
        "end_line": 159
      },
      {
        "method_name": "extent_slab_data_get",
        "params": "(extent_t *extent)",
        "start_line": 162,
        "end_line": 165
      },
      {
        "method_name": "extent_slab_data_get_const",
        "params": "(const extent_t *extent)",
        "start_line": 168,
        "end_line": 171
      },
      {
        "method_name": "extent_prof_tctx_get",
        "params": "(const extent_t *extent)",
        "start_line": 174,
        "end_line": 177
      },
      {
        "method_name": "extent_arena_set",
        "params": "(extent_t *extent, arena_t *arena)",
        "start_line": 180,
        "end_line": 185
      },
      {
        "method_name": "extent_addr_set",
        "params": "(extent_t *extent, void *addr)",
        "start_line": 188,
        "end_line": 190
      },
      {
        "method_name": "extent_addr_randomize",
        "params": "(UNUSED tsdn_t *tsdn, extent_t *extent, size_t alignment)",
        "start_line": 193,
        "end_line": 216
      },
      {
        "method_name": "extent_size_set",
        "params": "(extent_t *extent, size_t size)",
        "start_line": 219,
        "end_line": 222
      },
      {
        "method_name": "extent_esn_set",
        "params": "(extent_t *extent, size_t esn)",
        "start_line": 225,
        "end_line": 228
      },
      {
        "method_name": "extent_bsize_set",
        "params": "(extent_t *extent, size_t bsize)",
        "start_line": 231,
        "end_line": 233
      },
      {
        "method_name": "extent_szind_set",
        "params": "(extent_t *extent, szind_t szind)",
        "start_line": 236,
        "end_line": 240
      },
      {
        "method_name": "extent_nfree_set",
        "params": "(extent_t *extent, unsigned nfree)",
        "start_line": 243,
        "end_line": 247
      },
      {
        "method_name": "extent_nfree_inc",
        "params": "(extent_t *extent)",
        "start_line": 250,
        "end_line": 253
      },
      {
        "method_name": "extent_nfree_dec",
        "params": "(extent_t *extent)",
        "start_line": 256,
        "end_line": 259
      },
      {
        "method_name": "extent_sn_set",
        "params": "(extent_t *extent, size_t sn)",
        "start_line": 262,
        "end_line": 265
      },
      {
        "method_name": "extent_state_set",
        "params": "(extent_t *extent, extent_state_t state)",
        "start_line": 268,
        "end_line": 271
      },
      {
        "method_name": "extent_zeroed_set",
        "params": "(extent_t *extent, bool zeroed)",
        "start_line": 274,
        "end_line": 277
      },
      {
        "method_name": "extent_committed_set",
        "params": "(extent_t *extent, bool committed)",
        "start_line": 280,
        "end_line": 283
      },
      {
        "method_name": "extent_dumpable_set",
        "params": "(extent_t *extent, bool dumpable)",
        "start_line": 286,
        "end_line": 289
      },
      {
        "method_name": "extent_slab_set",
        "params": "(extent_t *extent, bool slab)",
        "start_line": 292,
        "end_line": 295
      },
      {
        "method_name": "extent_prof_tctx_set",
        "params": "(extent_t *extent, prof_tctx_t *tctx)",
        "start_line": 298,
        "end_line": 300
      },
      {
        "method_name": "extent_init",
        "params": "(extent_t *extent, arena_t *arena, void *addr, size_t size,\n    bool slab, szind_t szind, size_t sn, extent_state_t state, bool zeroed,\n    bool committed, bool dumpable)",
        "start_line": 305,
        "end_line": 322
      },
      {
        "method_name": "extent_binit",
        "params": "(extent_t *extent, void *addr, size_t bsize, size_t sn)",
        "start_line": 325,
        "end_line": 336
      },
      {
        "method_name": "extent_list_init",
        "params": "(extent_list_t *list)",
        "start_line": 339,
        "end_line": 341
      },
      {
        "method_name": "extent_list_first",
        "params": "(const extent_list_t *list)",
        "start_line": 344,
        "end_line": 346
      },
      {
        "method_name": "extent_list_last",
        "params": "(const extent_list_t *list)",
        "start_line": 349,
        "end_line": 351
      },
      {
        "method_name": "extent_list_append",
        "params": "(extent_list_t *list, extent_t *extent)",
        "start_line": 354,
        "end_line": 356
      },
      {
        "method_name": "extent_list_prepend",
        "params": "(extent_list_t *list, extent_t *extent)",
        "start_line": 359,
        "end_line": 361
      },
      {
        "method_name": "extent_list_replace",
        "params": "(extent_list_t *list, extent_t *to_remove,\n    extent_t *to_insert)",
        "start_line": 365,
        "end_line": 368
      },
      {
        "method_name": "extent_list_remove",
        "params": "(extent_list_t *list, extent_t *extent)",
        "start_line": 371,
        "end_line": 373
      },
      {
        "method_name": "extent_sn_comp",
        "params": "(const extent_t *a, const extent_t *b)",
        "start_line": 376,
        "end_line": 381
      },
      {
        "method_name": "extent_esn_comp",
        "params": "(const extent_t *a, const extent_t *b)",
        "start_line": 384,
        "end_line": 389
      },
      {
        "method_name": "extent_ad_comp",
        "params": "(const extent_t *a, const extent_t *b)",
        "start_line": 392,
        "end_line": 397
      },
      {
        "method_name": "extent_ead_comp",
        "params": "(const extent_t *a, const extent_t *b)",
        "start_line": 400,
        "end_line": 405
      },
      {
        "method_name": "extent_snad_comp",
        "params": "(const extent_t *a, const extent_t *b)",
        "start_line": 408,
        "end_line": 418
      },
      {
        "method_name": "extent_esnead_comp",
        "params": "(const extent_t *a, const extent_t *b)",
        "start_line": 421,
        "end_line": 431
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/extent_mmap.h",
    "line": 10,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/extent_structs.h",
    "line": 219,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/bitmap.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/ql.h",
      "jemalloc/internal/ph.h",
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "extent_s",
        "start_line": 19,
        "end_line": 169
      },
      {
        "struct_name": "extents_s",
        "start_line": 175,
        "end_line": 217
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 11,
        "end_line": 16
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/extent_types.h",
    "line": 17,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/hash.h",
    "line": 318,
    "headers": [
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "hash_rotl_32",
        "params": "(uint32_t x, int8_t r)",
        "start_line": 15,
        "end_line": 17
      },
      {
        "method_name": "hash_rotl_64",
        "params": "(uint64_t x, int8_t r)",
        "start_line": 20,
        "end_line": 22
      },
      {
        "method_name": "hash_get_block_32",
        "params": "(const uint32_t *p, int i)",
        "start_line": 25,
        "end_line": 35
      },
      {
        "method_name": "hash_get_block_64",
        "params": "(const uint64_t *p, int i)",
        "start_line": 38,
        "end_line": 48
      },
      {
        "method_name": "hash_fmix_32",
        "params": "(uint32_t h)",
        "start_line": 51,
        "end_line": 59
      },
      {
        "method_name": "hash_fmix_64",
        "params": "(uint64_t k)",
        "start_line": 62,
        "end_line": 70
      },
      {
        "method_name": "hash_x86_32",
        "params": "(const void *key, int len, uint32_t seed)",
        "start_line": 73,
        "end_line": 120
      },
      {
        "method_name": "hash_x86_128",
        "params": "(const void *key, const int len, uint32_t seed,\n    uint64_t r_out[2])",
        "start_line": 124,
        "end_line": 221
      },
      {
        "method_name": "hash_x64_128",
        "params": "(const void *key, const int len, const uint32_t seed,\n    uint64_t r_out[2])",
        "start_line": 225,
        "end_line": 298
      },
      {
        "method_name": "hash",
        "params": "(const void *key, size_t len, const uint32_t seed, size_t r_hash[2])",
        "start_line": 303,
        "end_line": 316
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/hooks.h",
    "line": 19,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h",
    "line": 91,
    "headers": [
      "math.h",
      "limits.h",
      "stdbool.h",
      "stdio.h",
      "stdlib.h",
      "stdint.h",
      "stddef.h",
      "strings.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "isblank",
        "params": "(int c)",
        "start_line": 82,
        "end_line": 84
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_externs.h",
    "line": 53,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/tsd_types.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_includes.h",
    "line": 94,
    "headers": [
      "foo.h",
      "jemalloc/internal/extent_types.h",
      "jemalloc/internal/base_types.h",
      "jemalloc/internal/arena_types.h",
      "jemalloc/internal/tcache_types.h",
      "jemalloc/internal/prof_types.h",
      "jemalloc/internal/arena_structs_a.h",
      "jemalloc/internal/extent_structs.h",
      "jemalloc/internal/base_structs.h",
      "jemalloc/internal/prof_structs.h",
      "jemalloc/internal/arena_structs_b.h",
      "jemalloc/internal/tcache_structs.h",
      "jemalloc/internal/background_thread_structs.h",
      "jemalloc/internal/jemalloc_internal_externs.h",
      "jemalloc/internal/extent_externs.h",
      "jemalloc/internal/base_externs.h",
      "jemalloc/internal/arena_externs.h",
      "jemalloc/internal/large_externs.h",
      "jemalloc/internal/tcache_externs.h",
      "jemalloc/internal/prof_externs.h",
      "jemalloc/internal/background_thread_externs.h",
      "jemalloc/internal/jemalloc_internal_inlines_a.h",
      "jemalloc/internal/base_inlines.h",
      "jemalloc/internal/prof_inlines_a.h",
      "jemalloc/internal/arena_inlines_a.h",
      "jemalloc/internal/extent_inlines.h",
      "jemalloc/internal/jemalloc_internal_inlines_b.h",
      "jemalloc/internal/tcache_inlines.h",
      "jemalloc/internal/arena_inlines_b.h",
      "jemalloc/internal/jemalloc_internal_inlines_c.h",
      "jemalloc/internal/prof_inlines_b.h",
      "jemalloc/internal/background_thread_inlines.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h",
    "line": 172,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/bit_util.h",
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/ticker.h"
    ],
    "methods": [
      {
        "method_name": "malloc_getcpu",
        "params": "(void)",
        "start_line": 11,
        "end_line": 19
      },
      {
        "method_name": "percpu_arena_choose",
        "params": "(void)",
        "start_line": 23,
        "end_line": 40
      },
      {
        "method_name": "percpu_arena_ind_limit",
        "params": "(percpu_arena_mode_t mode)",
        "start_line": 44,
        "end_line": 55
      },
      {
        "method_name": "arena_tdata_get",
        "params": "(tsd_t *tsd, unsigned ind, bool refresh_if_missing)",
        "start_line": 58,
        "end_line": 80
      },
      {
        "method_name": "arena_get",
        "params": "(tsdn_t *tsdn, unsigned ind, bool init_if_missing)",
        "start_line": 83,
        "end_line": 96
      },
      {
        "method_name": "decay_ticker_get",
        "params": "(tsd_t *tsd, unsigned ind)",
        "start_line": 99,
        "end_line": 107
      },
      {
        "method_name": "tcache_small_bin_get",
        "params": "(tcache_t *tcache, szind_t binind)",
        "start_line": 110,
        "end_line": 113
      },
      {
        "method_name": "tcache_large_bin_get",
        "params": "(tcache_t *tcache, szind_t binind)",
        "start_line": 116,
        "end_line": 119
      },
      {
        "method_name": "tcache_available",
        "params": "(tsd_t *tsd)",
        "start_line": 122,
        "end_line": 137
      },
      {
        "method_name": "tcache_get",
        "params": "(tsd_t *tsd)",
        "start_line": 140,
        "end_line": 146
      },
      {
        "method_name": "pre_reentrancy",
        "params": "(tsd_t *tsd, arena_t *arena)",
        "start_line": 149,
        "end_line": 161
      },
      {
        "method_name": "post_reentrancy",
        "params": "(tsd_t *tsd)",
        "start_line": 164,
        "end_line": 170
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h",
    "line": 86,
    "headers": [
      "jemalloc/internal/rtree.h"
    ],
    "methods": [
      {
        "method_name": "arena_choose_impl",
        "params": "(tsd_t *tsd, arena_t *arena, bool internal)",
        "start_line": 8,
        "end_line": 59
      },
      {
        "method_name": "arena_choose",
        "params": "(tsd_t *tsd, arena_t *arena)",
        "start_line": 62,
        "end_line": 64
      },
      {
        "method_name": "arena_ichoose",
        "params": "(tsd_t *tsd, arena_t *arena)",
        "start_line": 67,
        "end_line": 69
      },
      {
        "method_name": "arena_is_auto",
        "params": "(arena_t *arena)",
        "start_line": 72,
        "end_line": 75
      },
      {
        "method_name": "iealloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 78,
        "end_line": 84
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h",
    "line": 257,
    "headers": [
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/sz.h",
      "jemalloc/internal/witness.h"
    ],
    "methods": [
      {
        "method_name": "iaalloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 27,
        "end_line": 31
      },
      {
        "method_name": "isalloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 34,
        "end_line": 38
      },
      {
        "method_name": "iallocztm",
        "params": "(tsdn_t *tsdn, size_t size, szind_t ind, bool zero, tcache_t *tcache,\n    bool is_internal, arena_t *arena, bool slow_path)",
        "start_line": 42,
        "end_line": 58
      },
      {
        "method_name": "ialloc",
        "params": "(tsd_t *tsd, size_t size, szind_t ind, bool zero, bool slow_path)",
        "start_line": 61,
        "end_line": 64
      },
      {
        "method_name": "ipallocztm",
        "params": "(tsdn_t *tsdn, size_t usize, size_t alignment, bool zero,\n    tcache_t *tcache, bool is_internal, arena_t *arena)",
        "start_line": 68,
        "end_line": 84
      },
      {
        "method_name": "ipalloct",
        "params": "(tsdn_t *tsdn, size_t usize, size_t alignment, bool zero,\n    tcache_t *tcache, arena_t *arena)",
        "start_line": 88,
        "end_line": 90
      },
      {
        "method_name": "ipalloc",
        "params": "(tsd_t *tsd, size_t usize, size_t alignment, bool zero)",
        "start_line": 93,
        "end_line": 96
      },
      {
        "method_name": "ivsalloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 99,
        "end_line": 101
      },
      {
        "method_name": "idalloctm",
        "params": "(tsdn_t *tsdn, void *ptr, tcache_t *tcache, alloc_ctx_t *alloc_ctx,\n    bool is_internal, bool slow_path)",
        "start_line": 105,
        "end_line": 119
      },
      {
        "method_name": "idalloc",
        "params": "(tsd_t *tsd, void *ptr)",
        "start_line": 122,
        "end_line": 124
      },
      {
        "method_name": "isdalloct",
        "params": "(tsdn_t *tsdn, void *ptr, size_t size, tcache_t *tcache,\n    alloc_ctx_t *alloc_ctx, bool slow_path)",
        "start_line": 128,
        "end_line": 132
      },
      {
        "method_name": "iralloct_realign",
        "params": "(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size,\n    size_t extra, size_t alignment, bool zero, tcache_t *tcache,\n    arena_t *arena)",
        "start_line": 137,
        "end_line": 170
      },
      {
        "method_name": "iralloct",
        "params": "(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size, size_t alignment,\n    bool zero, tcache_t *tcache, arena_t *arena)",
        "start_line": 174,
        "end_line": 192
      },
      {
        "method_name": "iralloc",
        "params": "(tsd_t *tsd, void *ptr, size_t oldsize, size_t size, size_t alignment,\n    bool zero)",
        "start_line": 196,
        "end_line": 199
      },
      {
        "method_name": "ixalloc",
        "params": "(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size, size_t extra,\n    size_t alignment, bool zero)",
        "start_line": 203,
        "end_line": 216
      },
      {
        "method_name": "iget_defrag_hint",
        "params": "(tsdn_t *tsdn, void* ptr)",
        "start_line": 219,
        "end_line": 255
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h",
    "line": 43,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h",
    "line": 185,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/large_externs.h",
    "line": 26,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/log.h",
    "line": 115,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/mutex.h"
    ],
    "methods": [
      {
        "method_name": "LOG_VAR_INIT",
        "params": "(name_str)",
        "start_line": 55,
        "end_line": 55
      },
      {
        "method_name": "if",
        "params": "(config_log)",
        "start_line": 66,
        "end_line": 79
      },
      {
        "method_name": "log_impl_varargs",
        "params": "(const char *name, ...)",
        "start_line": 89,
        "end_line": 104
      }
    ],
    "structs": [
      {
        "struct_name": "log_var_s",
        "start_line": 42,
        "end_line": 49
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/malloc_io.h",
    "line": 102,
    "headers": [],
    "methods": [
      {
        "method_name": "malloc_write_fd",
        "params": "(int fd, const void *buf, size_t count)",
        "start_line": 67,
        "end_line": 86
      },
      {
        "method_name": "malloc_read_fd",
        "params": "(int fd, void *buf, size_t count)",
        "start_line": 89,
        "end_line": 100
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/mutex.h",
    "line": 248,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/mutex_prof.h",
      "jemalloc/internal/tsd.h",
      "jemalloc/internal/witness.h"
    ],
    "methods": [
      {
        "method_name": "malloc_mutex_lock_final",
        "params": "(malloc_mutex_t *mutex)",
        "start_line": 140,
        "end_line": 142
      },
      {
        "method_name": "malloc_mutex_trylock_final",
        "params": "(malloc_mutex_t *mutex)",
        "start_line": 145,
        "end_line": 147
      },
      {
        "method_name": "mutex_owner_stats_update",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 150,
        "end_line": 159
      },
      {
        "method_name": "malloc_mutex_trylock",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 163,
        "end_line": 174
      },
      {
        "method_name": "malloc_mutex_prof_merge",
        "params": "(mutex_prof_data_t *sum, mutex_prof_data_t *data)",
        "start_line": 178,
        "end_line": 198
      },
      {
        "method_name": "malloc_mutex_lock",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 201,
        "end_line": 210
      },
      {
        "method_name": "malloc_mutex_unlock",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 213,
        "end_line": 218
      },
      {
        "method_name": "malloc_mutex_assert_owner",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 221,
        "end_line": 223
      },
      {
        "method_name": "malloc_mutex_assert_not_owner",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 226,
        "end_line": 228
      },
      {
        "method_name": "malloc_mutex_prof_read",
        "params": "(tsdn_t *tsdn, mutex_prof_data_t *data,\n    malloc_mutex_t *mutex)",
        "start_line": 233,
        "end_line": 246
      }
    ],
    "structs": [
      {
        "struct_name": "malloc_mutex_s",
        "start_line": 20,
        "end_line": 65
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 9,
        "end_line": 17
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/mutex_pool.h",
    "line": 94,
    "headers": [
      "jemalloc/internal/hash.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/witness.h"
    ],
    "methods": [
      {
        "method_name": "mutex_pool_mutex",
        "params": "(mutex_pool_t *pool, uintptr_t key)",
        "start_line": 20,
        "end_line": 24
      },
      {
        "method_name": "mutex_pool_assert_not_held",
        "params": "(tsdn_t *tsdn, mutex_pool_t *pool)",
        "start_line": 27,
        "end_line": 31
      },
      {
        "method_name": "mutex_pool_lock",
        "params": "(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key)",
        "start_line": 41,
        "end_line": 46
      },
      {
        "method_name": "mutex_pool_unlock",
        "params": "(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key)",
        "start_line": 49,
        "end_line": 54
      },
      {
        "method_name": "mutex_pool_lock2",
        "params": "(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key1,\n    uintptr_t key2)",
        "start_line": 58,
        "end_line": 72
      },
      {
        "method_name": "mutex_pool_unlock2",
        "params": "(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key1,\n    uintptr_t key2)",
        "start_line": 76,
        "end_line": 87
      },
      {
        "method_name": "mutex_pool_assert_owner",
        "params": "(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key)",
        "start_line": 90,
        "end_line": 92
      }
    ],
    "structs": [
      {
        "struct_name": "mutex_pool_s",
        "start_line": 12,
        "end_line": 14
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/mutex_prof.h",
    "line": 99,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/nstime.h",
      "jemalloc/internal/tsd_types.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 67,
        "end_line": 97
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 13,
        "end_line": 18
      },
      {
        "enum_name": "",
        "start_line": 31,
        "end_line": 36
      },
      {
        "enum_name": "",
        "start_line": 56,
        "end_line": 59
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/nstime.h",
    "line": 34,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 8,
        "end_line": 10
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/pages.h",
    "line": 88,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 61,
        "end_line": 68
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/ph.h",
    "line": 391,
    "headers": [],
    "methods": [
      {
        "method_name": "phn_lchild_set",
        "params": "(a_type, a_field, a_phn, a_lchild)",
        "start_line": 35,
        "end_line": 37
      },
      {
        "method_name": "phn_prev_set",
        "params": "(a_type, a_field, a_phn, a_prev)",
        "start_line": 41,
        "end_line": 43
      },
      {
        "method_name": "phn_next_set",
        "params": "(a_type, a_field, a_phn, a_next)",
        "start_line": 47,
        "end_line": 49
      },
      {
        "method_name": "phn_merge_ordered",
        "params": "(a_type, a_field, a_phn0, a_phn1, a_cmp)",
        "start_line": 51,
        "end_line": 65
      },
      {
        "method_name": "phn_merge",
        "params": "(a_type, a_field, a_phn0, a_phn1, a_cmp, r_phn)",
        "start_line": 67,
        "end_line": 81
      },
      {
        "method_name": "ph_merge_siblings",
        "params": "(a_type, a_field, a_phn, a_cmp, r_phn)",
        "start_line": 83,
        "end_line": 168
      },
      {
        "method_name": "ph_merge_aux",
        "params": "(a_type, a_field, a_ph, a_cmp)",
        "start_line": 170,
        "end_line": 181
      },
      {
        "method_name": "ph_merge_children",
        "params": "(a_type, a_field, a_phn, a_cmp, r_phn)",
        "start_line": 183,
        "end_line": 191
      },
      {
        "method_name": "a_prefix##new",
        "params": "(a_ph_type *ph)",
        "start_line": 213,
        "end_line": 215
      },
      {
        "method_name": "a_prefix##empty",
        "params": "(a_ph_type *ph)",
        "start_line": 217,
        "end_line": 219
      },
      {
        "method_name": "a_prefix##first",
        "params": "(a_ph_type *ph)",
        "start_line": 221,
        "end_line": 227
      },
      {
        "method_name": "a_prefix##any",
        "params": "(a_ph_type *ph)",
        "start_line": 229,
        "end_line": 238
      },
      {
        "method_name": "a_prefix##insert",
        "params": "(a_ph_type *ph, a_type *phn)",
        "start_line": 240,
        "end_line": 265
      },
      {
        "method_name": "a_prefix##remove_first",
        "params": "(a_ph_type *ph)",
        "start_line": 267,
        "end_line": 281
      },
      {
        "method_name": "a_prefix##remove_any",
        "params": "(a_ph_type *ph)",
        "start_line": 283,
        "end_line": 308
      },
      {
        "method_name": "a_prefix##remove",
        "params": "(a_ph_type *ph, a_type *phn)",
        "start_line": 310,
        "end_line": 389
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 20,
        "end_line": 24
      },
      {
        "struct_name": "",
        "start_line": 28,
        "end_line": 30
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/prng.h",
    "line": 185,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/bit_util.h"
    ],
    "methods": [
      {
        "method_name": "prng_state_next_u32",
        "params": "(uint32_t state)",
        "start_line": 36,
        "end_line": 38
      },
      {
        "method_name": "prng_state_next_u64",
        "params": "(uint64_t state)",
        "start_line": 41,
        "end_line": 43
      },
      {
        "method_name": "prng_state_next_zu",
        "params": "(size_t state)",
        "start_line": 46,
        "end_line": 54
      },
      {
        "method_name": "prng_lg_range_u32",
        "params": "(atomic_u32_t *state, unsigned lg_range, bool atomic)",
        "start_line": 67,
        "end_line": 87
      },
      {
        "method_name": "prng_lg_range_u64",
        "params": "(uint64_t *state, unsigned lg_range)",
        "start_line": 90,
        "end_line": 101
      },
      {
        "method_name": "prng_lg_range_zu",
        "params": "(atomic_zu_t *state, unsigned lg_range, bool atomic)",
        "start_line": 104,
        "end_line": 124
      },
      {
        "method_name": "prng_range_u32",
        "params": "(atomic_u32_t *state, uint32_t range, bool atomic)",
        "start_line": 132,
        "end_line": 147
      },
      {
        "method_name": "prng_range_u64",
        "params": "(uint64_t *state, uint64_t range)",
        "start_line": 150,
        "end_line": 165
      },
      {
        "method_name": "prng_range_zu",
        "params": "(atomic_zu_t *state, size_t range, bool atomic)",
        "start_line": 168,
        "end_line": 183
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/prof_externs.h",
    "line": 92,
    "headers": [
      "jemalloc/internal/mutex.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h",
    "line": 83,
    "headers": [
      "jemalloc/internal/mutex.h"
    ],
    "methods": [
      {
        "method_name": "prof_accum_add",
        "params": "(tsdn_t *tsdn, prof_accum_t *prof_accum, uint64_t accumbytes)",
        "start_line": 7,
        "end_line": 42
      },
      {
        "method_name": "prof_accum_cancel",
        "params": "(tsdn_t *tsdn, prof_accum_t *prof_accum, size_t usize)",
        "start_line": 45,
        "end_line": 70
      },
      {
        "method_name": "prof_active_get_unlocked",
        "params": "(void)",
        "start_line": 73,
        "end_line": 81
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h",
    "line": 206,
    "headers": [
      "jemalloc/internal/sz.h"
    ],
    "methods": [
      {
        "method_name": "prof_gdump_get_unlocked",
        "params": "(void)",
        "start_line": 7,
        "end_line": 14
      },
      {
        "method_name": "prof_tdata_get",
        "params": "(tsd_t *tsd, bool create)",
        "start_line": 17,
        "end_line": 37
      },
      {
        "method_name": "prof_tctx_get",
        "params": "(tsdn_t *tsdn, const void *ptr, alloc_ctx_t *alloc_ctx)",
        "start_line": 40,
        "end_line": 45
      },
      {
        "method_name": "prof_tctx_set",
        "params": "(tsdn_t *tsdn, const void *ptr, size_t usize,\n    alloc_ctx_t *alloc_ctx, prof_tctx_t *tctx)",
        "start_line": 49,
        "end_line": 54
      },
      {
        "method_name": "prof_tctx_reset",
        "params": "(tsdn_t *tsdn, const void *ptr, prof_tctx_t *tctx)",
        "start_line": 57,
        "end_line": 62
      },
      {
        "method_name": "prof_sample_accum_update",
        "params": "(tsd_t *tsd, size_t usize, bool update,\n    prof_tdata_t **tdata_out)",
        "start_line": 66,
        "end_line": 99
      },
      {
        "method_name": "prof_alloc_prep",
        "params": "(tsd_t *tsd, size_t usize, bool prof_active, bool update)",
        "start_line": 102,
        "end_line": 119
      },
      {
        "method_name": "prof_malloc",
        "params": "(tsdn_t *tsdn, const void *ptr, size_t usize, alloc_ctx_t *alloc_ctx,\n    prof_tctx_t *tctx)",
        "start_line": 123,
        "end_line": 134
      },
      {
        "method_name": "prof_realloc",
        "params": "(tsd_t *tsd, const void *ptr, size_t usize, prof_tctx_t *tctx,\n    bool prof_active, bool updated, const void *old_ptr, size_t old_usize,\n    prof_tctx_t *old_tctx)",
        "start_line": 139,
        "end_line": 192
      },
      {
        "method_name": "prof_free",
        "params": "(tsd_t *tsd, const void *ptr, size_t usize, alloc_ctx_t *alloc_ctx)",
        "start_line": 195,
        "end_line": 204
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/prof_structs.h",
    "line": 201,
    "headers": [
      "jemalloc/internal/ckh.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/prng.h",
      "jemalloc/internal/rb.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "prof_bt_s",
        "start_line": 9,
        "end_line": 13
      },
      {
        "struct_name": "",
        "start_line": 17,
        "end_line": 20
      },
      {
        "struct_name": "prof_accum_s",
        "start_line": 23,
        "end_line": 30
      },
      {
        "struct_name": "prof_cnt_s",
        "start_line": 32,
        "end_line": 38
      },
      {
        "struct_name": "prof_tctx_s",
        "start_line": 47,
        "end_line": 96
      },
      {
        "struct_name": "prof_gctx_s",
        "start_line": 99,
        "end_line": 132
      },
      {
        "struct_name": "prof_tdata_s",
        "start_line": 135,
        "end_line": 198
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 40,
        "end_line": 45
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/prof_types.h",
    "line": 56,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/ql.h",
    "line": 88,
    "headers": [
      "jemalloc/internal/qr.h"
    ],
    "methods": [
      {
        "method_name": "ql_head_initializer",
        "params": "(a_head)",
        "start_line": 12,
        "end_line": 12
      },
      {
        "method_name": "ql_new",
        "params": "(a_head)",
        "start_line": 17,
        "end_line": 19
      },
      {
        "method_name": "ql_before_insert",
        "params": "(a_head, a_qlelm, a_elm, a_field)",
        "start_line": 37,
        "end_line": 42
      },
      {
        "method_name": "ql_head_insert",
        "params": "(a_head, a_elm, a_field)",
        "start_line": 47,
        "end_line": 52
      },
      {
        "method_name": "ql_tail_insert",
        "params": "(a_head, a_elm, a_field)",
        "start_line": 54,
        "end_line": 59
      },
      {
        "method_name": "ql_remove",
        "params": "(a_head, a_elm, a_field)",
        "start_line": 61,
        "end_line": 70
      },
      {
        "method_name": "ql_head_remove",
        "params": "(a_head, a_type, a_field)",
        "start_line": 72,
        "end_line": 75
      },
      {
        "method_name": "ql_tail_remove",
        "params": "(a_head, a_type, a_field)",
        "start_line": 77,
        "end_line": 80
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 8,
        "end_line": 10
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/qr.h",
    "line": 72,
    "headers": [],
    "methods": [
      {
        "method_name": "qr_new",
        "params": "(a_qr, a_field)",
        "start_line": 12,
        "end_line": 15
      },
      {
        "method_name": "qr_before_insert",
        "params": "(a_qrelm, a_qr, a_field)",
        "start_line": 21,
        "end_line": 26
      },
      {
        "method_name": "qr_after_insert",
        "params": "(a_qrelm, a_qr, a_field)",
        "start_line": 28,
        "end_line": 33
      },
      {
        "method_name": "qr_meld",
        "params": "(a_qr_a, a_qr_b, a_type, a_field)",
        "start_line": 35,
        "end_line": 42
      },
      {
        "method_name": "qr_remove",
        "params": "(a_qr, a_field)",
        "start_line": 51,
        "end_line": 58
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 6,
        "end_line": 9
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/rb.h",
    "line": 1006,
    "headers": [
      "stdint.h",
      "stdbool.h",
      "assert.h",
      "rb.h"
    ],
    "methods": [
      {
        "method_name": "rbtn_left_set",
        "params": "(a_type, a_field, a_node, a_left)",
        "start_line": 54,
        "end_line": 56
      },
      {
        "method_name": "rbtn_right_set",
        "params": "(a_type, a_field, a_node, a_right)",
        "start_line": 63,
        "end_line": 66
      },
      {
        "method_name": "rbtn_color_set",
        "params": "(a_type, a_field, a_node, a_red)",
        "start_line": 72,
        "end_line": 76
      },
      {
        "method_name": "rbtn_red_set",
        "params": "(a_type, a_field, a_node)",
        "start_line": 77,
        "end_line": 80
      },
      {
        "method_name": "rbtn_black_set",
        "params": "(a_type, a_field, a_node)",
        "start_line": 81,
        "end_line": 84
      },
      {
        "method_name": "rbt_node_new",
        "params": "(a_type, a_field, a_rbt, a_node)",
        "start_line": 87,
        "end_line": 93
      },
      {
        "method_name": "rbtn_right_set",
        "params": "(a_type, a_field, a_node, a_right)",
        "start_line": 98,
        "end_line": 100
      },
      {
        "method_name": "rbtn_color_set",
        "params": "(a_type, a_field, a_node, a_red)",
        "start_line": 105,
        "end_line": 107
      },
      {
        "method_name": "rbtn_red_set",
        "params": "(a_type, a_field, a_node)",
        "start_line": 108,
        "end_line": 110
      },
      {
        "method_name": "rbtn_black_set",
        "params": "(a_type, a_field, a_node)",
        "start_line": 111,
        "end_line": 113
      },
      {
        "method_name": "rbt_node_new",
        "params": "(a_type, a_field, a_rbt, a_node)",
        "start_line": 116,
        "end_line": 120
      },
      {
        "method_name": "rb_new",
        "params": "(a_type, a_field, a_rbt)",
        "start_line": 124,
        "end_line": 126
      },
      {
        "method_name": "rbtn_first",
        "params": "(a_type, a_field, a_rbt, a_root, r_node)",
        "start_line": 129,
        "end_line": 137
      },
      {
        "method_name": "rbtn_last",
        "params": "(a_type, a_field, a_rbt, a_root, r_node)",
        "start_line": 139,
        "end_line": 146
      },
      {
        "method_name": "rbtn_rotate_left",
        "params": "(a_type, a_field, a_node, r_node)",
        "start_line": 148,
        "end_line": 153
      },
      {
        "method_name": "rbtn_rotate_right",
        "params": "(a_type, a_field, a_node, r_node)",
        "start_line": 155,
        "end_line": 160
      },
      {
        "method_name": "a_prefix##new",
        "params": "(a_rbt_type *rbtree)",
        "start_line": 344,
        "end_line": 346
      },
      {
        "method_name": "a_prefix##empty",
        "params": "(a_rbt_type *rbtree)",
        "start_line": 348,
        "end_line": 350
      },
      {
        "method_name": "a_prefix##first",
        "params": "(a_rbt_type *rbtree)",
        "start_line": 352,
        "end_line": 356
      },
      {
        "method_name": "a_prefix##last",
        "params": "(a_rbt_type *rbtree)",
        "start_line": 358,
        "end_line": 362
      },
      {
        "method_name": "a_prefix##next",
        "params": "(a_rbt_type *rbtree, a_type *node)",
        "start_line": 364,
        "end_line": 387
      },
      {
        "method_name": "a_prefix##prev",
        "params": "(a_rbt_type *rbtree, a_type *node)",
        "start_line": 389,
        "end_line": 412
      },
      {
        "method_name": "a_prefix##search",
        "params": "(a_rbt_type *rbtree, const a_type *key)",
        "start_line": 414,
        "end_line": 427
      },
      {
        "method_name": "a_prefix##nsearch",
        "params": "(a_rbt_type *rbtree, const a_type *key)",
        "start_line": 429,
        "end_line": 446
      },
      {
        "method_name": "a_prefix##psearch",
        "params": "(a_rbt_type *rbtree, const a_type *key)",
        "start_line": 448,
        "end_line": 465
      },
      {
        "method_name": "a_prefix##insert",
        "params": "(a_rbt_type *rbtree, a_type *node)",
        "start_line": 467,
        "end_line": 535
      },
      {
        "method_name": "a_prefix##remove",
        "params": "(a_rbt_type *rbtree, a_type *node)",
        "start_line": 537,
        "end_line": 874
      },
      {
        "method_name": "*(*cb)",
        "params": "(a_rbt_type *, a_type *, void *), void *arg)",
        "start_line": 877,
        "end_line": 890
      },
      {
        "method_name": "*(*cb)",
        "params": "(a_rbt_type *, a_type *, void *), void *arg)",
        "start_line": 893,
        "end_line": 915
      },
      {
        "method_name": "*(*cb)",
        "params": "(\t\\\n  a_rbt_type *, a_type *, void *), void *arg)",
        "start_line": 918,
        "end_line": 927
      },
      {
        "method_name": "*(*cb)",
        "params": "(a_rbt_type *, a_type *, void *), void *arg)",
        "start_line": 930,
        "end_line": 943
      },
      {
        "method_name": "*(*cb)",
        "params": "(a_rbt_type *, a_type *, void *),\t\t\\\n  void *arg)",
        "start_line": 947,
        "end_line": 969
      },
      {
        "method_name": "*(*cb)",
        "params": "(a_rbt_type *, a_type *, void *), void *arg)",
        "start_line": 972,
        "end_line": 982
      },
      {
        "method_name": "(*cb)",
        "params": "(\t\\\n  a_type *, void *), void *arg)",
        "start_line": 985,
        "end_line": 998
      },
      {
        "method_name": "(*cb)",
        "params": "(a_type *, void *),\t\\\n  void *arg)",
        "start_line": 1001,
        "end_line": 1004
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 32,
        "end_line": 35
      },
      {
        "struct_name": "",
        "start_line": 38,
        "end_line": 42
      },
      {
        "struct_name": "",
        "start_line": 47,
        "end_line": 49
      },
      {
        "struct_name": "ex_node_s",
        "start_line": 227,
        "end_line": 229
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/rtree.h",
    "line": 492,
    "headers": [
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/rtree_tsd.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/tsd.h"
    ],
    "methods": [
      {
        "method_name": "rtree_leafkey",
        "params": "(uintptr_t key)",
        "start_line": 132,
        "end_line": 139
      },
      {
        "method_name": "rtree_cache_direct_map",
        "params": "(uintptr_t key)",
        "start_line": 142,
        "end_line": 148
      },
      {
        "method_name": "rtree_subkey",
        "params": "(uintptr_t key, unsigned level)",
        "start_line": 151,
        "end_line": 158
      },
      {
        "method_name": "rtree_leaf_elm_bits_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *elm,\n    bool dependent)",
        "start_line": 174,
        "end_line": 177
      },
      {
        "method_name": "rtree_leaf_elm_bits_extent_get",
        "params": "(uintptr_t bits)",
        "start_line": 180,
        "end_line": 196
      },
      {
        "method_name": "rtree_leaf_elm_bits_szind_get",
        "params": "(uintptr_t bits)",
        "start_line": 199,
        "end_line": 201
      },
      {
        "method_name": "rtree_leaf_elm_bits_slab_get",
        "params": "(uintptr_t bits)",
        "start_line": 204,
        "end_line": 206
      },
      {
        "method_name": "rtree_leaf_elm_extent_read",
        "params": "(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,\n    rtree_leaf_elm_t *elm, bool dependent)",
        "start_line": 212,
        "end_line": 221
      },
      {
        "method_name": "rtree_leaf_elm_szind_read",
        "params": "(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,\n    rtree_leaf_elm_t *elm, bool dependent)",
        "start_line": 225,
        "end_line": 233
      },
      {
        "method_name": "rtree_leaf_elm_slab_read",
        "params": "(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,\n    rtree_leaf_elm_t *elm, bool dependent)",
        "start_line": 237,
        "end_line": 245
      },
      {
        "method_name": "rtree_leaf_elm_extent_write",
        "params": "(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,\n    rtree_leaf_elm_t *elm, extent_t *extent)",
        "start_line": 249,
        "end_line": 259
      },
      {
        "method_name": "rtree_leaf_elm_szind_write",
        "params": "(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,\n    rtree_leaf_elm_t *elm, szind_t szind)",
        "start_line": 263,
        "end_line": 277
      },
      {
        "method_name": "rtree_leaf_elm_slab_write",
        "params": "(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,\n    rtree_leaf_elm_t *elm, bool slab)",
        "start_line": 281,
        "end_line": 292
      },
      {
        "method_name": "rtree_leaf_elm_write",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *elm,\n    extent_t *extent, szind_t szind, bool slab)",
        "start_line": 296,
        "end_line": 311
      },
      {
        "method_name": "rtree_leaf_elm_szind_slab_update",
        "params": "(tsdn_t *tsdn, rtree_t *rtree,\n    rtree_leaf_elm_t *elm, szind_t szind, bool slab)",
        "start_line": 315,
        "end_line": 324
      },
      {
        "method_name": "rtree_leaf_elm_lookup",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, bool dependent, bool init_missing)",
        "start_line": 328,
        "end_line": 383
      },
      {
        "method_name": "rtree_write",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx, uintptr_t key,\n    extent_t *extent, szind_t szind, bool slab)",
        "start_line": 387,
        "end_line": 401
      },
      {
        "method_name": "rtree_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx, uintptr_t key,\n    bool dependent)",
        "start_line": 405,
        "end_line": 413
      },
      {
        "method_name": "rtree_extent_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, bool dependent)",
        "start_line": 417,
        "end_line": 424
      },
      {
        "method_name": "rtree_szind_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, bool dependent)",
        "start_line": 428,
        "end_line": 435
      },
      {
        "method_name": "rtree_extent_szind_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, bool dependent, extent_t **r_extent, szind_t *r_szind)",
        "start_line": 444,
        "end_line": 453
      },
      {
        "method_name": "rtree_szind_slab_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, bool dependent, szind_t *r_szind, bool *r_slab)",
        "start_line": 457,
        "end_line": 472
      },
      {
        "method_name": "rtree_szind_slab_update",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, szind_t szind, bool slab)",
        "start_line": 476,
        "end_line": 481
      },
      {
        "method_name": "rtree_clear",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key)",
        "start_line": 485,
        "end_line": 490
      }
    ],
    "structs": [
      {
        "struct_name": "rtree_node_elm_s",
        "start_line": 42,
        "end_line": 44
      },
      {
        "struct_name": "rtree_leaf_elm_s",
        "start_line": 46,
        "end_line": 66
      },
      {
        "struct_name": "rtree_level_s",
        "start_line": 69,
        "end_line": 77
      },
      {
        "struct_name": "rtree_s",
        "start_line": 80,
        "end_line": 88
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/rtree_tsd.h",
    "line": 50,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "rtree_ctx_cache_elm_s",
        "start_line": 35,
        "end_line": 38
      },
      {
        "struct_name": "rtree_ctx_s",
        "start_line": 41,
        "end_line": 46
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/smoothstep.h",
    "line": 232,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/spin.h",
    "line": 40,
    "headers": [],
    "methods": [
      {
        "method_name": "spin_cpu_spinwait",
        "params": "()",
        "start_line": 11,
        "end_line": 18
      },
      {
        "method_name": "spin_adaptive",
        "params": "(spin_t *spin)",
        "start_line": 21,
        "end_line": 36
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 6,
        "end_line": 8
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/stats.h",
    "line": 30,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 15,
        "end_line": 20
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/sz.h",
    "line": 317,
    "headers": [
      "jemalloc/internal/bit_util.h",
      "jemalloc/internal/pages.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "sz_psz2ind",
        "params": "(size_t psz)",
        "start_line": 51,
        "end_line": 71
      },
      {
        "method_name": "sz_pind2sz_compute",
        "params": "(pszind_t pind)",
        "start_line": 74,
        "end_line": 93
      },
      {
        "method_name": "sz_pind2sz_lookup",
        "params": "(pszind_t pind)",
        "start_line": 96,
        "end_line": 100
      },
      {
        "method_name": "sz_pind2sz",
        "params": "(pszind_t pind)",
        "start_line": 103,
        "end_line": 106
      },
      {
        "method_name": "sz_psz2u",
        "params": "(size_t psz)",
        "start_line": 109,
        "end_line": 122
      },
      {
        "method_name": "sz_size2index_compute",
        "params": "(size_t size)",
        "start_line": 125,
        "end_line": 152
      },
      {
        "method_name": "sz_size2index_lookup",
        "params": "(size_t size)",
        "start_line": 155,
        "end_line": 162
      },
      {
        "method_name": "sz_size2index",
        "params": "(size_t size)",
        "start_line": 165,
        "end_line": 171
      },
      {
        "method_name": "sz_index2size_compute",
        "params": "(szind_t index)",
        "start_line": 174,
        "end_line": 197
      },
      {
        "method_name": "sz_index2size_lookup",
        "params": "(szind_t index)",
        "start_line": 200,
        "end_line": 204
      },
      {
        "method_name": "sz_index2size",
        "params": "(szind_t index)",
        "start_line": 207,
        "end_line": 210
      },
      {
        "method_name": "sz_s2u_compute",
        "params": "(size_t size)",
        "start_line": 213,
        "end_line": 234
      },
      {
        "method_name": "sz_s2u_lookup",
        "params": "(size_t size)",
        "start_line": 237,
        "end_line": 242
      },
      {
        "method_name": "sz_s2u",
        "params": "(size_t size)",
        "start_line": 249,
        "end_line": 255
      },
      {
        "method_name": "sz_sa2u",
        "params": "(size_t size, size_t alignment)",
        "start_line": 262,
        "end_line": 315
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tcache_externs.h",
    "line": 55,
    "headers": [
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tcache_inlines.h",
    "line": 223,
    "headers": [
      "jemalloc/internal/bin.h",
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/sz.h",
      "jemalloc/internal/ticker.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "tcache_enabled_get",
        "params": "(tsd_t *tsd)",
        "start_line": 12,
        "end_line": 14
      },
      {
        "method_name": "tcache_enabled_set",
        "params": "(tsd_t *tsd, bool enabled)",
        "start_line": 17,
        "end_line": 28
      },
      {
        "method_name": "tcache_event",
        "params": "(tsd_t *tsd, tcache_t *tcache)",
        "start_line": 31,
        "end_line": 39
      },
      {
        "method_name": "tcache_alloc_small",
        "params": "(tsd_t *tsd, arena_t *arena, tcache_t *tcache,\n    UNUSED size_t size, szind_t binind, bool zero, bool slow_path)",
        "start_line": 43,
        "end_line": 101
      },
      {
        "method_name": "tcache_alloc_large",
        "params": "(tsd_t *tsd, arena_t *arena, tcache_t *tcache, size_t size,\n    szind_t binind, bool zero, bool slow_path)",
        "start_line": 105,
        "end_line": 161
      },
      {
        "method_name": "tcache_dalloc_small",
        "params": "(tsd_t *tsd, tcache_t *tcache, void *ptr, szind_t binind,\n    bool slow_path)",
        "start_line": 165,
        "end_line": 186
      },
      {
        "method_name": "tcache_dalloc_large",
        "params": "(tsd_t *tsd, tcache_t *tcache, void *ptr, szind_t binind,\n    bool slow_path)",
        "start_line": 190,
        "end_line": 212
      },
      {
        "method_name": "tcaches_get",
        "params": "(tsd_t *tsd, unsigned ind)",
        "start_line": 215,
        "end_line": 221
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tcache_structs.h",
    "line": 61,
    "headers": [
      "jemalloc/internal/ql.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/cache_bin.h",
      "jemalloc/internal/ticker.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "tcache_s",
        "start_line": 9,
        "end_line": 51
      },
      {
        "struct_name": "tcaches_s",
        "start_line": 54,
        "end_line": 59
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tcache_types.h",
    "line": 56,
    "headers": [
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/ticker.h",
    "line": 78,
    "headers": [
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "ticker_init",
        "params": "(ticker_t *ticker, int32_t nticks)",
        "start_line": 20,
        "end_line": 23
      },
      {
        "method_name": "ticker_copy",
        "params": "(ticker_t *ticker, const ticker_t *other)",
        "start_line": 26,
        "end_line": 28
      },
      {
        "method_name": "ticker_read",
        "params": "(const ticker_t *ticker)",
        "start_line": 31,
        "end_line": 33
      },
      {
        "method_name": "(unlikely",
        "params": "(ticker-\u003etick \u003c 0))",
        "start_line": 39,
        "end_line": 42
      },
      {
        "method_name": "ticker_fixup",
        "params": "(ticker_t *ticker)",
        "start_line": 59,
        "end_line": 62
      },
      {
        "method_name": "ticker_ticks",
        "params": "(ticker_t *ticker, int32_t nticks)",
        "start_line": 65,
        "end_line": 71
      },
      {
        "method_name": "ticker_tick",
        "params": "(ticker_t *ticker)",
        "start_line": 74,
        "end_line": 76
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 14,
        "end_line": 17
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tsd.h",
    "line": 326,
    "headers": [
      "jemalloc/internal/arena_types.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/jemalloc_internal_externs.h",
      "jemalloc/internal/prof_types.h",
      "jemalloc/internal/ql.h",
      "jemalloc/internal/rtree_tsd.h",
      "jemalloc/internal/tcache_types.h",
      "jemalloc/internal/tcache_structs.h",
      "jemalloc/internal/util.h",
      "jemalloc/internal/witness.h",
      "jemalloc/internal/tsd_malloc_thread_cleanup.h",
      "jemalloc/internal/tsd_tls.h",
      "jemalloc/internal/tsd_win.h"
    ],
    "methods": [
      {
        "method_name": "tsd_tsdn",
        "params": "(tsd_t *tsd)",
        "start_line": 137,
        "end_line": 139
      },
      {
        "method_name": "tsdn_null",
        "params": "(const tsdn_t *tsdn)",
        "start_line": 142,
        "end_line": 144
      },
      {
        "method_name": "tsdn_tsd",
        "params": "(tsdn_t *tsdn)",
        "start_line": 147,
        "end_line": 151
      },
      {
        "method_name": "tsd_##n##p_get_unsafe",
        "params": "(tsd_t *tsd)",
        "start_line": 184,
        "end_line": 186
      },
      {
        "method_name": "tsd_##n##p_get",
        "params": "(tsd_t *tsd)",
        "start_line": 193,
        "end_line": 199
      },
      {
        "method_name": "tsdn_##n##p_get",
        "params": "(tsdn_t *tsdn)",
        "start_line": 209,
        "end_line": 215
      },
      {
        "method_name": "tsd_##n##_get",
        "params": "(tsd_t *tsd)",
        "start_line": 222,
        "end_line": 224
      },
      {
        "method_name": "tsd_##n##_set",
        "params": "(tsd_t *tsd, t val)",
        "start_line": 231,
        "end_line": 235
      },
      {
        "method_name": "tsd_assert_fast",
        "params": "(tsd_t *tsd)",
        "start_line": 240,
        "end_line": 243
      },
      {
        "method_name": "tsd_fast",
        "params": "(tsd_t *tsd)",
        "start_line": 246,
        "end_line": 253
      },
      {
        "method_name": "tsd_fetch_impl",
        "params": "(bool init, bool minimal)",
        "start_line": 256,
        "end_line": 271
      },
      {
        "method_name": "tsd_fetch_min",
        "params": "(void)",
        "start_line": 275,
        "end_line": 277
      },
      {
        "method_name": "tsd_internal_fetch",
        "params": "(void)",
        "start_line": 281,
        "end_line": 287
      },
      {
        "method_name": "tsd_fetch",
        "params": "(void)",
        "start_line": 290,
        "end_line": 292
      },
      {
        "method_name": "tsd_nominal",
        "params": "(tsd_t *tsd)",
        "start_line": 295,
        "end_line": 297
      },
      {
        "method_name": "tsdn_fetch",
        "params": "(void)",
        "start_line": 300,
        "end_line": 306
      },
      {
        "method_name": "tsd_rtree_ctx",
        "params": "(tsd_t *tsd)",
        "start_line": 309,
        "end_line": 311
      },
      {
        "method_name": "tsdn_rtree_ctx",
        "params": "(tsdn_t *tsdn, rtree_ctx_t *fallback)",
        "start_line": 314,
        "end_line": 324
      }
    ],
    "structs": [
      {
        "struct_name": "tsd_s",
        "start_line": 114,
        "end_line": 125
      },
      {
        "struct_name": "tsdn_s",
        "start_line": 132,
        "end_line": 134
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 99,
        "end_line": 108
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tsd_generic.h",
    "line": 157,
    "headers": [],
    "methods": [
      {
        "method_name": "tsd_cleanup_wrapper",
        "params": "(void *arg)",
        "start_line": 32,
        "end_line": 51
      },
      {
        "method_name": "tsd_wrapper_set",
        "params": "(tsd_wrapper_t *wrapper)",
        "start_line": 54,
        "end_line": 59
      },
      {
        "method_name": "tsd_wrapper_get",
        "params": "(bool init)",
        "start_line": 62,
        "end_line": 87
      },
      {
        "method_name": "tsd_boot0",
        "params": "(void)",
        "start_line": 90,
        "end_line": 97
      },
      {
        "method_name": "tsd_boot1",
        "params": "(void)",
        "start_line": 100,
        "end_line": 113
      },
      {
        "method_name": "tsd_boot",
        "params": "(void)",
        "start_line": 116,
        "end_line": 122
      },
      {
        "method_name": "tsd_booted_get",
        "params": "(void)",
        "start_line": 125,
        "end_line": 127
      },
      {
        "method_name": "tsd_get_allocates",
        "params": "(void)",
        "start_line": 130,
        "end_line": 132
      },
      {
        "method_name": "tsd_get",
        "params": "(bool init)",
        "start_line": 136,
        "end_line": 145
      },
      {
        "method_name": "tsd_set",
        "params": "(tsd_t *val)",
        "start_line": 148,
        "end_line": 157
      }
    ],
    "structs": [
      {
        "struct_name": "tsd_init_block_s",
        "start_line": 7,
        "end_line": 11
      },
      {
        "struct_name": "",
        "start_line": 16,
        "end_line": 19
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h",
    "line": 60,
    "headers": [],
    "methods": [
      {
        "method_name": "tsd_cleanup_wrapper",
        "params": "(void)",
        "start_line": 12,
        "end_line": 18
      },
      {
        "method_name": "tsd_boot0",
        "params": "(void)",
        "start_line": 21,
        "end_line": 25
      },
      {
        "method_name": "tsd_boot1",
        "params": "(void)",
        "start_line": 28,
        "end_line": 30
      },
      {
        "method_name": "tsd_boot",
        "params": "(void)",
        "start_line": 33,
        "end_line": 35
      },
      {
        "method_name": "tsd_booted_get",
        "params": "(void)",
        "start_line": 38,
        "end_line": 40
      },
      {
        "method_name": "tsd_get_allocates",
        "params": "(void)",
        "start_line": 43,
        "end_line": 45
      },
      {
        "method_name": "tsd_get",
        "params": "(bool init)",
        "start_line": 49,
        "end_line": 52
      },
      {
        "method_name": "tsd_set",
        "params": "(tsd_t *val)",
        "start_line": 54,
        "end_line": 60
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tsd_tls.h",
    "line": 59,
    "headers": [],
    "methods": [
      {
        "method_name": "tsd_boot0",
        "params": "(void)",
        "start_line": 12,
        "end_line": 18
      },
      {
        "method_name": "tsd_boot1",
        "params": "(void)",
        "start_line": 21,
        "end_line": 23
      },
      {
        "method_name": "tsd_boot",
        "params": "(void)",
        "start_line": 26,
        "end_line": 28
      },
      {
        "method_name": "tsd_booted_get",
        "params": "(void)",
        "start_line": 31,
        "end_line": 33
      },
      {
        "method_name": "tsd_get_allocates",
        "params": "(void)",
        "start_line": 36,
        "end_line": 38
      },
      {
        "method_name": "tsd_get",
        "params": "(UNUSED bool init)",
        "start_line": 42,
        "end_line": 45
      },
      {
        "method_name": "tsd_set",
        "params": "(tsd_t *val)",
        "start_line": 48,
        "end_line": 59
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tsd_types.h",
    "line": 10,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/tsd_win.h",
    "line": 139,
    "headers": [],
    "methods": [
      {
        "method_name": "tsd_cleanup_wrapper",
        "params": "(void)",
        "start_line": 17,
        "end_line": 36
      },
      {
        "method_name": "tsd_wrapper_set",
        "params": "(tsd_wrapper_t *wrapper)",
        "start_line": 39,
        "end_line": 44
      },
      {
        "method_name": "tsd_wrapper_get",
        "params": "(bool init)",
        "start_line": 47,
        "end_line": 67
      },
      {
        "method_name": "tsd_boot0",
        "params": "(void)",
        "start_line": 70,
        "end_line": 79
      },
      {
        "method_name": "tsd_boot1",
        "params": "(void)",
        "start_line": 82,
        "end_line": 96
      },
      {
        "method_name": "tsd_boot",
        "params": "(void)",
        "start_line": 98,
        "end_line": 104
      },
      {
        "method_name": "tsd_booted_get",
        "params": "(void)",
        "start_line": 107,
        "end_line": 109
      },
      {
        "method_name": "tsd_get_allocates",
        "params": "(void)",
        "start_line": 112,
        "end_line": 114
      },
      {
        "method_name": "tsd_get",
        "params": "(bool init)",
        "start_line": 118,
        "end_line": 127
      },
      {
        "method_name": "tsd_set",
        "params": "(tsd_t *val)",
        "start_line": 130,
        "end_line": 139
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 6,
        "end_line": 9
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/util.h",
    "line": 67,
    "headers": [],
    "methods": [
      {
        "method_name": "set_errno",
        "params": "(int errnum)",
        "start_line": 47,
        "end_line": 53
      },
      {
        "method_name": "get_errno",
        "params": "(void)",
        "start_line": 57,
        "end_line": 63
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/jemalloc/internal/witness.h",
    "line": 346,
    "headers": [
      "jemalloc/internal/ql.h"
    ],
    "methods": [
      {
        "method_name": "WITNESS_INITIALIZER",
        "params": "(name, rank)",
        "start_line": 68,
        "end_line": 68
      },
      {
        "method_name": "witness_tsd_tsdn",
        "params": "(witness_tsd_t *witness_tsd)",
        "start_line": 124,
        "end_line": 126
      },
      {
        "method_name": "witness_tsdn_null",
        "params": "(witness_tsdn_t *witness_tsdn)",
        "start_line": 129,
        "end_line": 131
      },
      {
        "method_name": "witness_tsdn_tsd",
        "params": "(witness_tsdn_t *witness_tsdn)",
        "start_line": 134,
        "end_line": 137
      },
      {
        "method_name": "witness_owner",
        "params": "(witness_tsd_t *witness_tsd, const witness_t *witness)",
        "start_line": 165,
        "end_line": 179
      },
      {
        "method_name": "witness_assert_owner",
        "params": "(witness_tsdn_t *witness_tsdn, const witness_t *witness)",
        "start_line": 182,
        "end_line": 201
      },
      {
        "method_name": "witness_assert_not_owner",
        "params": "(witness_tsdn_t *witness_tsdn,\n    const witness_t *witness)",
        "start_line": 205,
        "end_line": 228
      },
      {
        "method_name": "witness_assert_depth_to_rank",
        "params": "(witness_tsdn_t *witness_tsdn,\n    witness_rank_t rank_inclusive, unsigned depth)",
        "start_line": 232,
        "end_line": 261
      },
      {
        "method_name": "witness_assert_depth",
        "params": "(witness_tsdn_t *witness_tsdn, unsigned depth)",
        "start_line": 264,
        "end_line": 266
      },
      {
        "method_name": "witness_assert_lockless",
        "params": "(witness_tsdn_t *witness_tsdn)",
        "start_line": 269,
        "end_line": 271
      },
      {
        "method_name": "witness_lock",
        "params": "(witness_tsdn_t *witness_tsdn, witness_t *witness)",
        "start_line": 274,
        "end_line": 314
      },
      {
        "method_name": "witness_unlock",
        "params": "(witness_tsdn_t *witness_tsdn, witness_t *witness)",
        "start_line": 317,
        "end_line": 344
      }
    ],
    "structs": [
      {
        "struct_name": "witness_s",
        "start_line": 79,
        "end_line": 101
      },
      {
        "struct_name": "witness_tsd_s",
        "start_line": 107,
        "end_line": 110
      },
      {
        "struct_name": "witness_tsdn_s",
        "start_line": 119,
        "end_line": 121
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/msvc_compat/C99/stdbool.h",
    "line": 20,
    "headers": [
      "wtypes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/msvc_compat/C99/stdint.h",
    "line": 247,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/msvc_compat/strings.h",
    "line": 58,
    "headers": [],
    "methods": [
      {
        "method_name": "ffsl",
        "params": "(long x)",
        "start_line": 9,
        "end_line": 16
      },
      {
        "method_name": "ffs",
        "params": "(int x)",
        "start_line": 18,
        "end_line": 20
      },
      {
        "method_name": "ffsll",
        "params": "(unsigned __int64 x)",
        "start_line": 26,
        "end_line": 50
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/include/msvc_compat/windows_extra.h",
    "line": 6,
    "headers": [
      "errno.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/msvc/test_threads/test_threads.h",
    "line": 3,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/arena.c",
    "line": 2043,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/div.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/extent_mmap.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/rtree.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "arena_basic_stats_merge",
        "params": "(UNUSED tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,\n    const char **dss, ssize_t *dirty_decay_ms, ssize_t *muzzy_decay_ms,\n    size_t *nactive, size_t *ndirty, size_t *nmuzzy)",
        "start_line": 66,
        "end_line": 74
      },
      {
        "method_name": "arena_stats_merge",
        "params": "(tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,\n    const char **dss, ssize_t *dirty_decay_ms, ssize_t *muzzy_decay_ms,\n    size_t *nactive, size_t *ndirty, size_t *nmuzzy, arena_stats_t *astats,\n    bin_stats_t *bstats, arena_stats_large_t *lstats)",
        "start_line": 80,
        "end_line": 206
      },
      {
        "method_name": "arena_extents_dirty_dalloc",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent)",
        "start_line": 210,
        "end_line": 221
      },
      {
        "method_name": "arena_slab_reg_alloc",
        "params": "(extent_t *slab, const bin_info_t *bin_info)",
        "start_line": 224,
        "end_line": 237
      },
      {
        "method_name": "arena_slab_regind",
        "params": "(extent_t *slab, szind_t binind, const void *ptr)",
        "start_line": 243,
        "end_line": 261
      },
      {
        "method_name": "arena_slab_reg_dalloc",
        "params": "(extent_t *slab, arena_slab_data_t *slab_data, void *ptr)",
        "start_line": 264,
        "end_line": 275
      },
      {
        "method_name": "arena_nactive_add",
        "params": "(arena_t *arena, size_t add_pages)",
        "start_line": 278,
        "end_line": 280
      },
      {
        "method_name": "arena_nactive_sub",
        "params": "(arena_t *arena, size_t sub_pages)",
        "start_line": 283,
        "end_line": 286
      },
      {
        "method_name": "arena_large_malloc_stats_update",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize)",
        "start_line": 289,
        "end_line": 302
      },
      {
        "method_name": "arena_large_dalloc_stats_update",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize)",
        "start_line": 305,
        "end_line": 318
      },
      {
        "method_name": "arena_large_ralloc_stats_update",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t oldusize,\n    size_t usize)",
        "start_line": 322,
        "end_line": 325
      },
      {
        "method_name": "arena_extent_alloc_large",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize,\n    size_t alignment, bool *zero)",
        "start_line": 329,
        "end_line": 377
      },
      {
        "method_name": "arena_extent_dalloc_large_prep",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent)",
        "start_line": 380,
        "end_line": 388
      },
      {
        "method_name": "arena_extent_ralloc_large_shrink",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent,\n    size_t oldusize)",
        "start_line": 392,
        "end_line": 402
      },
      {
        "method_name": "arena_extent_ralloc_large_expand",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent,\n    size_t oldusize)",
        "start_line": 406,
        "end_line": 416
      },
      {
        "method_name": "arena_decay_ms_read",
        "params": "(arena_decay_t *decay)",
        "start_line": 419,
        "end_line": 421
      },
      {
        "method_name": "arena_decay_ms_write",
        "params": "(arena_decay_t *decay, ssize_t decay_ms)",
        "start_line": 424,
        "end_line": 426
      },
      {
        "method_name": "arena_decay_deadline_init",
        "params": "(arena_decay_t *decay)",
        "start_line": 429,
        "end_line": 443
      },
      {
        "method_name": "arena_decay_deadline_reached",
        "params": "(const arena_decay_t *decay, const nstime_t *time)",
        "start_line": 446,
        "end_line": 448
      },
      {
        "method_name": "arena_decay_backlog_npages_limit",
        "params": "(const arena_decay_t *decay)",
        "start_line": 451,
        "end_line": 468
      },
      {
        "method_name": "arena_decay_backlog_update_last",
        "params": "(arena_decay_t *decay, size_t current_npages)",
        "start_line": 471,
        "end_line": 486
      },
      {
        "method_name": "arena_decay_backlog_update",
        "params": "(arena_decay_t *decay, uint64_t nadvance_u64,\n    size_t current_npages)",
        "start_line": 490,
        "end_line": 508
      },
      {
        "method_name": "arena_decay_try_purge",
        "params": "(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,\n    extents_t *extents, size_t current_npages, size_t npages_limit,\n    bool is_background_thread)",
        "start_line": 513,
        "end_line": 519
      },
      {
        "method_name": "arena_decay_epoch_advance_helper",
        "params": "(arena_decay_t *decay, const nstime_t *time,\n    size_t current_npages)",
        "start_line": 523,
        "end_line": 543
      },
      {
        "method_name": "arena_decay_epoch_advance",
        "params": "(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,\n    extents_t *extents, const nstime_t *time, bool is_background_thread)",
        "start_line": 547,
        "end_line": 560
      },
      {
        "method_name": "arena_decay_reinit",
        "params": "(arena_decay_t *decay, ssize_t decay_ms)",
        "start_line": 563,
        "end_line": 577
      },
      {
        "method_name": "arena_decay_init",
        "params": "(arena_decay_t *decay, ssize_t decay_ms,\n    arena_stats_decay_t *stats)",
        "start_line": 581,
        "end_line": 599
      },
      {
        "method_name": "arena_decay_ms_valid",
        "params": "(ssize_t decay_ms)",
        "start_line": 602,
        "end_line": 611
      },
      {
        "method_name": "arena_maybe_decay",
        "params": "(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,\n    extents_t *extents, bool is_background_thread)",
        "start_line": 615,
        "end_line": 669
      },
      {
        "method_name": "arena_decay_ms_get",
        "params": "(arena_decay_t *decay)",
        "start_line": 672,
        "end_line": 674
      },
      {
        "method_name": "arena_dirty_decay_ms_get",
        "params": "(arena_t *arena)",
        "start_line": 677,
        "end_line": 679
      },
      {
        "method_name": "arena_muzzy_decay_ms_get",
        "params": "(arena_t *arena)",
        "start_line": 682,
        "end_line": 684
      },
      {
        "method_name": "arena_decay_ms_set",
        "params": "(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,\n    extents_t *extents, ssize_t decay_ms)",
        "start_line": 688,
        "end_line": 707
      },
      {
        "method_name": "arena_dirty_decay_ms_set",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    ssize_t decay_ms)",
        "start_line": 711,
        "end_line": 714
      },
      {
        "method_name": "arena_muzzy_decay_ms_set",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    ssize_t decay_ms)",
        "start_line": 718,
        "end_line": 721
      },
      {
        "method_name": "arena_stash_decayed",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extents_t *extents, size_t npages_limit,\n\tsize_t npages_decay_max, extent_list_t *decay_extents)",
        "start_line": 726,
        "end_line": 740
      },
      {
        "method_name": "arena_decay_stashed",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, arena_decay_t *decay, extents_t *extents,\n    bool all, extent_list_t *decay_extents, bool is_background_thread)",
        "start_line": 745,
        "end_line": 806
      },
      {
        "method_name": "arena_decay_to_limit",
        "params": "(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,\n    extents_t *extents, bool all, size_t npages_limit, size_t npages_decay_max,\n    bool is_background_thread)",
        "start_line": 818,
        "end_line": 845
      },
      {
        "method_name": "arena_decay_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,\n    extents_t *extents, bool is_background_thread, bool all)",
        "start_line": 849,
        "end_line": 880
      },
      {
        "method_name": "arena_decay_dirty",
        "params": "(tsdn_t *tsdn, arena_t *arena, bool is_background_thread,\n    bool all)",
        "start_line": 884,
        "end_line": 887
      },
      {
        "method_name": "arena_decay_muzzy",
        "params": "(tsdn_t *tsdn, arena_t *arena, bool is_background_thread,\n    bool all)",
        "start_line": 891,
        "end_line": 894
      },
      {
        "method_name": "arena_decay",
        "params": "(tsdn_t *tsdn, arena_t *arena, bool is_background_thread, bool all)",
        "start_line": 897,
        "end_line": 902
      },
      {
        "method_name": "arena_slab_dalloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *slab)",
        "start_line": 905,
        "end_line": 910
      },
      {
        "method_name": "arena_bin_slabs_nonfull_insert",
        "params": "(bin_t *bin, extent_t *slab)",
        "start_line": 913,
        "end_line": 916
      },
      {
        "method_name": "arena_bin_slabs_nonfull_remove",
        "params": "(bin_t *bin, extent_t *slab)",
        "start_line": 919,
        "end_line": 921
      },
      {
        "method_name": "arena_bin_slabs_nonfull_tryget",
        "params": "(bin_t *bin)",
        "start_line": 924,
        "end_line": 933
      },
      {
        "method_name": "arena_bin_slabs_full_insert",
        "params": "(arena_t *arena, bin_t *bin, extent_t *slab)",
        "start_line": 936,
        "end_line": 947
      },
      {
        "method_name": "arena_bin_slabs_full_remove",
        "params": "(arena_t *arena, bin_t *bin, extent_t *slab)",
        "start_line": 950,
        "end_line": 955
      },
      {
        "method_name": "arena_reset",
        "params": "(tsd_t *tsd, arena_t *arena)",
        "start_line": 958,
        "end_line": 1034
      },
      {
        "method_name": "arena_destroy_retained",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1037,
        "end_line": 1053
      },
      {
        "method_name": "arena_destroy",
        "params": "(tsd_t *tsd, arena_t *arena)",
        "start_line": 1056,
        "end_line": 1089
      },
      {
        "method_name": "arena_slab_alloc_hard",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, const bin_info_t *bin_info,\n    szind_t szind)",
        "start_line": 1094,
        "end_line": 1112
      },
      {
        "method_name": "arena_slab_alloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, szind_t binind,\n    const bin_info_t *bin_info)",
        "start_line": 1116,
        "end_line": 1149
      },
      {
        "method_name": "arena_bin_nonfull_slab_get",
        "params": "(tsdn_t *tsdn, arena_t *arena, bin_t *bin,\n    szind_t binind)",
        "start_line": 1153,
        "end_line": 1191
      },
      {
        "method_name": "arena_bin_malloc_hard",
        "params": "(tsdn_t *tsdn, arena_t *arena, bin_t *bin,\n    szind_t binind)",
        "start_line": 1196,
        "end_line": 1247
      },
      {
        "method_name": "arena_tcache_fill_small",
        "params": "(tsdn_t *tsdn, arena_t *arena, tcache_t *tcache,\n    cache_bin_t *tbin, szind_t binind, uint64_t prof_accumbytes)",
        "start_line": 1251,
        "end_line": 1300
      },
      {
        "method_name": "arena_alloc_junk_small",
        "params": "(void *ptr, const bin_info_t *bin_info, bool zero)",
        "start_line": 1303,
        "end_line": 1307
      },
      {
        "method_name": "arena_dalloc_junk_small_impl",
        "params": "(void *ptr, const bin_info_t *bin_info)",
        "start_line": 1310,
        "end_line": 1312
      },
      {
        "method_name": "arena_malloc_small",
        "params": "(tsdn_t *tsdn, arena_t *arena, szind_t binind, bool zero)",
        "start_line": 1317,
        "end_line": 1368
      },
      {
        "method_name": "arena_malloc_hard",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t size, szind_t ind,\n    bool zero)",
        "start_line": 1372,
        "end_line": 1386
      },
      {
        "method_name": "arena_palloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize, size_t alignment,\n    bool zero, tcache_t *tcache)",
        "start_line": 1390,
        "end_line": 1406
      },
      {
        "method_name": "arena_prof_promote",
        "params": "(tsdn_t *tsdn, const void *ptr, size_t usize)",
        "start_line": 1409,
        "end_line": 1430
      },
      {
        "method_name": "arena_prof_demote",
        "params": "(tsdn_t *tsdn, extent_t *extent, const void *ptr)",
        "start_line": 1433,
        "end_line": 1446
      },
      {
        "method_name": "arena_dalloc_promoted",
        "params": "(tsdn_t *tsdn, void *ptr, tcache_t *tcache,\n    bool slow_path)",
        "start_line": 1450,
        "end_line": 1462
      },
      {
        "method_name": "arena_dissociate_bin_slab",
        "params": "(arena_t *arena, extent_t *slab, bin_t *bin)",
        "start_line": 1465,
        "end_line": 1484
      },
      {
        "method_name": "arena_dalloc_bin_slab",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *slab,\n    bin_t *bin)",
        "start_line": 1488,
        "end_line": 1499
      },
      {
        "method_name": "arena_bin_lower_slab",
        "params": "(UNUSED tsdn_t *tsdn, arena_t *arena, extent_t *slab,\n    bin_t *bin)",
        "start_line": 1503,
        "end_line": 1526
      },
      {
        "method_name": "arena_dalloc_bin_locked_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *slab,\n    void *ptr, bool junked)",
        "start_line": 1530,
        "end_line": 1554
      },
      {
        "method_name": "arena_dalloc_bin_junked_locked",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent,\n    void *ptr)",
        "start_line": 1558,
        "end_line": 1560
      },
      {
        "method_name": "arena_dalloc_bin",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent, void *ptr)",
        "start_line": 1563,
        "end_line": 1570
      },
      {
        "method_name": "arena_dalloc_small",
        "params": "(tsdn_t *tsdn, void *ptr)",
        "start_line": 1573,
        "end_line": 1579
      },
      {
        "method_name": "arena_ralloc_no_move",
        "params": "(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size,\n    size_t extra, bool zero)",
        "start_line": 1583,
        "end_line": 1615
      },
      {
        "method_name": "arena_ralloc_move_helper",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize,\n    size_t alignment, bool zero, tcache_t *tcache)",
        "start_line": 1619,
        "end_line": 1629
      },
      {
        "method_name": "arena_ralloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, void *ptr, size_t oldsize,\n    size_t size, size_t alignment, bool zero, tcache_t *tcache)",
        "start_line": 1633,
        "end_line": 1670
      },
      {
        "method_name": "arena_dss_prec_get",
        "params": "(arena_t *arena)",
        "start_line": 1673,
        "end_line": 1675
      },
      {
        "method_name": "arena_dss_prec_set",
        "params": "(arena_t *arena, dss_prec_t dss_prec)",
        "start_line": 1678,
        "end_line": 1684
      },
      {
        "method_name": "arena_dirty_decay_ms_default_get",
        "params": "(void)",
        "start_line": 1687,
        "end_line": 1689
      },
      {
        "method_name": "arena_dirty_decay_ms_default_set",
        "params": "(ssize_t decay_ms)",
        "start_line": 1692,
        "end_line": 1698
      },
      {
        "method_name": "arena_muzzy_decay_ms_default_get",
        "params": "(void)",
        "start_line": 1701,
        "end_line": 1703
      },
      {
        "method_name": "arena_muzzy_decay_ms_default_set",
        "params": "(ssize_t decay_ms)",
        "start_line": 1706,
        "end_line": 1712
      },
      {
        "method_name": "arena_retain_grow_limit_get_set",
        "params": "(tsd_t *tsd, arena_t *arena, size_t *old_limit,\n    size_t *new_limit)",
        "start_line": 1716,
        "end_line": 1739
      },
      {
        "method_name": "arena_nthreads_get",
        "params": "(arena_t *arena, bool internal)",
        "start_line": 1742,
        "end_line": 1744
      },
      {
        "method_name": "arena_nthreads_inc",
        "params": "(arena_t *arena, bool internal)",
        "start_line": 1747,
        "end_line": 1749
      },
      {
        "method_name": "arena_nthreads_dec",
        "params": "(arena_t *arena, bool internal)",
        "start_line": 1752,
        "end_line": 1754
      },
      {
        "method_name": "arena_extent_sn_next",
        "params": "(arena_t *arena)",
        "start_line": 1757,
        "end_line": 1759
      },
      {
        "method_name": "arena_new",
        "params": "(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks)",
        "start_line": 1762,
        "end_line": 1915
      },
      {
        "method_name": "arena_boot",
        "params": "(void)",
        "start_line": 1918,
        "end_line": 1931
      },
      {
        "method_name": "arena_prefork0",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1934,
        "end_line": 1937
      },
      {
        "method_name": "arena_prefork1",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1940,
        "end_line": 1944
      },
      {
        "method_name": "arena_prefork2",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1947,
        "end_line": 1949
      },
      {
        "method_name": "arena_prefork3",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1952,
        "end_line": 1956
      },
      {
        "method_name": "arena_prefork4",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1959,
        "end_line": 1961
      },
      {
        "method_name": "arena_prefork5",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1964,
        "end_line": 1966
      },
      {
        "method_name": "arena_prefork6",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1969,
        "end_line": 1971
      },
      {
        "method_name": "arena_prefork7",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1974,
        "end_line": 1978
      },
      {
        "method_name": "arena_postfork_parent",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1981,
        "end_line": 1999
      },
      {
        "method_name": "arena_postfork_child",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 2002,
        "end_line": 2043
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/background_thread.c",
    "line": 915,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "dlfcn.h"
    ],
    "methods": [
      {
        "method_name": "pthread_create_wrapper_init",
        "params": "(void)",
        "start_line": 37,
        "end_line": 43
      },
      {
        "method_name": "*(*start_routine)",
        "params": "(void *), void *__restrict arg)",
        "start_line": 47,
        "end_line": 51
      },
      {
        "method_name": "background_thread_info_init",
        "params": "(tsdn_t *tsdn, background_thread_info_t *info)",
        "start_line": 74,
        "end_line": 81
      },
      {
        "method_name": "set_current_thread_affinity",
        "params": "(UNUSED int cpu)",
        "start_line": 84,
        "end_line": 95
      },
      {
        "method_name": "decay_npurge_after_interval",
        "params": "(arena_decay_t *decay, size_t interval)",
        "start_line": 104,
        "end_line": 115
      },
      {
        "method_name": "arena_decay_compute_purge_interval_impl",
        "params": "(tsdn_t *tsdn, arena_decay_t *decay,\n    extents_t *extents)",
        "start_line": 119,
        "end_line": 200
      },
      {
        "method_name": "arena_decay_compute_purge_interval",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 204,
        "end_line": 215
      },
      {
        "method_name": "background_thread_sleep",
        "params": "(tsdn_t *tsdn, background_thread_info_t *info,\n    uint64_t interval)",
        "start_line": 219,
        "end_line": 271
      },
      {
        "method_name": "background_thread_pause_check",
        "params": "(tsdn_t *tsdn, background_thread_info_t *info)",
        "start_line": 274,
        "end_line": 285
      },
      {
        "method_name": "background_work_sleep_once",
        "params": "(tsdn_t *tsdn, background_thread_info_t *info, unsigned ind)",
        "start_line": 288,
        "end_line": 310
      },
      {
        "method_name": "background_threads_disable_single",
        "params": "(tsd_t *tsd, background_thread_info_t *info)",
        "start_line": 313,
        "end_line": 349
      },
      {
        "method_name": "*(*start_routine)",
        "params": "(void *), void *arg)",
        "start_line": 355,
        "end_line": 383
      },
      {
        "method_name": "check_background_thread_creation",
        "params": "(tsd_t *tsd, unsigned *n_created,\n    bool *created_threads)",
        "start_line": 387,
        "end_line": 433
      },
      {
        "method_name": "background_thread0_work",
        "params": "(tsd_t *tsd)",
        "start_line": 436,
        "end_line": 482
      },
      {
        "method_name": "background_work",
        "params": "(tsd_t *tsd, unsigned ind)",
        "start_line": 485,
        "end_line": 505
      },
      {
        "method_name": "background_thread_entry",
        "params": "(void *ind_arg)",
        "start_line": 508,
        "end_line": 527
      },
      {
        "method_name": "background_thread_init",
        "params": "(tsd_t *tsd, background_thread_info_t *info)",
        "start_line": 530,
        "end_line": 535
      },
      {
        "method_name": "background_thread_create",
        "params": "(tsd_t *tsd, unsigned arena_ind)",
        "start_line": 539,
        "end_line": 590
      },
      {
        "method_name": "background_threads_enable",
        "params": "(tsd_t *tsd)",
        "start_line": 593,
        "end_line": 626
      },
      {
        "method_name": "background_threads_disable",
        "params": "(tsd_t *tsd)",
        "start_line": 629,
        "end_line": 641
      },
      {
        "method_name": "background_thread_interval_check",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    arena_decay_t *decay, size_t npages_new)",
        "start_line": 646,
        "end_line": 725
      },
      {
        "method_name": "background_thread_prefork0",
        "params": "(tsdn_t *tsdn)",
        "start_line": 728,
        "end_line": 731
      },
      {
        "method_name": "background_thread_prefork1",
        "params": "(tsdn_t *tsdn)",
        "start_line": 734,
        "end_line": 738
      },
      {
        "method_name": "background_thread_postfork_parent",
        "params": "(tsdn_t *tsdn)",
        "start_line": 741,
        "end_line": 747
      },
      {
        "method_name": "background_thread_postfork_child",
        "params": "(tsdn_t *tsdn)",
        "start_line": 750,
        "end_line": 774
      },
      {
        "method_name": "background_thread_stats_read",
        "params": "(tsdn_t *tsdn, background_thread_stats_t *stats)",
        "start_line": 777,
        "end_line": 810
      },
      {
        "method_name": "pthread_create_fptr_init",
        "params": "(void)",
        "start_line": 817,
        "end_line": 834
      },
      {
        "method_name": "background_thread_ctl_init",
        "params": "(tsdn_t *tsdn)",
        "start_line": 843,
        "end_line": 849
      },
      {
        "method_name": "background_thread_boot0",
        "params": "(void)",
        "start_line": 854,
        "end_line": 867
      },
      {
        "method_name": "background_thread_boot1",
        "params": "(tsdn_t *tsdn)",
        "start_line": 870,
        "end_line": 915
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/base.c",
    "line": 514,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/extent_mmap.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/sz.h"
    ],
    "methods": [
      {
        "method_name": "metadata_thp_madvise",
        "params": "(void)",
        "start_line": 26,
        "end_line": 29
      },
      {
        "method_name": "base_map",
        "params": "(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, size_t size)",
        "start_line": 32,
        "end_line": 52
      },
      {
        "method_name": "base_unmap",
        "params": "(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, void *addr,\n    size_t size)",
        "start_line": 56,
        "end_line": 116
      },
      {
        "method_name": "base_extent_init",
        "params": "(size_t *extent_sn_next, extent_t *extent, void *addr,\n    size_t size)",
        "start_line": 120,
        "end_line": 127
      },
      {
        "method_name": "base_get_num_blocks",
        "params": "(base_t *base, bool with_new_block)",
        "start_line": 130,
        "end_line": 141
      },
      {
        "method_name": "base_auto_thp_switch",
        "params": "(tsdn_t *tsdn, base_t *base)",
        "start_line": 144,
        "end_line": 177
      },
      {
        "method_name": "base_extent_bump_alloc_helper",
        "params": "(extent_t *extent, size_t *gap_size, size_t size,\n    size_t alignment)",
        "start_line": 181,
        "end_line": 195
      },
      {
        "method_name": "base_extent_bump_alloc_post",
        "params": "(base_t *base, extent_t *extent, size_t gap_size,\n    void *addr, size_t size)",
        "start_line": 199,
        "end_line": 229
      },
      {
        "method_name": "base_extent_bump_alloc",
        "params": "(base_t *base, extent_t *extent, size_t size,\n    size_t alignment)",
        "start_line": 233,
        "end_line": 240
      },
      {
        "method_name": "base_block_alloc",
        "params": "(tsdn_t *tsdn, base_t *base, extent_hooks_t *extent_hooks,\n    unsigned ind, pszind_t *pind_last, size_t *extent_sn_next, size_t size,\n    size_t alignment)",
        "start_line": 250,
        "end_line": 301
      },
      {
        "method_name": "base_extent_alloc",
        "params": "(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment)",
        "start_line": 308,
        "end_line": 342
      },
      {
        "method_name": "b0get",
        "params": "(void)",
        "start_line": 345,
        "end_line": 347
      },
      {
        "method_name": "base_new",
        "params": "(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks)",
        "start_line": 350,
        "end_line": 393
      },
      {
        "method_name": "base_delete",
        "params": "(tsdn_t *tsdn, base_t *base)",
        "start_line": 396,
        "end_line": 405
      },
      {
        "method_name": "base_extent_hooks_get",
        "params": "(base_t *base)",
        "start_line": 408,
        "end_line": 411
      },
      {
        "method_name": "base_extent_hooks_set",
        "params": "(base_t *base, extent_hooks_t *extent_hooks)",
        "start_line": 414,
        "end_line": 418
      },
      {
        "method_name": "base_alloc_impl",
        "params": "(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment,\n    size_t *esn)",
        "start_line": 422,
        "end_line": 453
      },
      {
        "method_name": "base_alloc",
        "params": "(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment)",
        "start_line": 464,
        "end_line": 466
      },
      {
        "method_name": "base_alloc_extent",
        "params": "(tsdn_t *tsdn, base_t *base)",
        "start_line": 469,
        "end_line": 478
      },
      {
        "method_name": "base_stats_get",
        "params": "(tsdn_t *tsdn, base_t *base, size_t *allocated, size_t *resident,\n    size_t *mapped, size_t *n_thp)",
        "start_line": 482,
        "end_line": 493
      },
      {
        "method_name": "base_prefork",
        "params": "(tsdn_t *tsdn, base_t *base)",
        "start_line": 496,
        "end_line": 498
      },
      {
        "method_name": "base_postfork_parent",
        "params": "(tsdn_t *tsdn, base_t *base)",
        "start_line": 501,
        "end_line": 503
      },
      {
        "method_name": "base_postfork_child",
        "params": "(tsdn_t *tsdn, base_t *base)",
        "start_line": 506,
        "end_line": 508
      },
      {
        "method_name": "base_boot",
        "params": "(tsdn_t *tsdn)",
        "start_line": 511,
        "end_line": 514
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/bin.c",
    "line": 50,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/bin.h",
      "jemalloc/internal/witness.h"
    ],
    "methods": [
      {
        "method_name": "BIN_INFO_bin_yes",
        "params": "(reg_size, slab_size, nregs)",
        "start_line": 9,
        "end_line": 9
      },
      {
        "method_name": "bin_init",
        "params": "(bin_t *bin)",
        "start_line": 23,
        "end_line": 35
      },
      {
        "method_name": "bin_prefork",
        "params": "(tsdn_t *tsdn, bin_t *bin)",
        "start_line": 38,
        "end_line": 40
      },
      {
        "method_name": "bin_postfork_parent",
        "params": "(tsdn_t *tsdn, bin_t *bin)",
        "start_line": 43,
        "end_line": 45
      },
      {
        "method_name": "bin_postfork_child",
        "params": "(tsdn_t *tsdn, bin_t *bin)",
        "start_line": 48,
        "end_line": 50
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/bitmap.c",
    "line": 121,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "bitmap_info_init",
        "params": "(bitmap_info_t *binfo, size_t nbits)",
        "start_line": 12,
        "end_line": 37
      },
      {
        "method_name": "bitmap_info_ngroups",
        "params": "(const bitmap_info_t *binfo)",
        "start_line": 40,
        "end_line": 42
      },
      {
        "method_name": "bitmap_init",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo, bool fill)",
        "start_line": 45,
        "end_line": 81
      },
      {
        "method_name": "bitmap_info_init",
        "params": "(bitmap_info_t *binfo, size_t nbits)",
        "start_line": 86,
        "end_line": 92
      },
      {
        "method_name": "bitmap_info_ngroups",
        "params": "(const bitmap_info_t *binfo)",
        "start_line": 95,
        "end_line": 97
      },
      {
        "method_name": "bitmap_init",
        "params": "(bitmap_t *bitmap, const bitmap_info_t *binfo, bool fill)",
        "start_line": 100,
        "end_line": 114
      },
      {
        "method_name": "bitmap_size",
        "params": "(const bitmap_info_t *binfo)",
        "start_line": 119,
        "end_line": 121
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/ckh.c",
    "line": 569,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/ckh.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/hash.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/prng.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "ckh_bucket_search",
        "params": "(ckh_t *ckh, size_t bucket, const void *key)",
        "start_line": 63,
        "end_line": 75
      },
      {
        "method_name": "ckh_isearch",
        "params": "(ckh_t *ckh, const void *key)",
        "start_line": 81,
        "end_line": 99
      },
      {
        "method_name": "ckh_try_bucket_insert",
        "params": "(ckh_t *ckh, size_t bucket, const void *key,\n    const void *data)",
        "start_line": 103,
        "end_line": 125
      },
      {
        "method_name": "ckh_evict_reloc_insert",
        "params": "(ckh_t *ckh, size_t argbucket, void const **argkey,\n    void const **argdata)",
        "start_line": 135,
        "end_line": 202
      },
      {
        "method_name": "ckh_try_insert",
        "params": "(ckh_t *ckh, void const**argkey, void const**argdata)",
        "start_line": 205,
        "end_line": 228
      },
      {
        "method_name": "ckh_rebuild",
        "params": "(ckh_t *ckh, ckhc_t *aTab)",
        "start_line": 235,
        "end_line": 254
      },
      {
        "method_name": "ckh_grow",
        "params": "(tsd_t *tsd, ckh_t *ckh)",
        "start_line": 257,
        "end_line": 308
      },
      {
        "method_name": "ckh_shrink",
        "params": "(tsd_t *tsd, ckh_t *ckh)",
        "start_line": 311,
        "end_line": 356
      },
      {
        "method_name": "ckh_new",
        "params": "(tsd_t *tsd, ckh_t *ckh, size_t minitems, ckh_hash_t *hash,\n    ckh_keycomp_t *keycomp)",
        "start_line": 360,
        "end_line": 413
      },
      {
        "method_name": "ckh_delete",
        "params": "(tsd_t *tsd, ckh_t *ckh)",
        "start_line": 416,
        "end_line": 435
      },
      {
        "method_name": "ckh_count",
        "params": "(ckh_t *ckh)",
        "start_line": 438,
        "end_line": 442
      },
      {
        "method_name": "ckh_iter",
        "params": "(ckh_t *ckh, size_t *tabind, void **key, void **data)",
        "start_line": 445,
        "end_line": 463
      },
      {
        "method_name": "ckh_insert",
        "params": "(tsd_t *tsd, ckh_t *ckh, const void *key, const void *data)",
        "start_line": 466,
        "end_line": 486
      },
      {
        "method_name": "ckh_remove",
        "params": "(tsd_t *tsd, ckh_t *ckh, const void *searchkey, void **key,\n    void **data)",
        "start_line": 490,
        "end_line": 519
      },
      {
        "method_name": "ckh_search",
        "params": "(ckh_t *ckh, const void *searchkey, void **key, void **data)",
        "start_line": 522,
        "end_line": 539
      },
      {
        "method_name": "ckh_string_hash",
        "params": "(const void *key, size_t r_hash[2])",
        "start_line": 542,
        "end_line": 544
      },
      {
        "method_name": "ckh_string_keycomp",
        "params": "(const void *k1, const void *k2)",
        "start_line": 547,
        "end_line": 552
      },
      {
        "method_name": "ckh_pointer_hash",
        "params": "(const void *key, size_t r_hash[2])",
        "start_line": 555,
        "end_line": 564
      },
      {
        "method_name": "ckh_pointer_keycomp",
        "params": "(const void *k1, const void *k2)",
        "start_line": 567,
        "end_line": 569
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/ctl.c",
    "line": 2883,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/ctl.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/extent_mmap.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/nstime.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "ctl_named_node",
        "params": "(const ctl_node_t *node)",
        "start_line": 30,
        "end_line": 32
      },
      {
        "method_name": "ctl_named_children",
        "params": "(const ctl_named_node_t *node, size_t index)",
        "start_line": 35,
        "end_line": 39
      },
      {
        "method_name": "ctl_indexed_node",
        "params": "(const ctl_node_t *node)",
        "start_line": 42,
        "end_line": 44
      },
      {
        "method_name": "NAME",
        "params": "(n)",
        "start_line": 234,
        "end_line": 234
      },
      {
        "method_name": "INDEX",
        "params": "(i)",
        "start_line": 245,
        "end_line": 245
      },
      {
        "method_name": "CTL",
        "params": "(thread_tcache_enabled)",
        "start_line": 249,
        "end_line": 249
      },
      {
        "method_name": "CTL",
        "params": "(thread_prof_name)",
        "start_line": 254,
        "end_line": 254
      },
      {
        "method_name": "CTL",
        "params": "(thread_arena)",
        "start_line": 259,
        "end_line": 259
      },
      {
        "method_name": "CTL",
        "params": "(thread_allocated)",
        "start_line": 260,
        "end_line": 260
      },
      {
        "method_name": "CTL",
        "params": "(thread_allocatedp)",
        "start_line": 261,
        "end_line": 261
      },
      {
        "method_name": "CTL",
        "params": "(thread_deallocated)",
        "start_line": 262,
        "end_line": 262
      },
      {
        "method_name": "CTL",
        "params": "(thread_deallocatedp)",
        "start_line": 263,
        "end_line": 263
      },
      {
        "method_name": "CHILD",
        "params": "(named, thread_tcache)",
        "start_line": 264,
        "end_line": 264
      },
      {
        "method_name": "CTL",
        "params": "(config_cache_oblivious)",
        "start_line": 269,
        "end_line": 269
      },
      {
        "method_name": "CTL",
        "params": "(config_debug)",
        "start_line": 270,
        "end_line": 270
      },
      {
        "method_name": "CTL",
        "params": "(config_fill)",
        "start_line": 271,
        "end_line": 271
      },
      {
        "method_name": "CTL",
        "params": "(config_lazy_lock)",
        "start_line": 272,
        "end_line": 272
      },
      {
        "method_name": "CTL",
        "params": "(config_malloc_conf)",
        "start_line": 273,
        "end_line": 273
      },
      {
        "method_name": "CTL",
        "params": "(config_prof)",
        "start_line": 274,
        "end_line": 274
      },
      {
        "method_name": "CTL",
        "params": "(config_prof_libgcc)",
        "start_line": 275,
        "end_line": 275
      },
      {
        "method_name": "CTL",
        "params": "(config_prof_libunwind)",
        "start_line": 276,
        "end_line": 276
      },
      {
        "method_name": "CTL",
        "params": "(config_stats)",
        "start_line": 277,
        "end_line": 277
      },
      {
        "method_name": "CTL",
        "params": "(config_utrace)",
        "start_line": 278,
        "end_line": 278
      },
      {
        "method_name": "CTL",
        "params": "(opt_abort)",
        "start_line": 283,
        "end_line": 283
      },
      {
        "method_name": "CTL",
        "params": "(opt_abort_conf)",
        "start_line": 284,
        "end_line": 284
      },
      {
        "method_name": "CTL",
        "params": "(opt_metadata_thp)",
        "start_line": 285,
        "end_line": 285
      },
      {
        "method_name": "CTL",
        "params": "(opt_retain)",
        "start_line": 286,
        "end_line": 286
      },
      {
        "method_name": "CTL",
        "params": "(opt_dss)",
        "start_line": 287,
        "end_line": 287
      },
      {
        "method_name": "CTL",
        "params": "(opt_narenas)",
        "start_line": 288,
        "end_line": 288
      },
      {
        "method_name": "CTL",
        "params": "(opt_percpu_arena)",
        "start_line": 289,
        "end_line": 289
      },
      {
        "method_name": "CTL",
        "params": "(opt_background_thread)",
        "start_line": 290,
        "end_line": 290
      },
      {
        "method_name": "CTL",
        "params": "(opt_max_background_threads)",
        "start_line": 291,
        "end_line": 291
      },
      {
        "method_name": "CTL",
        "params": "(opt_dirty_decay_ms)",
        "start_line": 292,
        "end_line": 292
      },
      {
        "method_name": "CTL",
        "params": "(opt_muzzy_decay_ms)",
        "start_line": 293,
        "end_line": 293
      },
      {
        "method_name": "CTL",
        "params": "(opt_stats_print)",
        "start_line": 294,
        "end_line": 294
      },
      {
        "method_name": "CTL",
        "params": "(opt_stats_print_opts)",
        "start_line": 295,
        "end_line": 295
      },
      {
        "method_name": "CTL",
        "params": "(opt_junk)",
        "start_line": 296,
        "end_line": 296
      },
      {
        "method_name": "CTL",
        "params": "(opt_zero)",
        "start_line": 297,
        "end_line": 297
      },
      {
        "method_name": "CTL",
        "params": "(opt_utrace)",
        "start_line": 298,
        "end_line": 298
      },
      {
        "method_name": "CTL",
        "params": "(opt_xmalloc)",
        "start_line": 299,
        "end_line": 299
      },
      {
        "method_name": "CTL",
        "params": "(opt_tcache)",
        "start_line": 300,
        "end_line": 300
      },
      {
        "method_name": "CTL",
        "params": "(opt_thp)",
        "start_line": 301,
        "end_line": 301
      },
      {
        "method_name": "CTL",
        "params": "(opt_lg_extent_max_active_fit)",
        "start_line": 302,
        "end_line": 302
      },
      {
        "method_name": "CTL",
        "params": "(opt_lg_tcache_max)",
        "start_line": 303,
        "end_line": 303
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof)",
        "start_line": 304,
        "end_line": 304
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof_prefix)",
        "start_line": 305,
        "end_line": 305
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof_active)",
        "start_line": 306,
        "end_line": 306
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof_thread_active_init)",
        "start_line": 307,
        "end_line": 307
      },
      {
        "method_name": "CTL",
        "params": "(opt_lg_prof_sample)",
        "start_line": 308,
        "end_line": 308
      },
      {
        "method_name": "CTL",
        "params": "(opt_lg_prof_interval)",
        "start_line": 309,
        "end_line": 309
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof_gdump)",
        "start_line": 310,
        "end_line": 310
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof_final)",
        "start_line": 311,
        "end_line": 311
      },
      {
        "method_name": "CTL",
        "params": "(opt_prof_leak)",
        "start_line": 312,
        "end_line": 312
      },
      {
        "method_name": "CTL",
        "params": "(tcache_create)",
        "start_line": 317,
        "end_line": 317
      },
      {
        "method_name": "CTL",
        "params": "(tcache_flush)",
        "start_line": 318,
        "end_line": 318
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_initialized)",
        "start_line": 323,
        "end_line": 323
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_decay)",
        "start_line": 324,
        "end_line": 324
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_purge)",
        "start_line": 325,
        "end_line": 325
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_reset)",
        "start_line": 326,
        "end_line": 326
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_destroy)",
        "start_line": 327,
        "end_line": 327
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_dss)",
        "start_line": 328,
        "end_line": 328
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_dirty_decay_ms)",
        "start_line": 329,
        "end_line": 329
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_muzzy_decay_ms)",
        "start_line": 330,
        "end_line": 330
      },
      {
        "method_name": "CTL",
        "params": "(arena_i_extent_hooks)",
        "start_line": 331,
        "end_line": 331
      },
      {
        "method_name": "CTL",
        "params": "(arenas_bin_i_size)",
        "start_line": 343,
        "end_line": 343
      },
      {
        "method_name": "CTL",
        "params": "(arenas_bin_i_nregs)",
        "start_line": 344,
        "end_line": 344
      },
      {
        "method_name": "CTL",
        "params": "(arenas_narenas)",
        "start_line": 367,
        "end_line": 367
      },
      {
        "method_name": "CTL",
        "params": "(arenas_dirty_decay_ms)",
        "start_line": 368,
        "end_line": 368
      },
      {
        "method_name": "CTL",
        "params": "(arenas_muzzy_decay_ms)",
        "start_line": 369,
        "end_line": 369
      },
      {
        "method_name": "CTL",
        "params": "(arenas_quantum)",
        "start_line": 370,
        "end_line": 370
      },
      {
        "method_name": "CTL",
        "params": "(arenas_page)",
        "start_line": 371,
        "end_line": 371
      },
      {
        "method_name": "CTL",
        "params": "(arenas_tcache_max)",
        "start_line": 372,
        "end_line": 372
      },
      {
        "method_name": "CTL",
        "params": "(arenas_nbins)",
        "start_line": 373,
        "end_line": 373
      },
      {
        "method_name": "CTL",
        "params": "(arenas_nhbins)",
        "start_line": 374,
        "end_line": 374
      },
      {
        "method_name": "CHILD",
        "params": "(indexed, arenas_bin)",
        "start_line": 375,
        "end_line": 375
      },
      {
        "method_name": "CTL",
        "params": "(arenas_nlextents)",
        "start_line": 376,
        "end_line": 376
      },
      {
        "method_name": "CHILD",
        "params": "(indexed, arenas_lextent)",
        "start_line": 377,
        "end_line": 377
      },
      {
        "method_name": "CTL",
        "params": "(arenas_create)",
        "start_line": 378,
        "end_line": 378
      },
      {
        "method_name": "CTL",
        "params": "(prof_thread_active_init)",
        "start_line": 383,
        "end_line": 383
      },
      {
        "method_name": "CTL",
        "params": "(prof_active)",
        "start_line": 384,
        "end_line": 384
      },
      {
        "method_name": "CTL",
        "params": "(prof_dump)",
        "start_line": 385,
        "end_line": 385
      },
      {
        "method_name": "CTL",
        "params": "(prof_gdump)",
        "start_line": 386,
        "end_line": 386
      },
      {
        "method_name": "CTL",
        "params": "(prof_reset)",
        "start_line": 387,
        "end_line": 387
      },
      {
        "method_name": "CTL",
        "params": "(prof_interval)",
        "start_line": 388,
        "end_line": 388
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_small_allocated)",
        "start_line": 393,
        "end_line": 393
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_small_nmalloc)",
        "start_line": 394,
        "end_line": 394
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_small_ndalloc)",
        "start_line": 395,
        "end_line": 395
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_large_allocated)",
        "start_line": 400,
        "end_line": 400
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_large_nmalloc)",
        "start_line": 401,
        "end_line": 401
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_large_ndalloc)",
        "start_line": 402,
        "end_line": 402
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_nmalloc)",
        "start_line": 428,
        "end_line": 428
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_ndalloc)",
        "start_line": 429,
        "end_line": 429
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_nrequests)",
        "start_line": 430,
        "end_line": 430
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_curregs)",
        "start_line": 431,
        "end_line": 431
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_nfills)",
        "start_line": 432,
        "end_line": 432
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_nflushes)",
        "start_line": 433,
        "end_line": 433
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_nslabs)",
        "start_line": 434,
        "end_line": 434
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_nreslabs)",
        "start_line": 435,
        "end_line": 435
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_bins_j_curslabs)",
        "start_line": 436,
        "end_line": 436
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_lextents_j_nmalloc)",
        "start_line": 449,
        "end_line": 449
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_lextents_j_ndalloc)",
        "start_line": 450,
        "end_line": 450
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_lextents_j_nrequests)",
        "start_line": 451,
        "end_line": 451
      },
      {
        "method_name": "OP",
        "params": "(mtx)",
        "start_line": 466,
        "end_line": 466
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_nthreads)",
        "start_line": 473,
        "end_line": 473
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_uptime)",
        "start_line": 474,
        "end_line": 474
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_dss)",
        "start_line": 475,
        "end_line": 475
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_dirty_decay_ms)",
        "start_line": 476,
        "end_line": 476
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_muzzy_decay_ms)",
        "start_line": 477,
        "end_line": 477
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_pactive)",
        "start_line": 478,
        "end_line": 478
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_pdirty)",
        "start_line": 479,
        "end_line": 479
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_pmuzzy)",
        "start_line": 480,
        "end_line": 480
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_mapped)",
        "start_line": 481,
        "end_line": 481
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_retained)",
        "start_line": 482,
        "end_line": 482
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_dirty_npurge)",
        "start_line": 483,
        "end_line": 483
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_dirty_nmadvise)",
        "start_line": 484,
        "end_line": 484
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_dirty_purged)",
        "start_line": 485,
        "end_line": 485
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_muzzy_npurge)",
        "start_line": 486,
        "end_line": 486
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_muzzy_nmadvise)",
        "start_line": 487,
        "end_line": 487
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_muzzy_purged)",
        "start_line": 488,
        "end_line": 488
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_base)",
        "start_line": 489,
        "end_line": 489
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_internal)",
        "start_line": 490,
        "end_line": 490
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_metadata_thp)",
        "start_line": 491,
        "end_line": 491
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_tcache_bytes)",
        "start_line": 492,
        "end_line": 492
      },
      {
        "method_name": "CTL",
        "params": "(stats_arenas_i_resident)",
        "start_line": 493,
        "end_line": 493
      },
      {
        "method_name": "CHILD",
        "params": "(named, stats_arenas_i_small)",
        "start_line": 494,
        "end_line": 494
      },
      {
        "method_name": "CHILD",
        "params": "(named, stats_arenas_i_large)",
        "start_line": 495,
        "end_line": 495
      },
      {
        "method_name": "CHILD",
        "params": "(indexed, stats_arenas_i_bins)",
        "start_line": 496,
        "end_line": 496
      },
      {
        "method_name": "CHILD",
        "params": "(indexed, stats_arenas_i_lextents)",
        "start_line": 497,
        "end_line": 497
      },
      {
        "method_name": "CTL",
        "params": "(stats_background_thread_num_threads)",
        "start_line": 509,
        "end_line": 509
      },
      {
        "method_name": "CTL",
        "params": "(stats_background_thread_num_runs)",
        "start_line": 510,
        "end_line": 510
      },
      {
        "method_name": "OP",
        "params": "(mtx)",
        "start_line": 518,
        "end_line": 518
      },
      {
        "method_name": "CTL",
        "params": "(stats_allocated)",
        "start_line": 527,
        "end_line": 527
      },
      {
        "method_name": "CTL",
        "params": "(stats_active)",
        "start_line": 528,
        "end_line": 528
      },
      {
        "method_name": "CTL",
        "params": "(stats_metadata)",
        "start_line": 529,
        "end_line": 529
      },
      {
        "method_name": "CTL",
        "params": "(stats_metadata_thp)",
        "start_line": 530,
        "end_line": 530
      },
      {
        "method_name": "CTL",
        "params": "(stats_resident)",
        "start_line": 531,
        "end_line": 531
      },
      {
        "method_name": "CTL",
        "params": "(stats_mapped)",
        "start_line": 532,
        "end_line": 532
      },
      {
        "method_name": "CTL",
        "params": "(stats_retained)",
        "start_line": 533,
        "end_line": 534
      },
      {
        "method_name": "CHILD",
        "params": "(named, stats_background_thread)",
        "start_line": 535,
        "end_line": 535
      },
      {
        "method_name": "CHILD",
        "params": "(named, stats_mutexes)",
        "start_line": 536,
        "end_line": 536
      },
      {
        "method_name": "CTL",
        "params": "(version)",
        "start_line": 541,
        "end_line": 541
      },
      {
        "method_name": "CTL",
        "params": "(epoch)",
        "start_line": 542,
        "end_line": 542
      },
      {
        "method_name": "CTL",
        "params": "(background_thread)",
        "start_line": 543,
        "end_line": 543
      },
      {
        "method_name": "CTL",
        "params": "(max_background_threads)",
        "start_line": 544,
        "end_line": 544
      },
      {
        "method_name": "CHILD",
        "params": "(named, thread)",
        "start_line": 545,
        "end_line": 545
      },
      {
        "method_name": "CHILD",
        "params": "(named, config)",
        "start_line": 546,
        "end_line": 546
      },
      {
        "method_name": "CHILD",
        "params": "(named, opt)",
        "start_line": 547,
        "end_line": 547
      },
      {
        "method_name": "CHILD",
        "params": "(named, tcache)",
        "start_line": 548,
        "end_line": 548
      },
      {
        "method_name": "CHILD",
        "params": "(indexed, arena)",
        "start_line": 549,
        "end_line": 549
      },
      {
        "method_name": "CHILD",
        "params": "(named, arenas)",
        "start_line": 550,
        "end_line": 550
      },
      {
        "method_name": "CHILD",
        "params": "(named, prof)",
        "start_line": 551,
        "end_line": 551
      },
      {
        "method_name": "ctl_accum_arena_stats_u64",
        "params": "(arena_stats_u64_t *dst, arena_stats_u64_t *src)",
        "start_line": 569,
        "end_line": 577
      },
      {
        "method_name": "ctl_arena_stats_read_u64",
        "params": "(arena_stats_u64_t *p)",
        "start_line": 581,
        "end_line": 587
      },
      {
        "method_name": "accum_atomic_zu",
        "params": "(atomic_zu_t *dst, atomic_zu_t *src)",
        "start_line": 590,
        "end_line": 594
      },
      {
        "method_name": "arenas_i2a_impl",
        "params": "(size_t i, bool compat, bool validate)",
        "start_line": 599,
        "end_line": 634
      },
      {
        "method_name": "arenas_i2a",
        "params": "(size_t i)",
        "start_line": 637,
        "end_line": 639
      },
      {
        "method_name": "arenas_i_impl",
        "params": "(tsd_t *tsd, size_t i, bool compat, bool init)",
        "start_line": 642,
        "end_line": 675
      },
      {
        "method_name": "arenas_i",
        "params": "(size_t i)",
        "start_line": 678,
        "end_line": 682
      },
      {
        "method_name": "ctl_arena_clear",
        "params": "(ctl_arena_t *ctl_arena)",
        "start_line": 685,
        "end_line": 704
      },
      {
        "method_name": "ctl_arena_stats_amerge",
        "params": "(tsdn_t *tsdn, ctl_arena_t *ctl_arena, arena_t *arena)",
        "start_line": 707,
        "end_line": 735
      },
      {
        "method_name": "ctl_arena_stats_sdmerge",
        "params": "(ctl_arena_t *ctl_sdarena, ctl_arena_t *ctl_arena,\n    bool destroyed)",
        "start_line": 739,
        "end_line": 871
      },
      {
        "method_name": "ctl_arena_refresh",
        "params": "(tsdn_t *tsdn, arena_t *arena, ctl_arena_t *ctl_sdarena,\n    unsigned i, bool destroyed)",
        "start_line": 875,
        "end_line": 882
      },
      {
        "method_name": "ctl_arena_init",
        "params": "(tsd_t *tsd, extent_hooks_t *extent_hooks)",
        "start_line": 885,
        "end_line": 912
      },
      {
        "method_name": "ctl_background_thread_stats_read",
        "params": "(tsdn_t *tsdn)",
        "start_line": 915,
        "end_line": 922
      },
      {
        "method_name": "ctl_refresh",
        "params": "(tsdn_t *tsdn)",
        "start_line": 925,
        "end_line": 996
      },
      {
        "method_name": "ctl_init",
        "params": "(tsd_t *tsd)",
        "start_line": 999,
        "end_line": 1072
      },
      {
        "method_name": "ctl_lookup",
        "params": "(tsdn_t *tsdn, const char *name, ctl_node_t const **nodesp,\n    size_t *mibp, size_t *depthp)",
        "start_line": 1076,
        "end_line": 1170
      },
      {
        "method_name": "ctl_byname",
        "params": "(tsd_t *tsd, const char *name, void *oldp, size_t *oldlenp,\n    void *newp, size_t newlen)",
        "start_line": 1174,
        "end_line": 1202
      },
      {
        "method_name": "ctl_nametomib",
        "params": "(tsd_t *tsd, const char *name, size_t *mibp, size_t *miblenp)",
        "start_line": 1205,
        "end_line": 1216
      },
      {
        "method_name": "ctl_bymib",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1220,
        "end_line": 1265
      },
      {
        "method_name": "ctl_boot",
        "params": "(void)",
        "start_line": 1268,
        "end_line": 1277
      },
      {
        "method_name": "ctl_prefork",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1280,
        "end_line": 1282
      },
      {
        "method_name": "ctl_postfork_parent",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1285,
        "end_line": 1287
      },
      {
        "method_name": "ctl_postfork_child",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1290,
        "end_line": 1292
      },
      {
        "method_name": "READONLY",
        "params": "()",
        "start_line": 1297,
        "end_line": 1302
      },
      {
        "method_name": "WRITEONLY",
        "params": "()",
        "start_line": 1304,
        "end_line": 1309
      },
      {
        "method_name": "READ_XOR_WRITE",
        "params": "()",
        "start_line": 1311,
        "end_line": 1317
      },
      {
        "method_name": "READ",
        "params": "(v, t)",
        "start_line": 1319,
        "end_line": 1330
      },
      {
        "method_name": "WRITE",
        "params": "(v, t)",
        "start_line": 1332,
        "end_line": 1340
      },
      {
        "method_name": "MIB_UNSIGNED",
        "params": "(v, i)",
        "start_line": 1342,
        "end_line": 1348
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1357,
        "end_line": 1377
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1382,
        "end_line": 1398
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1403,
        "end_line": 1416
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1425,
        "end_line": 1439
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1444,
        "end_line": 1455
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1460,
        "end_line": 1474
      },
      {
        "method_name": "n##_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\t\\\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1479,
        "end_line": 1490
      },
      {
        "method_name": "epoch_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1498,
        "end_line": 1513
      },
      {
        "method_name": "background_thread_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1517,
        "end_line": 1571
      },
      {
        "method_name": "max_background_threads_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1575,
        "end_line": 1636
      },
      {
        "method_name": "thread_arena_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1694,
        "end_line": 1746
      },
      {
        "method_name": "thread_tcache_enabled_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1759,
        "end_line": 1776
      },
      {
        "method_name": "thread_tcache_flush_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1780,
        "end_line": 1796
      },
      {
        "method_name": "thread_prof_name_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1800,
        "end_line": 1827
      },
      {
        "method_name": "thread_prof_active_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1831,
        "end_line": 1855
      },
      {
        "method_name": "tcache_create_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1861,
        "end_line": 1875
      },
      {
        "method_name": "tcache_flush_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1879,
        "end_line": 1895
      },
      {
        "method_name": "tcache_destroy_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1899,
        "end_line": 1915
      },
      {
        "method_name": "arena_i_initialized_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1921,
        "end_line": 1939
      },
      {
        "method_name": "arena_i_decay",
        "params": "(tsdn_t *tsdn, unsigned arena_ind, bool all)",
        "start_line": 1942,
        "end_line": 1986
      },
      {
        "method_name": "arena_i_decay_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 1990,
        "end_line": 2002
      },
      {
        "method_name": "arena_i_purge_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2006,
        "end_line": 2018
      },
      {
        "method_name": "arena_i_reset_destroy_helper",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen, unsigned *arena_ind,\n    arena_t **arena)",
        "start_line": 2023,
        "end_line": 2039
      },
      {
        "method_name": "arena_reset_prepare_background_thread",
        "params": "(tsd_t *tsd, unsigned arena_ind)",
        "start_line": 2042,
        "end_line": 2056
      },
      {
        "method_name": "arena_reset_finish_background_thread",
        "params": "(tsd_t *tsd, unsigned arena_ind)",
        "start_line": 2059,
        "end_line": 2072
      },
      {
        "method_name": "arena_i_reset_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2076,
        "end_line": 2092
      },
      {
        "method_name": "arena_i_destroy_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2096,
        "end_line": 2133
      },
      {
        "method_name": "arena_i_dss_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2137,
        "end_line": 2194
      },
      {
        "method_name": "arena_i_decay_ms_ctl_impl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen, bool dirty)",
        "start_line": 2198,
        "end_line": 2231
      },
      {
        "method_name": "arena_i_dirty_decay_ms_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2235,
        "end_line": 2238
      },
      {
        "method_name": "arena_i_muzzy_decay_ms_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2242,
        "end_line": 2245
      },
      {
        "method_name": "arena_i_extent_hooks_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2249,
        "end_line": 2300
      },
      {
        "method_name": "arena_i_retain_grow_limit_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2304,
        "end_line": 2336
      },
      {
        "method_name": "arena_i_index",
        "params": "(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i)",
        "start_line": 2339,
        "end_line": 2359
      },
      {
        "method_name": "arenas_narenas_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2365,
        "end_line": 2382
      },
      {
        "method_name": "arenas_decay_ms_ctl_impl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen, bool dirty)",
        "start_line": 2386,
        "end_line": 2409
      },
      {
        "method_name": "arenas_dirty_decay_ms_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2413,
        "end_line": 2416
      },
      {
        "method_name": "arenas_muzzy_decay_ms_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2420,
        "end_line": 2423
      },
      {
        "method_name": "arenas_bin_i_index",
        "params": "(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i)",
        "start_line": 2434,
        "end_line": 2439
      },
      {
        "method_name": "arenas_lextent_i_index",
        "params": "(tsdn_t *tsdn, const size_t *mib, size_t miblen,\n    size_t i)",
        "start_line": 2446,
        "end_line": 2451
      },
      {
        "method_name": "arenas_create_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2455,
        "end_line": 2474
      },
      {
        "method_name": "arenas_lookup_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2478,
        "end_line": 2504
      },
      {
        "method_name": "prof_thread_active_init_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2510,
        "end_line": 2533
      },
      {
        "method_name": "prof_active_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2537,
        "end_line": 2559
      },
      {
        "method_name": "prof_dump_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2563,
        "end_line": 2582
      },
      {
        "method_name": "prof_gdump_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2586,
        "end_line": 2608
      },
      {
        "method_name": "prof_reset_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,\n    size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2612,
        "end_line": 2631
      },
      {
        "method_name": "stats_mutexes_reset_ctl",
        "params": "(tsd_t *tsd, const size_t *mib, size_t miblen,\n    void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "start_line": 2769,
        "end_line": 2816
      },
      {
        "method_name": "stats_arenas_i_bins_j_index",
        "params": "(tsdn_t *tsdn, const size_t *mib, size_t miblen,\n    size_t j)",
        "start_line": 2839,
        "end_line": 2844
      },
      {
        "method_name": "stats_arenas_i_lextents_j_index",
        "params": "(tsdn_t *tsdn, const size_t *mib, size_t miblen,\n    size_t j)",
        "start_line": 2860,
        "end_line": 2865
      },
      {
        "method_name": "stats_arenas_i_index",
        "params": "(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i)",
        "start_line": 2868,
        "end_line": 2883
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/div.c",
    "line": 55,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/div.h",
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "div_init",
        "params": "(div_info_t *div_info, size_t d)",
        "start_line": 30,
        "end_line": 55
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/extent.c",
    "line": 2177,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/extent_mmap.h",
      "jemalloc/internal/ph.h",
      "jemalloc/internal/rtree.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/mutex_pool.h"
    ],
    "methods": [
      {
        "method_name": "extent_rtree_leaf_elm_try_lock",
        "params": "(tsdn_t *tsdn, rtree_leaf_elm_t *elm,\n    extent_t **result)",
        "start_line": 133,
        "end_line": 155
      },
      {
        "method_name": "extent_lock_from_addr",
        "params": "(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx, void *addr)",
        "start_line": 162,
        "end_line": 174
      },
      {
        "method_name": "extent_alloc",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 177,
        "end_line": 187
      },
      {
        "method_name": "extent_dalloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent)",
        "start_line": 190,
        "end_line": 194
      },
      {
        "method_name": "extent_hooks_get",
        "params": "(arena_t *arena)",
        "start_line": 197,
        "end_line": 199
      },
      {
        "method_name": "extent_hooks_set",
        "params": "(tsd_t *tsd, arena_t *arena, extent_hooks_t *extent_hooks)",
        "start_line": 202,
        "end_line": 214
      },
      {
        "method_name": "extent_hooks_assure_initialized",
        "params": "(arena_t *arena,\n    extent_hooks_t **r_extent_hooks)",
        "start_line": 218,
        "end_line": 222
      },
      {
        "method_name": "extent_size_quantize_floor",
        "params": "(size_t size)",
        "start_line": 228,
        "end_line": 248
      },
      {
        "method_name": "extent_size_quantize_ceil",
        "params": "(size_t size)",
        "start_line": 254,
        "end_line": 275
      },
      {
        "method_name": "extents_init",
        "params": "(tsdn_t *tsdn, extents_t *extents, extent_state_t state,\n    bool delay_coalesce)",
        "start_line": 282,
        "end_line": 296
      },
      {
        "method_name": "extents_state_get",
        "params": "(const extents_t *extents)",
        "start_line": 299,
        "end_line": 301
      },
      {
        "method_name": "extents_npages_get",
        "params": "(extents_t *extents)",
        "start_line": 304,
        "end_line": 306
      },
      {
        "method_name": "extents_insert_locked",
        "params": "(tsdn_t *tsdn, extents_t *extents, extent_t *extent)",
        "start_line": 309,
        "end_line": 332
      },
      {
        "method_name": "extents_remove_locked",
        "params": "(tsdn_t *tsdn, extents_t *extents, extent_t *extent)",
        "start_line": 335,
        "end_line": 358
      },
      {
        "method_name": "extents_fit_alignment",
        "params": "(extents_t *extents, size_t min_size, size_t max_size,\n    size_t alignment)",
        "start_line": 366,
        "end_line": 395
      },
      {
        "method_name": "extents_best_fit_locked",
        "params": "(tsdn_t *tsdn, arena_t *arena, extents_t *extents,\n    size_t size)",
        "start_line": 400,
        "end_line": 419
      },
      {
        "method_name": "extents_first_fit_locked",
        "params": "(tsdn_t *tsdn, arena_t *arena, extents_t *extents,\n    size_t size)",
        "start_line": 427,
        "end_line": 448
      },
      {
        "method_name": "extents_fit_locked",
        "params": "(tsdn_t *tsdn, arena_t *arena, extents_t *extents,\n    size_t esize, size_t alignment)",
        "start_line": 458,
        "end_line": 482
      },
      {
        "method_name": "extent_try_delayed_coalesce",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, rtree_ctx_t *rtree_ctx, extents_t *extents,\n    extent_t *extent)",
        "start_line": 487,
        "end_line": 499
      },
      {
        "method_name": "extents_alloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, void *new_addr, size_t size, size_t pad,\n    size_t alignment, bool slab, szind_t szind, bool *zero, bool *commit)",
        "start_line": 504,
        "end_line": 514
      },
      {
        "method_name": "extents_dalloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, extent_t *extent)",
        "start_line": 518,
        "end_line": 529
      },
      {
        "method_name": "extents_evict",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, size_t npages_min)",
        "start_line": 533,
        "end_line": 593
      },
      {
        "method_name": "extents_leak",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, extent_t *extent, bool growing_retained)",
        "start_line": 597,
        "end_line": 611
      },
      {
        "method_name": "extents_prefork",
        "params": "(tsdn_t *tsdn, extents_t *extents)",
        "start_line": 614,
        "end_line": 616
      },
      {
        "method_name": "extents_postfork_parent",
        "params": "(tsdn_t *tsdn, extents_t *extents)",
        "start_line": 619,
        "end_line": 621
      },
      {
        "method_name": "extents_postfork_child",
        "params": "(tsdn_t *tsdn, extents_t *extents)",
        "start_line": 624,
        "end_line": 626
      },
      {
        "method_name": "extent_deactivate_locked",
        "params": "(tsdn_t *tsdn, arena_t *arena, extents_t *extents,\n    extent_t *extent)",
        "start_line": 630,
        "end_line": 636
      },
      {
        "method_name": "extent_deactivate",
        "params": "(tsdn_t *tsdn, arena_t *arena, extents_t *extents,\n    extent_t *extent)",
        "start_line": 640,
        "end_line": 644
      },
      {
        "method_name": "extent_activate_locked",
        "params": "(tsdn_t *tsdn, arena_t *arena, extents_t *extents,\n    extent_t *extent)",
        "start_line": 648,
        "end_line": 654
      },
      {
        "method_name": "extent_rtree_leaf_elms_lookup",
        "params": "(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx,\n    const extent_t *extent, bool dependent, bool init_missing,\n    rtree_leaf_elm_t **r_elm_a, rtree_leaf_elm_t **r_elm_b)",
        "start_line": 659,
        "end_line": 675
      },
      {
        "method_name": "extent_rtree_write_acquired",
        "params": "(tsdn_t *tsdn, rtree_leaf_elm_t *elm_a,\n    rtree_leaf_elm_t *elm_b, extent_t *extent, szind_t szind, bool slab)",
        "start_line": 679,
        "end_line": 685
      },
      {
        "method_name": "extent_interior_register",
        "params": "(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx, extent_t *extent,\n    szind_t szind)",
        "start_line": 689,
        "end_line": 698
      },
      {
        "method_name": "extent_gdump_add",
        "params": "(tsdn_t *tsdn, const extent_t *extent)",
        "start_line": 701,
        "end_line": 724
      },
      {
        "method_name": "extent_gdump_sub",
        "params": "(tsdn_t *tsdn, const extent_t *extent)",
        "start_line": 727,
        "end_line": 735
      },
      {
        "method_name": "extent_register_impl",
        "params": "(tsdn_t *tsdn, extent_t *extent, bool gdump_add)",
        "start_line": 738,
        "end_line": 768
      },
      {
        "method_name": "extent_register",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 771,
        "end_line": 773
      },
      {
        "method_name": "extent_register_no_gdump_add",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 776,
        "end_line": 778
      },
      {
        "method_name": "extent_reregister",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 781,
        "end_line": 784
      },
      {
        "method_name": "extent_interior_deregister",
        "params": "(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx,\n    extent_t *extent)",
        "start_line": 795,
        "end_line": 805
      },
      {
        "method_name": "extent_deregister_impl",
        "params": "(tsdn_t *tsdn, extent_t *extent, bool gdump)",
        "start_line": 811,
        "end_line": 831
      },
      {
        "method_name": "extent_deregister",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 834,
        "end_line": 836
      },
      {
        "method_name": "extent_deregister_no_gdump_sub",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 839,
        "end_line": 841
      },
      {
        "method_name": "extent_recycle_extract",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, rtree_ctx_t *rtree_ctx, extents_t *extents,\n    void *new_addr, size_t size, size_t pad, size_t alignment, bool slab,\n    bool growing_retained)",
        "start_line": 851,
        "end_line": 906
      },
      {
        "method_name": "extent_split_interior",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, rtree_ctx_t *rtree_ctx,\n    /* The result of splitting, in case of success. */\n    extent_t **extent, extent_t **lead, extent_t **trail,\n    /* The mess to clean up, in case of error. */\n    extent_t **to_leak, extent_t **to_salvage,\n    void *new_addr, size_t size, size_t pad, size_t alignment, bool slab,\n    szind_t szind, bool growing_retained)",
        "start_line": 942,
        "end_line": 1003
      },
      {
        "method_name": "extent_recycle_split",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, rtree_ctx_t *rtree_ctx, extents_t *extents,\n    void *new_addr, size_t size, size_t pad, size_t alignment, bool slab,\n    szind_t szind, extent_t *extent, bool growing_retained)",
        "start_line": 1015,
        "end_line": 1054
      },
      {
        "method_name": "extent_recycle",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, void *new_addr, size_t size, size_t pad,\n    size_t alignment, bool slab, szind_t szind, bool *zero, bool *commit,\n    bool growing_retained)",
        "start_line": 1064,
        "end_line": 1129
      },
      {
        "method_name": "extent_alloc_core",
        "params": "(tsdn_t *tsdn, arena_t *arena, void *new_addr, size_t size,\n    size_t alignment, bool *zero, bool *commit, dss_prec_t dss_prec)",
        "start_line": 1139,
        "end_line": 1165
      },
      {
        "method_name": "extent_alloc_default_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena, void *new_addr,\n    size_t size, size_t alignment, bool *zero, bool *commit)",
        "start_line": 1169,
        "end_line": 1177
      },
      {
        "method_name": "extent_alloc_default",
        "params": "(extent_hooks_t *extent_hooks, void *new_addr, size_t size,\n    size_t alignment, bool *zero, bool *commit, unsigned arena_ind)",
        "start_line": 1181,
        "end_line": 1195
      },
      {
        "method_name": "extent_hook_pre_reentrancy",
        "params": "(tsdn_t *tsdn, arena_t *arena)",
        "start_line": 1198,
        "end_line": 1212
      },
      {
        "method_name": "extent_hook_post_reentrancy",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1215,
        "end_line": 1218
      },
      {
        "method_name": "extent_grow_retained",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, size_t size, size_t pad, size_t alignment,\n    bool slab, szind_t szind, bool *zero, bool *commit)",
        "start_line": 1228,
        "end_line": 1387
      },
      {
        "method_name": "extent_alloc_retained",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, void *new_addr, size_t size, size_t pad,\n    size_t alignment, bool slab, szind_t szind, bool *zero, bool *commit)",
        "start_line": 1392,
        "end_line": 1416
      },
      {
        "method_name": "extent_alloc_wrapper_hard",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, void *new_addr, size_t size, size_t pad,\n    size_t alignment, bool slab, szind_t szind, bool *zero, bool *commit)",
        "start_line": 1421,
        "end_line": 1455
      },
      {
        "method_name": "extent_alloc_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, void *new_addr, size_t size, size_t pad,\n    size_t alignment, bool slab, szind_t szind, bool *zero, bool *commit)",
        "start_line": 1460,
        "end_line": 1484
      },
      {
        "method_name": "extent_can_coalesce",
        "params": "(arena_t *arena, extents_t *extents, const extent_t *inner,\n    const extent_t *outer)",
        "start_line": 1488,
        "end_line": 1504
      },
      {
        "method_name": "extent_coalesce",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, extent_t *inner, extent_t *outer, bool forward,\n    bool growing_retained)",
        "start_line": 1509,
        "end_line": 1524
      },
      {
        "method_name": "extent_try_coalesce",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, rtree_ctx_t *rtree_ctx, extents_t *extents,\n    extent_t *extent, bool *coalesced, bool growing_retained)",
        "start_line": 1529,
        "end_line": 1590
      },
      {
        "method_name": "extent_record",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,\n    extents_t *extents, extent_t *extent, bool growing_retained)",
        "start_line": 1598,
        "end_line": 1637
      },
      {
        "method_name": "extent_dalloc_gap",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent)",
        "start_line": 1640,
        "end_line": 1652
      },
      {
        "method_name": "extent_dalloc_default_impl",
        "params": "(void *addr, size_t size)",
        "start_line": 1655,
        "end_line": 1660
      },
      {
        "method_name": "extent_dalloc_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    bool committed, unsigned arena_ind)",
        "start_line": 1664,
        "end_line": 1666
      },
      {
        "method_name": "extent_dalloc_wrapper_try",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent)",
        "start_line": 1670,
        "end_line": 1700
      },
      {
        "method_name": "extent_dalloc_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent)",
        "start_line": 1704,
        "end_line": 1754
      },
      {
        "method_name": "extent_destroy_default_impl",
        "params": "(void *addr, size_t size)",
        "start_line": 1757,
        "end_line": 1761
      },
      {
        "method_name": "extent_destroy_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    bool committed, unsigned arena_ind)",
        "start_line": 1765,
        "end_line": 1767
      },
      {
        "method_name": "extent_destroy_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent)",
        "start_line": 1771,
        "end_line": 1797
      },
      {
        "method_name": "extent_commit_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 1801,
        "end_line": 1804
      },
      {
        "method_name": "extent_commit_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length, bool growing_retained)",
        "start_line": 1809,
        "end_line": 1825
      },
      {
        "method_name": "extent_commit_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length)",
        "start_line": 1830,
        "end_line": 1833
      },
      {
        "method_name": "extent_decommit_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 1837,
        "end_line": 1840
      },
      {
        "method_name": "extent_decommit_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length)",
        "start_line": 1845,
        "end_line": 1863
      },
      {
        "method_name": "extent_purge_lazy_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 1868,
        "end_line": 1876
      },
      {
        "method_name": "extent_purge_lazy_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length, bool growing_retained)",
        "start_line": 1882,
        "end_line": 1902
      },
      {
        "method_name": "extent_purge_lazy_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length)",
        "start_line": 1907,
        "end_line": 1910
      },
      {
        "method_name": "extent_purge_forced_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr,\n    size_t size, size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 1915,
        "end_line": 1923
      },
      {
        "method_name": "extent_purge_forced_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length, bool growing_retained)",
        "start_line": 1929,
        "end_line": 1948
      },
      {
        "method_name": "extent_purge_forced_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t offset,\n    size_t length)",
        "start_line": 1953,
        "end_line": 1956
      },
      {
        "method_name": "extent_split_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t size_a, size_t size_b, bool committed, unsigned arena_ind)",
        "start_line": 1961,
        "end_line": 1963
      },
      {
        "method_name": "extent_split_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t size_a,\n    szind_t szind_a, bool slab_a, size_t size_b, szind_t szind_b, bool slab_b,\n    bool growing_retained)",
        "start_line": 1977,
        "end_line": 2053
      },
      {
        "method_name": "extent_split_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *extent, size_t size_a,\n    szind_t szind_a, bool slab_a, size_t size_b, szind_t szind_b, bool slab_b)",
        "start_line": 2058,
        "end_line": 2061
      },
      {
        "method_name": "extent_merge_default_impl",
        "params": "(void *addr_a, void *addr_b)",
        "start_line": 2064,
        "end_line": 2073
      },
      {
        "method_name": "extent_merge_default",
        "params": "(extent_hooks_t *extent_hooks, void *addr_a, size_t size_a,\n    void *addr_b, size_t size_b, bool committed, unsigned arena_ind)",
        "start_line": 2078,
        "end_line": 2080
      },
      {
        "method_name": "extent_merge_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *a, extent_t *b,\n    bool growing_retained)",
        "start_line": 2086,
        "end_line": 2153
      },
      {
        "method_name": "extent_merge_wrapper",
        "params": "(tsdn_t *tsdn, arena_t *arena,\n    extent_hooks_t **r_extent_hooks, extent_t *a, extent_t *b)",
        "start_line": 2157,
        "end_line": 2159
      },
      {
        "method_name": "extent_boot",
        "params": "(void)",
        "start_line": 2162,
        "end_line": 2177
      }
    ],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 125,
        "end_line": 129
      },
      {
        "enum_name": "",
        "start_line": 915,
        "end_line": 932
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/extent_dss.c",
    "line": 270,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/spin.h"
    ],
    "methods": [
      {
        "method_name": "extent_dss_sbrk",
        "params": "(intptr_t increment)",
        "start_line": 42,
        "end_line": 49
      },
      {
        "method_name": "extent_dss_prec_get",
        "params": "(void)",
        "start_line": 52,
        "end_line": 60
      },
      {
        "method_name": "extent_dss_prec_set",
        "params": "(dss_prec_t dss_prec)",
        "start_line": 63,
        "end_line": 69
      },
      {
        "method_name": "extent_dss_extending_start",
        "params": "(void)",
        "start_line": 72,
        "end_line": 82
      },
      {
        "method_name": "extent_dss_extending_finish",
        "params": "(void)",
        "start_line": 85,
        "end_line": 89
      },
      {
        "method_name": "extent_dss_max_update",
        "params": "(void *new_addr)",
        "start_line": 92,
        "end_line": 107
      },
      {
        "method_name": "extent_alloc_dss",
        "params": "(tsdn_t *tsdn, arena_t *arena, void *new_addr, size_t size,\n    size_t alignment, bool *zero, bool *commit)",
        "start_line": 111,
        "end_line": 228
      },
      {
        "method_name": "extent_in_dss_helper",
        "params": "(void *addr, void *max)",
        "start_line": 231,
        "end_line": 234
      },
      {
        "method_name": "extent_in_dss",
        "params": "(void *addr)",
        "start_line": 237,
        "end_line": 242
      },
      {
        "method_name": "extent_dss_mergeable",
        "params": "(void *addr_a, void *addr_b)",
        "start_line": 245,
        "end_line": 258
      },
      {
        "method_name": "extent_dss_boot",
        "params": "(void)",
        "start_line": 261,
        "end_line": 268
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/extent_mmap.c",
    "line": 42,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/extent_mmap.h"
    ],
    "methods": [
      {
        "method_name": "extent_alloc_mmap",
        "params": "(void *new_addr, size_t size, size_t alignment, bool *zero,\n    bool *commit)",
        "start_line": 23,
        "end_line": 34
      },
      {
        "method_name": "extent_dalloc_mmap",
        "params": "(void *addr, size_t size)",
        "start_line": 37,
        "end_line": 42
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/hash.c",
    "line": 3,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/hooks.c",
    "line": 12,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/jemalloc.c",
    "line": 3335,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/atomic.h",
      "jemalloc/internal/ctl.h",
      "jemalloc/internal/extent_dss.h",
      "jemalloc/internal/extent_mmap.h",
      "jemalloc/internal/jemalloc_internal_types.h",
      "jemalloc/internal/log.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/rtree.h",
      "jemalloc/internal/size_classes.h",
      "jemalloc/internal/spin.h",
      "jemalloc/internal/sz.h",
      "jemalloc/internal/ticker.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "_init_init_lock",
        "params": "(void)",
        "start_line": 135,
        "end_line": 151
      },
      {
        "method_name": "UTRACE",
        "params": "(a, b, c)",
        "start_line": 170,
        "end_line": 180
      },
      {
        "method_name": "malloc_initialized",
        "params": "(void)",
        "start_line": 203,
        "end_line": 205
      },
      {
        "method_name": "malloc_init_a0",
        "params": "(void)",
        "start_line": 208,
        "end_line": 213
      },
      {
        "method_name": "malloc_init",
        "params": "(void)",
        "start_line": 216,
        "end_line": 221
      },
      {
        "method_name": "a0ialloc",
        "params": "(size_t size, bool zero, bool is_internal)",
        "start_line": 229,
        "end_line": 236
      },
      {
        "method_name": "a0idalloc",
        "params": "(void *ptr, bool is_internal)",
        "start_line": 239,
        "end_line": 241
      },
      {
        "method_name": "a0malloc",
        "params": "(size_t size)",
        "start_line": 244,
        "end_line": 246
      },
      {
        "method_name": "a0dalloc",
        "params": "(void *ptr)",
        "start_line": 249,
        "end_line": 251
      },
      {
        "method_name": "bootstrap_malloc",
        "params": "(size_t size)",
        "start_line": 260,
        "end_line": 266
      },
      {
        "method_name": "bootstrap_calloc",
        "params": "(size_t num, size_t size)",
        "start_line": 269,
        "end_line": 279
      },
      {
        "method_name": "bootstrap_free",
        "params": "(void *ptr)",
        "start_line": 282,
        "end_line": 288
      },
      {
        "method_name": "arena_set",
        "params": "(unsigned ind, arena_t *arena)",
        "start_line": 291,
        "end_line": 293
      },
      {
        "method_name": "narenas_total_set",
        "params": "(unsigned narenas)",
        "start_line": 296,
        "end_line": 298
      },
      {
        "method_name": "narenas_total_inc",
        "params": "(void)",
        "start_line": 301,
        "end_line": 303
      },
      {
        "method_name": "narenas_total_get",
        "params": "(void)",
        "start_line": 306,
        "end_line": 308
      },
      {
        "method_name": "arena_init_locked",
        "params": "(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks)",
        "start_line": 312,
        "end_line": 337
      },
      {
        "method_name": "arena_new_create_background_thread",
        "params": "(tsdn_t *tsdn, unsigned ind)",
        "start_line": 340,
        "end_line": 355
      },
      {
        "method_name": "arena_init",
        "params": "(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks)",
        "start_line": 358,
        "end_line": 368
      },
      {
        "method_name": "arena_bind",
        "params": "(tsd_t *tsd, unsigned ind, bool internal)",
        "start_line": 371,
        "end_line": 380
      },
      {
        "method_name": "arena_migrate",
        "params": "(tsd_t *tsd, unsigned oldind, unsigned newind)",
        "start_line": 383,
        "end_line": 391
      },
      {
        "method_name": "arena_unbind",
        "params": "(tsd_t *tsd, unsigned ind, bool internal)",
        "start_line": 394,
        "end_line": 405
      },
      {
        "method_name": "arena_tdata_get_hard",
        "params": "(tsd_t *tsd, unsigned ind)",
        "start_line": 408,
        "end_line": 481
      },
      {
        "method_name": "arena_choose_hard",
        "params": "(tsd_t *tsd, bool internal)",
        "start_line": 485,
        "end_line": 596
      },
      {
        "method_name": "iarena_cleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 599,
        "end_line": 606
      },
      {
        "method_name": "arena_cleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 609,
        "end_line": 616
      },
      {
        "method_name": "arenas_tdata_cleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 619,
        "end_line": 630
      },
      {
        "method_name": "stats_print_atexit",
        "params": "(void)",
        "start_line": 633,
        "end_line": 662
      },
      {
        "method_name": "check_entry_exit_locking",
        "params": "(tsdn_t *tsdn)",
        "start_line": 670,
        "end_line": 687
      },
      {
        "method_name": "jemalloc_secure_getenv",
        "params": "(const char *name)",
        "start_line": 698,
        "end_line": 709
      },
      {
        "method_name": "malloc_ncpus",
        "params": "(void)",
        "start_line": 712,
        "end_line": 737
      },
      {
        "method_name": "init_opt_stats_print_opts",
        "params": "(const char *v, size_t vlen)",
        "start_line": 740,
        "end_line": 762
      },
      {
        "method_name": "malloc_conf_next",
        "params": "(char const **opts_p, char const **k_p, size_t *klen_p,\n    char const **v_p, size_t *vlen_p)",
        "start_line": 766,
        "end_line": 837
      },
      {
        "method_name": "malloc_abort_invalid_conf",
        "params": "(void)",
        "start_line": 840,
        "end_line": 845
      },
      {
        "method_name": "malloc_conf_error",
        "params": "(const char *msg, const char *k, size_t klen, const char *v,\n    size_t vlen)",
        "start_line": 849,
        "end_line": 854
      },
      {
        "method_name": "malloc_slow_flag_init",
        "params": "(void)",
        "start_line": 857,
        "end_line": 869
      },
      {
        "method_name": "malloc_conf_init",
        "params": "(void)",
        "start_line": 872,
        "end_line": 1246
      },
      {
        "method_name": "malloc_init_hard_needed",
        "params": "(void)",
        "start_line": 1249,
        "end_line": 1272
      },
      {
        "method_name": "malloc_init_hard_a0_locked",
        "params": "()",
        "start_line": 1275,
        "end_line": 1332
      },
      {
        "method_name": "malloc_init_hard_a0",
        "params": "(void)",
        "start_line": 1335,
        "end_line": 1342
      },
      {
        "method_name": "malloc_init_hard_recursible",
        "params": "(void)",
        "start_line": 1346,
        "end_line": 1370
      },
      {
        "method_name": "malloc_narenas_default",
        "params": "(void)",
        "start_line": 1373,
        "end_line": 1384
      },
      {
        "method_name": "percpu_arena_as_initialized",
        "params": "(percpu_arena_mode_t mode)",
        "start_line": 1387,
        "end_line": 1396
      },
      {
        "method_name": "malloc_init_narenas",
        "params": "(void)",
        "start_line": 1399,
        "end_line": 1468
      },
      {
        "method_name": "malloc_init_percpu",
        "params": "(void)",
        "start_line": 1471,
        "end_line": 1473
      },
      {
        "method_name": "malloc_init_hard_finish",
        "params": "(void)",
        "start_line": 1476,
        "end_line": 1485
      },
      {
        "method_name": "malloc_init_hard_cleanup",
        "params": "(tsdn_t *tsdn, bool reentrancy_set)",
        "start_line": 1488,
        "end_line": 1497
      },
      {
        "method_name": "malloc_init_hard",
        "params": "(void)",
        "start_line": 1500,
        "end_line": 1573
      },
      {
        "method_name": "static_opts_init",
        "params": "(static_opts_t *static_opts)",
        "start_line": 1627,
        "end_line": 1637
      },
      {
        "method_name": "dynamic_opts_init",
        "params": "(dynamic_opts_t *dynamic_opts)",
        "start_line": 1660,
        "end_line": 1668
      },
      {
        "method_name": "imalloc_no_sample",
        "params": "(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd,\n    size_t size, size_t usize, szind_t ind)",
        "start_line": 1673,
        "end_line": 1711
      },
      {
        "method_name": "imalloc_sample",
        "params": "(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd,\n    size_t usize, szind_t ind)",
        "start_line": 1715,
        "end_line": 1742
      },
      {
        "method_name": "compute_size_with_overflow",
        "params": "(bool may_overflow, dynamic_opts_t *dopts,\n    size_t *size)",
        "start_line": 1750,
        "end_line": 1784
      },
      {
        "method_name": "imalloc_body",
        "params": "(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd)",
        "start_line": 1787,
        "end_line": 1981
      },
      {
        "method_name": "imalloc",
        "params": "(static_opts_t *sopts, dynamic_opts_t *dopts)",
        "start_line": 1985,
        "end_line": 2010
      },
      {
        "method_name": "je_malloc",
        "params": "(size_t size)",
        "start_line": 2019,
        "end_line": 2043
      },
      {
        "method_name": "je_posix_memalign",
        "params": "(void **memptr, size_t alignment, size_t size)",
        "start_line": 2047,
        "end_line": 2076
      },
      {
        "method_name": "je_aligned_alloc",
        "params": "(size_t alignment, size_t size)",
        "start_line": 2081,
        "end_line": 2112
      },
      {
        "method_name": "je_calloc",
        "params": "(size_t num, size_t size)",
        "start_line": 2117,
        "end_line": 2143
      },
      {
        "method_name": "irealloc_prof_sample",
        "params": "(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t usize,\n    prof_tctx_t *tctx)",
        "start_line": 2147,
        "end_line": 2164
      },
      {
        "method_name": "irealloc_prof",
        "params": "(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t usize,\n   alloc_ctx_t *alloc_ctx)",
        "start_line": 2168,
        "end_line": 2189
      },
      {
        "method_name": "ifree",
        "params": "(tsd_t *tsd, void *ptr, tcache_t *tcache, bool slow_path)",
        "start_line": 2192,
        "end_line": 2228
      },
      {
        "method_name": "isfree",
        "params": "(tsd_t *tsd, void *ptr, size_t usize, tcache_t *tcache, bool slow_path)",
        "start_line": 2231,
        "end_line": 2284
      },
      {
        "method_name": "je_realloc",
        "params": "(void *ptr, size_t size)",
        "start_line": 2289,
        "end_line": 2369
      },
      {
        "method_name": "je_free",
        "params": "(void *ptr)",
        "start_line": 2372,
        "end_line": 2405
      },
      {
        "method_name": "je_memalign",
        "params": "(size_t alignment, size_t size)",
        "start_line": 2419,
        "end_line": 2447
      },
      {
        "method_name": "je_valloc",
        "params": "(size_t size)",
        "start_line": 2454,
        "end_line": 2482
      },
      {
        "method_name": "je_mallocx",
        "params": "(size_t size, int flags)",
        "start_line": 2549,
        "end_line": 2592
      },
      {
        "method_name": "irallocx_prof_sample",
        "params": "(tsdn_t *tsdn, void *old_ptr, size_t old_usize,\n    size_t usize, size_t alignment, bool zero, tcache_t *tcache, arena_t *arena,\n    prof_tctx_t *tctx)",
        "start_line": 2597,
        "end_line": 2616
      },
      {
        "method_name": "irallocx_prof",
        "params": "(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t size,\n    size_t alignment, size_t *usize, bool zero, tcache_t *tcache,\n    arena_t *arena, alloc_ctx_t *alloc_ctx)",
        "start_line": 2621,
        "end_line": 2656
      },
      {
        "method_name": "je_rallocx",
        "params": "(void *ptr, size_t size, int flags)",
        "start_line": 2661,
        "end_line": 2750
      },
      {
        "method_name": "ixallocx_helper",
        "params": "(tsdn_t *tsdn, void *ptr, size_t old_usize, size_t size,\n    size_t extra, size_t alignment, bool zero)",
        "start_line": 2754,
        "end_line": 2763
      },
      {
        "method_name": "ixallocx_prof_sample",
        "params": "(tsdn_t *tsdn, void *ptr, size_t old_usize, size_t size,\n    size_t extra, size_t alignment, bool zero, prof_tctx_t *tctx)",
        "start_line": 2767,
        "end_line": 2777
      },
      {
        "method_name": "ixallocx_prof",
        "params": "(tsd_t *tsd, void *ptr, size_t old_usize, size_t size,\n    size_t extra, size_t alignment, bool zero, alloc_ctx_t *alloc_ctx)",
        "start_line": 2781,
        "end_line": 2826
      },
      {
        "method_name": "je_xallocx",
        "params": "(void *ptr, size_t size, size_t extra, int flags)",
        "start_line": 2829,
        "end_line": 2890
      },
      {
        "method_name": "je_sallocx",
        "params": "(const void *ptr, UNUSED int flags)",
        "start_line": 2894,
        "end_line": 2917
      },
      {
        "method_name": "je_dallocx",
        "params": "(void *ptr, int flags)",
        "start_line": 2920,
        "end_line": 2962
      },
      {
        "method_name": "inallocx",
        "params": "(tsdn_t *tsdn, size_t size, int flags)",
        "start_line": 2965,
        "end_line": 2976
      },
      {
        "method_name": "je_sdallocx",
        "params": "(void *ptr, size_t size, int flags)",
        "start_line": 2979,
        "end_line": 3024
      },
      {
        "method_name": "je_nallocx",
        "params": "(size_t size, int flags)",
        "start_line": 3028,
        "end_line": 3051
      },
      {
        "method_name": "je_mallctl",
        "params": "(const char *name, void *oldp, size_t *oldlenp, void *newp,\n    size_t newlen)",
        "start_line": 3055,
        "end_line": 3073
      },
      {
        "method_name": "je_mallctlnametomib",
        "params": "(const char *name, size_t *mibp, size_t *miblenp)",
        "start_line": 3076,
        "end_line": 3093
      },
      {
        "method_name": "je_mallctlbymib",
        "params": "(const size_t *mib, size_t miblen, void *oldp, size_t *oldlenp,\n  void *newp, size_t newlen)",
        "start_line": 3097,
        "end_line": 3114
      },
      {
        "method_name": "(*write_cb)",
        "params": "(void *, const char *), void *cbopaque,\n    const char *opts)",
        "start_line": 3118,
        "end_line": 3128
      },
      {
        "method_name": "je_malloc_usable_size",
        "params": "(JEMALLOC_USABLE_SIZE_CONST void *ptr)",
        "start_line": 3131,
        "end_line": 3156
      },
      {
        "method_name": "jemalloc_constructor",
        "params": "(void)",
        "start_line": 3183,
        "end_line": 3185
      },
      {
        "method_name": "(!malloc_initialized",
        "params": "())",
        "start_line": 3201,
        "end_line": 3203
      },
      {
        "method_name": "if",
        "params": "(have_background_thread)",
        "start_line": 3216,
        "end_line": 3218
      },
      {
        "method_name": "if",
        "params": "(have_background_thread)",
        "start_line": 3220,
        "end_line": 3222
      },
      {
        "method_name": "for",
        "params": "(i = 0; i \u003c 8; i++)",
        "start_line": 3224,
        "end_line": 3257
      },
      {
        "method_name": "(!malloc_initialized",
        "params": "())",
        "start_line": 3273,
        "end_line": 3275
      },
      {
        "method_name": "narenas_total_get",
        "params": "(); i \u003c narenas; i++)",
        "start_line": 3283,
        "end_line": 3289
      },
      {
        "method_name": "if",
        "params": "(have_background_thread)",
        "start_line": 3291,
        "end_line": 3293
      },
      {
        "method_name": "jemalloc_postfork_child",
        "params": "(void)",
        "start_line": 3300,
        "end_line": 3324
      },
      {
        "method_name": "get_defrag_hint",
        "params": "(void* ptr)",
        "start_line": 3332,
        "end_line": 3335
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 163,
        "end_line": 167
      },
      {
        "struct_name": "static_opts_s",
        "start_line": 1587,
        "end_line": 1624
      },
      {
        "struct_name": "dynamic_opts_s",
        "start_line": 1649,
        "end_line": 1657
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 91,
        "end_line": 96
      },
      {
        "enum_name": "",
        "start_line": 103,
        "end_line": 109
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/large.c",
    "line": 371,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/extent_mmap.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/rtree.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "large_malloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize, bool zero)",
        "start_line": 14,
        "end_line": 18
      },
      {
        "method_name": "large_palloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize, size_t alignment,\n    bool zero)",
        "start_line": 22,
        "end_line": 72
      },
      {
        "method_name": "large_dalloc_junk_impl",
        "params": "(void *ptr, size_t size)",
        "start_line": 75,
        "end_line": 77
      },
      {
        "method_name": "large_dalloc_maybe_junk_impl",
        "params": "(void *ptr, size_t size)",
        "start_line": 81,
        "end_line": 91
      },
      {
        "method_name": "large_ralloc_no_move_shrink",
        "params": "(tsdn_t *tsdn, extent_t *extent, size_t usize)",
        "start_line": 96,
        "end_line": 128
      },
      {
        "method_name": "large_ralloc_no_move_expand",
        "params": "(tsdn_t *tsdn, extent_t *extent, size_t usize,\n    bool zero)",
        "start_line": 132,
        "end_line": 216
      },
      {
        "method_name": "large_ralloc_no_move",
        "params": "(tsdn_t *tsdn, extent_t *extent, size_t usize_min,\n    size_t usize_max, bool zero)",
        "start_line": 220,
        "end_line": 261
      },
      {
        "method_name": "large_ralloc_move_helper",
        "params": "(tsdn_t *tsdn, arena_t *arena, size_t usize,\n    size_t alignment, bool zero)",
        "start_line": 265,
        "end_line": 270
      },
      {
        "method_name": "large_ralloc",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent, size_t usize,\n    size_t alignment, bool zero, tcache_t *tcache)",
        "start_line": 274,
        "end_line": 302
      },
      {
        "method_name": "large_dalloc_prep_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent,\n    bool junked_locked)",
        "start_line": 310,
        "end_line": 327
      },
      {
        "method_name": "large_dalloc_finish_impl",
        "params": "(tsdn_t *tsdn, arena_t *arena, extent_t *extent)",
        "start_line": 330,
        "end_line": 333
      },
      {
        "method_name": "large_dalloc_prep_junked_locked",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 336,
        "end_line": 338
      },
      {
        "method_name": "large_dalloc_finish",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 341,
        "end_line": 343
      },
      {
        "method_name": "large_dalloc",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 346,
        "end_line": 351
      },
      {
        "method_name": "large_salloc",
        "params": "(tsdn_t *tsdn, const extent_t *extent)",
        "start_line": 354,
        "end_line": 356
      },
      {
        "method_name": "large_prof_tctx_get",
        "params": "(tsdn_t *tsdn, const extent_t *extent)",
        "start_line": 359,
        "end_line": 361
      },
      {
        "method_name": "large_prof_tctx_set",
        "params": "(tsdn_t *tsdn, extent_t *extent, prof_tctx_t *tctx)",
        "start_line": 364,
        "end_line": 366
      },
      {
        "method_name": "large_prof_tctx_reset",
        "params": "(tsdn_t *tsdn, extent_t *extent)",
        "start_line": 369,
        "end_line": 371
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/log.c",
    "line": 78,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/log.h"
    ],
    "methods": [
      {
        "method_name": "log_var_extract_segment",
        "params": "(const char* segment_begin)",
        "start_line": 14,
        "end_line": 19
      },
      {
        "method_name": "log_var_matches_segment",
        "params": "(const char *segment_begin, const char *segment_end,\n    const char *log_var_begin, const char *log_var_end)",
        "start_line": 23,
        "end_line": 41
      },
      {
        "method_name": "log_var_update_state",
        "params": "(log_var_t *log_var)",
        "start_line": 44,
        "end_line": 78
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/malloc_io.c",
    "line": 676,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/util.h",
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "assert",
        "params": "(e)",
        "start_line": 25,
        "end_line": 30
      },
      {
        "method_name": "not_reached",
        "params": "()",
        "start_line": 32,
        "end_line": 38
      },
      {
        "method_name": "not_implemented",
        "params": "()",
        "start_line": 40,
        "end_line": 45
      },
      {
        "method_name": "assert_not_implemented",
        "params": "(e)",
        "start_line": 47,
        "end_line": 51
      },
      {
        "method_name": "wrtmessage",
        "params": "(void *cbopaque, const char *s)",
        "start_line": 72,
        "end_line": 74
      },
      {
        "method_name": "malloc_write",
        "params": "(const char *s)",
        "start_line": 83,
        "end_line": 89
      },
      {
        "method_name": "buferror",
        "params": "(int err, char *buf, size_t buflen)",
        "start_line": 96,
        "end_line": 111
      },
      {
        "method_name": "malloc_strtoumax",
        "params": "(const char *restrict nptr, char **restrict endptr, int base)",
        "start_line": 114,
        "end_line": 232
      },
      {
        "method_name": "u2s",
        "params": "(uintmax_t x, unsigned base, bool uppercase, char *s, size_t *slen_p)",
        "start_line": 235,
        "end_line": 274
      },
      {
        "method_name": "d2s",
        "params": "(intmax_t x, char sign, char *s, size_t *slen_p)",
        "start_line": 277,
        "end_line": 302
      },
      {
        "method_name": "o2s",
        "params": "(uintmax_t x, bool alt_form, char *s, size_t *slen_p)",
        "start_line": 305,
        "end_line": 313
      },
      {
        "method_name": "x2s",
        "params": "(uintmax_t x, bool alt_form, bool uppercase, char *s, size_t *slen_p)",
        "start_line": 316,
        "end_line": 324
      },
      {
        "method_name": "malloc_vsnprintf",
        "params": "(char *str, size_t size, const char *format, va_list ap)",
        "start_line": 327,
        "end_line": 607
      },
      {
        "method_name": "malloc_snprintf",
        "params": "(char *str, size_t size, const char *format, ...)",
        "start_line": 611,
        "end_line": 620
      },
      {
        "method_name": "(*write_cb)",
        "params": "(void *, const char *), void *cbopaque,\n    const char *format, va_list ap)",
        "start_line": 624,
        "end_line": 640
      },
      {
        "method_name": "(*write_cb)",
        "params": "(void *, const char *), void *cbopaque,\n    const char *format, ...)",
        "start_line": 649,
        "end_line": 655
      },
      {
        "method_name": "malloc_printf",
        "params": "(const char *format, ...)",
        "start_line": 660,
        "end_line": 666
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/mutex.c",
    "line": 224,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/spin.h"
    ],
    "methods": [
      {
        "method_name": "*(*start_routine)",
        "params": "(void *),\n    void *__restrict arg)",
        "start_line": 34,
        "end_line": 36
      },
      {
        "method_name": "malloc_mutex_lock_slow",
        "params": "(malloc_mutex_t *mutex)",
        "start_line": 47,
        "end_line": 101
      },
      {
        "method_name": "mutex_prof_data_init",
        "params": "(mutex_prof_data_t *data)",
        "start_line": 104,
        "end_line": 109
      },
      {
        "method_name": "malloc_mutex_prof_data_reset",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 112,
        "end_line": 115
      },
      {
        "method_name": "mutex_addr_comp",
        "params": "(const witness_t *witness1, void *mutex1,\n    const witness_t *witness2, void *mutex2)",
        "start_line": 119,
        "end_line": 131
      },
      {
        "method_name": "malloc_mutex_init",
        "params": "(malloc_mutex_t *mutex, const char *name,\n    witness_rank_t rank, malloc_mutex_lock_order_t lock_order)",
        "start_line": 135,
        "end_line": 183
      },
      {
        "method_name": "malloc_mutex_prefork",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 186,
        "end_line": 188
      },
      {
        "method_name": "malloc_mutex_postfork_parent",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 191,
        "end_line": 193
      },
      {
        "method_name": "malloc_mutex_postfork_child",
        "params": "(tsdn_t *tsdn, malloc_mutex_t *mutex)",
        "start_line": 196,
        "end_line": 209
      },
      {
        "method_name": "malloc_mutex_boot",
        "params": "(void)",
        "start_line": 212,
        "end_line": 224
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/mutex_pool.c",
    "line": 18,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/mutex_pool.h"
    ],
    "methods": [
      {
        "method_name": "mutex_pool_init",
        "params": "(mutex_pool_t *pool, const char *name, witness_rank_t rank)",
        "start_line": 10,
        "end_line": 18
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/nstime.c",
    "line": 170,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/nstime.h",
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "nstime_init",
        "params": "(nstime_t *time, uint64_t ns)",
        "start_line": 12,
        "end_line": 14
      },
      {
        "method_name": "nstime_init2",
        "params": "(nstime_t *time, uint64_t sec, uint64_t nsec)",
        "start_line": 17,
        "end_line": 19
      },
      {
        "method_name": "nstime_ns",
        "params": "(const nstime_t *time)",
        "start_line": 22,
        "end_line": 24
      },
      {
        "method_name": "nstime_msec",
        "params": "(const nstime_t *time)",
        "start_line": 27,
        "end_line": 29
      },
      {
        "method_name": "nstime_sec",
        "params": "(const nstime_t *time)",
        "start_line": 32,
        "end_line": 34
      },
      {
        "method_name": "nstime_nsec",
        "params": "(const nstime_t *time)",
        "start_line": 37,
        "end_line": 39
      },
      {
        "method_name": "nstime_copy",
        "params": "(nstime_t *time, const nstime_t *source)",
        "start_line": 42,
        "end_line": 44
      },
      {
        "method_name": "nstime_compare",
        "params": "(const nstime_t *a, const nstime_t *b)",
        "start_line": 47,
        "end_line": 49
      },
      {
        "method_name": "nstime_add",
        "params": "(nstime_t *time, const nstime_t *addend)",
        "start_line": 52,
        "end_line": 56
      },
      {
        "method_name": "nstime_iadd",
        "params": "(nstime_t *time, uint64_t addend)",
        "start_line": 59,
        "end_line": 63
      },
      {
        "method_name": "nstime_subtract",
        "params": "(nstime_t *time, const nstime_t *subtrahend)",
        "start_line": 66,
        "end_line": 70
      },
      {
        "method_name": "nstime_isubtract",
        "params": "(nstime_t *time, uint64_t subtrahend)",
        "start_line": 73,
        "end_line": 77
      },
      {
        "method_name": "nstime_imultiply",
        "params": "(nstime_t *time, uint64_t multiplier)",
        "start_line": 80,
        "end_line": 85
      },
      {
        "method_name": "nstime_idivide",
        "params": "(nstime_t *time, uint64_t divisor)",
        "start_line": 88,
        "end_line": 92
      },
      {
        "method_name": "nstime_divide",
        "params": "(const nstime_t *time, const nstime_t *divisor)",
        "start_line": 95,
        "end_line": 99
      },
      {
        "method_name": "nstime_get",
        "params": "(nstime_t *time)",
        "start_line": 104,
        "end_line": 112
      },
      {
        "method_name": "nstime_get",
        "params": "(nstime_t *time)",
        "start_line": 116,
        "end_line": 121
      },
      {
        "method_name": "nstime_get",
        "params": "(nstime_t *time)",
        "start_line": 125,
        "end_line": 130
      },
      {
        "method_name": "nstime_get",
        "params": "(nstime_t *time)",
        "start_line": 134,
        "end_line": 136
      },
      {
        "method_name": "nstime_get",
        "params": "(nstime_t *time)",
        "start_line": 140,
        "end_line": 145
      },
      {
        "method_name": "nstime_monotonic_impl",
        "params": "(void)",
        "start_line": 149,
        "end_line": 152
      },
      {
        "method_name": "nstime_update_impl",
        "params": "(nstime_t *time)",
        "start_line": 156,
        "end_line": 169
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/pages.c",
    "line": 606,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/pages.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/malloc_io.h",
      "sys/sysctl.h",
      "vm/vm_param.h"
    ],
    "methods": [
      {
        "method_name": "os_pages_map",
        "params": "(void *addr, size_t size, size_t alignment, bool *commit)",
        "start_line": 54,
        "end_line": 96
      },
      {
        "method_name": "os_pages_trim",
        "params": "(void *addr, size_t alloc_size, size_t leadsize, size_t size,\n    bool *commit)",
        "start_line": 100,
        "end_line": 125
      },
      {
        "method_name": "os_pages_unmap",
        "params": "(void *addr, size_t size)",
        "start_line": 128,
        "end_line": 152
      },
      {
        "method_name": "pages_map_slow",
        "params": "(size_t size, size_t alignment, bool *commit)",
        "start_line": 155,
        "end_line": 176
      },
      {
        "method_name": "pages_map",
        "params": "(void *addr, size_t size, size_t alignment, bool *commit)",
        "start_line": 179,
        "end_line": 209
      },
      {
        "method_name": "pages_unmap",
        "params": "(void *addr, size_t size)",
        "start_line": 212,
        "end_line": 217
      },
      {
        "method_name": "pages_commit_impl",
        "params": "(void *addr, size_t size, bool commit)",
        "start_line": 220,
        "end_line": 250
      },
      {
        "method_name": "pages_commit",
        "params": "(void *addr, size_t size)",
        "start_line": 253,
        "end_line": 255
      },
      {
        "method_name": "pages_decommit",
        "params": "(void *addr, size_t size)",
        "start_line": 258,
        "end_line": 260
      },
      {
        "method_name": "pages_purge_lazy",
        "params": "(void *addr, size_t size)",
        "start_line": 263,
        "end_line": 295
      },
      {
        "method_name": "pages_purge_forced",
        "params": "(void *addr, size_t size)",
        "start_line": 298,
        "end_line": 315
      },
      {
        "method_name": "pages_huge_impl",
        "params": "(void *addr, size_t size, bool aligned)",
        "start_line": 318,
        "end_line": 328
      },
      {
        "method_name": "pages_huge",
        "params": "(void *addr, size_t size)",
        "start_line": 331,
        "end_line": 333
      },
      {
        "method_name": "pages_huge_unaligned",
        "params": "(void *addr, size_t size)",
        "start_line": 336,
        "end_line": 338
      },
      {
        "method_name": "pages_nohuge_impl",
        "params": "(void *addr, size_t size, bool aligned)",
        "start_line": 341,
        "end_line": 352
      },
      {
        "method_name": "pages_nohuge",
        "params": "(void *addr, size_t size)",
        "start_line": 355,
        "end_line": 357
      },
      {
        "method_name": "pages_nohuge_unaligned",
        "params": "(void *addr, size_t size)",
        "start_line": 360,
        "end_line": 362
      },
      {
        "method_name": "pages_dontdump",
        "params": "(void *addr, size_t size)",
        "start_line": 365,
        "end_line": 373
      },
      {
        "method_name": "pages_dodump",
        "params": "(void *addr, size_t size)",
        "start_line": 376,
        "end_line": 384
      },
      {
        "method_name": "os_page_detect",
        "params": "(void)",
        "start_line": 388,
        "end_line": 402
      },
      {
        "method_name": "os_overcommits_sysctl",
        "params": "(void)",
        "start_line": 406,
        "end_line": 426
      },
      {
        "method_name": "os_overcommits_proc",
        "params": "(void)",
        "start_line": 436,
        "end_line": 493
      },
      {
        "method_name": "pages_set_thp_state",
        "params": "(void *ptr, size_t size)",
        "start_line": 497,
        "end_line": 513
      },
      {
        "method_name": "init_thp_state",
        "params": "(void)",
        "start_line": 516,
        "end_line": 559
      },
      {
        "method_name": "pages_boot",
        "params": "(void)",
        "start_line": 562,
        "end_line": 606
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/prng.c",
    "line": 3,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/prof.c",
    "line": 2473,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/ckh.h",
      "jemalloc/internal/hash.h",
      "jemalloc/internal/malloc_io.h",
      "jemalloc/internal/mutex.h",
      "libunwind.h",
      "unwind.h"
    ],
    "methods": [
      {
        "method_name": "prof_tctx_comp",
        "params": "(const prof_tctx_t *a, const prof_tctx_t *b)",
        "start_line": 152,
        "end_line": 169
      },
      {
        "method_name": "prof_gctx_comp",
        "params": "(const prof_gctx_t *a, const prof_gctx_t *b)",
        "start_line": 175,
        "end_line": 184
      },
      {
        "method_name": "prof_tdata_comp",
        "params": "(const prof_tdata_t *a, const prof_tdata_t *b)",
        "start_line": 190,
        "end_line": 203
      },
      {
        "method_name": "prof_alloc_rollback",
        "params": "(tsd_t *tsd, prof_tctx_t *tctx, bool updated)",
        "start_line": 211,
        "end_line": 238
      },
      {
        "method_name": "prof_malloc_sample_object",
        "params": "(tsdn_t *tsdn, const void *ptr, size_t usize,\n    prof_tctx_t *tctx)",
        "start_line": 242,
        "end_line": 254
      },
      {
        "method_name": "prof_free_sampled_object",
        "params": "(tsd_t *tsd, size_t usize, prof_tctx_t *tctx)",
        "start_line": 257,
        "end_line": 269
      },
      {
        "method_name": "bt_init",
        "params": "(prof_bt_t *bt, void **vec)",
        "start_line": 272,
        "end_line": 277
      },
      {
        "method_name": "prof_enter",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata)",
        "start_line": 280,
        "end_line": 290
      },
      {
        "method_name": "prof_leave",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata)",
        "start_line": 293,
        "end_line": 316
      },
      {
        "method_name": "prof_backtrace",
        "params": "(prof_bt_t *bt)",
        "start_line": 320,
        "end_line": 332
      },
      {
        "method_name": "prof_unwind_init_callback",
        "params": "(struct _Unwind_Context *context, void *arg)",
        "start_line": 335,
        "end_line": 339
      },
      {
        "method_name": "prof_unwind_callback",
        "params": "(struct _Unwind_Context *context, void *arg)",
        "start_line": 342,
        "end_line": 359
      },
      {
        "method_name": "prof_backtrace",
        "params": "(prof_bt_t *bt)",
        "start_line": 362,
        "end_line": 368
      },
      {
        "method_name": "prof_backtrace",
        "params": "(prof_bt_t *bt)",
        "start_line": 371,
        "end_line": 531
      },
      {
        "method_name": "prof_backtrace",
        "params": "(prof_bt_t *bt)",
        "start_line": 534,
        "end_line": 537
      },
      {
        "method_name": "prof_gctx_mutex_choose",
        "params": "(void)",
        "start_line": 541,
        "end_line": 545
      },
      {
        "method_name": "prof_tdata_mutex_choose",
        "params": "(uint64_t thr_uid)",
        "start_line": 548,
        "end_line": 550
      },
      {
        "method_name": "prof_gctx_create",
        "params": "(tsdn_t *tsdn, prof_bt_t *bt)",
        "start_line": 553,
        "end_line": 576
      },
      {
        "method_name": "prof_gctx_try_destroy",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata_self, prof_gctx_t *gctx,\n    prof_tdata_t *tdata)",
        "start_line": 580,
        "end_line": 611
      },
      {
        "method_name": "prof_tctx_should_destroy",
        "params": "(tsdn_t *tsdn, prof_tctx_t *tctx)",
        "start_line": 614,
        "end_line": 627
      },
      {
        "method_name": "prof_gctx_should_destroy",
        "params": "(prof_gctx_t *gctx)",
        "start_line": 630,
        "end_line": 641
      },
      {
        "method_name": "prof_tctx_destroy",
        "params": "(tsd_t *tsd, prof_tctx_t *tctx)",
        "start_line": 644,
        "end_line": 717
      },
      {
        "method_name": "prof_lookup_global",
        "params": "(tsd_t *tsd, prof_bt_t *bt, prof_tdata_t *tdata,\n    void **p_btkey, prof_gctx_t **p_gctx, bool *p_new_gctx)",
        "start_line": 721,
        "end_line": 782
      },
      {
        "method_name": "prof_lookup",
        "params": "(tsd_t *tsd, prof_bt_t *bt)",
        "start_line": 785,
        "end_line": 856
      },
      {
        "method_name": "prof_sample_threshold_update",
        "params": "(prof_tdata_t *tdata)",
        "start_line": 872,
        "end_line": 910
      },
      {
        "method_name": "prof_tdata_count_iter",
        "params": "(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,\n    void *arg)",
        "start_line": 915,
        "end_line": 921
      },
      {
        "method_name": "prof_tdata_count",
        "params": "(void)",
        "start_line": 924,
        "end_line": 935
      },
      {
        "method_name": "prof_bt_count",
        "params": "(void)",
        "start_line": 938,
        "end_line": 954
      },
      {
        "method_name": "prof_dump_open_impl",
        "params": "(bool propagate_err, const char *filename)",
        "start_line": 958,
        "end_line": 971
      },
      {
        "method_name": "prof_dump_flush",
        "params": "(bool propagate_err)",
        "start_line": 975,
        "end_line": 995
      },
      {
        "method_name": "prof_dump_close",
        "params": "(bool propagate_err)",
        "start_line": 998,
        "end_line": 1007
      },
      {
        "method_name": "prof_dump_write",
        "params": "(bool propagate_err, const char *s)",
        "start_line": 1010,
        "end_line": 1038
      },
      {
        "method_name": "prof_dump_printf",
        "params": "(bool propagate_err, const char *format, ...)",
        "start_line": 1042,
        "end_line": 1053
      },
      {
        "method_name": "prof_tctx_merge_tdata",
        "params": "(tsdn_t *tsdn, prof_tctx_t *tctx, prof_tdata_t *tdata)",
        "start_line": 1056,
        "end_line": 1084
      },
      {
        "method_name": "prof_tctx_merge_gctx",
        "params": "(tsdn_t *tsdn, prof_tctx_t *tctx, prof_gctx_t *gctx)",
        "start_line": 1087,
        "end_line": 1096
      },
      {
        "method_name": "prof_tctx_merge_iter",
        "params": "(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *arg)",
        "start_line": 1099,
        "end_line": 1117
      },
      {
        "method_name": "prof_tctx_dump_iter",
        "params": "(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *opaque)",
        "start_line": 1125,
        "end_line": 1150
      },
      {
        "method_name": "prof_tctx_finish_iter",
        "params": "(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *arg)",
        "start_line": 1153,
        "end_line": 1176
      },
      {
        "method_name": "prof_dump_gctx_prep",
        "params": "(tsdn_t *tsdn, prof_gctx_t *gctx, prof_gctx_tree_t *gctxs)",
        "start_line": 1179,
        "end_line": 1195
      },
      {
        "method_name": "prof_gctx_merge_iter",
        "params": "(prof_gctx_tree_t *gctxs, prof_gctx_t *gctx, void *opaque)",
        "start_line": 1203,
        "end_line": 1216
      },
      {
        "method_name": "prof_gctx_finish",
        "params": "(tsd_t *tsd, prof_gctx_tree_t *gctxs)",
        "start_line": 1219,
        "end_line": 1262
      },
      {
        "method_name": "prof_tdata_merge_iter",
        "params": "(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,\n    void *opaque)",
        "start_line": 1271,
        "end_line": 1302
      },
      {
        "method_name": "prof_tdata_dump_iter",
        "params": "(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,\n    void *arg)",
        "start_line": 1306,
        "end_line": 1323
      },
      {
        "method_name": "prof_dump_header_impl",
        "params": "(tsdn_t *tsdn, bool propagate_err,\n    const prof_cnt_t *cnt_all)",
        "start_line": 1327,
        "end_line": 1343
      },
      {
        "method_name": "prof_dump_gctx",
        "params": "(tsdn_t *tsdn, bool propagate_err, prof_gctx_t *gctx,\n    const prof_bt_t *bt, prof_gctx_tree_t *gctxs)",
        "start_line": 1348,
        "end_line": 1399
      },
      {
        "method_name": "prof_open_maps",
        "params": "(const char *format, ...)",
        "start_line": 1404,
        "end_line": 1423
      },
      {
        "method_name": "prof_getpid",
        "params": "(void)",
        "start_line": 1427,
        "end_line": 1433
      },
      {
        "method_name": "prof_dump_maps",
        "params": "(bool propagate_err)",
        "start_line": 1436,
        "end_line": 1489
      },
      {
        "method_name": "prof_leakcheck",
        "params": "(const prof_cnt_t *cnt_all, size_t leak_ngctx,\n    const char *filename)",
        "start_line": 1497,
        "end_line": 1524
      },
      {
        "method_name": "prof_gctx_dump_iter",
        "params": "(prof_gctx_tree_t *gctxs, prof_gctx_t *gctx, void *opaque)",
        "start_line": 1532,
        "end_line": 1549
      },
      {
        "method_name": "prof_dump_prep",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata,\n    struct prof_tdata_merge_iter_arg_s *prof_tdata_merge_iter_arg,\n    struct prof_gctx_merge_iter_arg_s *prof_gctx_merge_iter_arg,\n    prof_gctx_tree_t *gctxs)",
        "start_line": 1555,
        "end_line": 1591
      },
      {
        "method_name": "prof_dump_file",
        "params": "(tsd_t *tsd, bool propagate_err, const char *filename,\n    bool leakcheck, prof_tdata_t *tdata,\n    struct prof_tdata_merge_iter_arg_s *prof_tdata_merge_iter_arg,\n    struct prof_gctx_merge_iter_arg_s *prof_gctx_merge_iter_arg,\n    struct prof_gctx_dump_iter_arg_s *prof_gctx_dump_iter_arg,\n    prof_gctx_tree_t *gctxs)",
        "start_line": 1599,
        "end_line": 1632
      },
      {
        "method_name": "prof_dump",
        "params": "(tsd_t *tsd, bool propagate_err, const char *filename,\n    bool leakcheck)",
        "start_line": 1636,
        "end_line": 1671
      },
      {
        "method_name": "prof_cnt_all",
        "params": "(uint64_t *curobjs, uint64_t *curbytes, uint64_t *accumobjs,\n    uint64_t *accumbytes)",
        "start_line": 1676,
        "end_line": 1717
      },
      {
        "method_name": "prof_dump_filename",
        "params": "(char *filename, char v, uint64_t vseq)",
        "start_line": 1723,
        "end_line": 1738
      },
      {
        "method_name": "prof_fdump",
        "params": "(void)",
        "start_line": 1741,
        "end_line": 1759
      },
      {
        "method_name": "prof_accum_init",
        "params": "(tsdn_t *tsdn, prof_accum_t *prof_accum)",
        "start_line": 1762,
        "end_line": 1775
      },
      {
        "method_name": "prof_idump",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1778,
        "end_line": 1809
      },
      {
        "method_name": "prof_mdump",
        "params": "(tsd_t *tsd, const char *filename)",
        "start_line": 1812,
        "end_line": 1832
      },
      {
        "method_name": "prof_gdump",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1835,
        "end_line": 1866
      },
      {
        "method_name": "prof_bt_hash",
        "params": "(const void *key, size_t r_hash[2])",
        "start_line": 1869,
        "end_line": 1875
      },
      {
        "method_name": "prof_bt_keycomp",
        "params": "(const void *k1, const void *k2)",
        "start_line": 1878,
        "end_line": 1888
      },
      {
        "method_name": "prof_thr_uid_alloc",
        "params": "(tsdn_t *tsdn)",
        "start_line": 1891,
        "end_line": 1900
      },
      {
        "method_name": "prof_tdata_init_impl",
        "params": "(tsd_t *tsd, uint64_t thr_uid, uint64_t thr_discrim,\n    char *thread_name, bool active)",
        "start_line": 1904,
        "end_line": 1946
      },
      {
        "method_name": "prof_tdata_init",
        "params": "(tsd_t *tsd)",
        "start_line": 1949,
        "end_line": 1952
      },
      {
        "method_name": "prof_tdata_should_destroy_unlocked",
        "params": "(prof_tdata_t *tdata, bool even_if_attached)",
        "start_line": 1955,
        "end_line": 1963
      },
      {
        "method_name": "prof_tdata_should_destroy",
        "params": "(tsdn_t *tsdn, prof_tdata_t *tdata,\n    bool even_if_attached)",
        "start_line": 1967,
        "end_line": 1971
      },
      {
        "method_name": "prof_tdata_destroy_locked",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata,\n    bool even_if_attached)",
        "start_line": 1975,
        "end_line": 1988
      },
      {
        "method_name": "prof_tdata_destroy",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata, bool even_if_attached)",
        "start_line": 1991,
        "end_line": 1995
      },
      {
        "method_name": "prof_tdata_detach",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata)",
        "start_line": 1998,
        "end_line": 2020
      },
      {
        "method_name": "prof_tdata_reinit",
        "params": "(tsd_t *tsd, prof_tdata_t *tdata)",
        "start_line": 2023,
        "end_line": 2033
      },
      {
        "method_name": "prof_tdata_expire",
        "params": "(tsdn_t *tsdn, prof_tdata_t *tdata)",
        "start_line": 2036,
        "end_line": 2050
      },
      {
        "method_name": "prof_tdata_reset_iter",
        "params": "(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,\n    void *arg)",
        "start_line": 2054,
        "end_line": 2058
      },
      {
        "method_name": "prof_reset",
        "params": "(tsd_t *tsd, size_t lg_sample)",
        "start_line": 2061,
        "end_line": 2085
      },
      {
        "method_name": "prof_tdata_cleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 2088,
        "end_line": 2099
      },
      {
        "method_name": "prof_active_get",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2102,
        "end_line": 2109
      },
      {
        "method_name": "prof_active_set",
        "params": "(tsdn_t *tsdn, bool active)",
        "start_line": 2112,
        "end_line": 2120
      },
      {
        "method_name": "prof_thread_name_get",
        "params": "(tsd_t *tsd)",
        "start_line": 2123,
        "end_line": 2131
      },
      {
        "method_name": "prof_thread_name_alloc",
        "params": "(tsdn_t *tsdn, const char *thread_name)",
        "start_line": 2134,
        "end_line": 2154
      },
      {
        "method_name": "prof_thread_name_set",
        "params": "(tsd_t *tsd, const char *thread_name)",
        "start_line": 2157,
        "end_line": 2192
      },
      {
        "method_name": "prof_thread_active_get",
        "params": "(tsd_t *tsd)",
        "start_line": 2195,
        "end_line": 2203
      },
      {
        "method_name": "prof_thread_active_set",
        "params": "(tsd_t *tsd, bool active)",
        "start_line": 2206,
        "end_line": 2215
      },
      {
        "method_name": "prof_thread_active_init_get",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2218,
        "end_line": 2225
      },
      {
        "method_name": "prof_thread_active_init_set",
        "params": "(tsdn_t *tsdn, bool active_init)",
        "start_line": 2228,
        "end_line": 2236
      },
      {
        "method_name": "prof_gdump_get",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2239,
        "end_line": 2246
      },
      {
        "method_name": "prof_gdump_set",
        "params": "(tsdn_t *tsdn, bool gdump)",
        "start_line": 2249,
        "end_line": 2257
      },
      {
        "method_name": "prof_boot0",
        "params": "(void)",
        "start_line": 2260,
        "end_line": 2265
      },
      {
        "method_name": "prof_boot1",
        "params": "(void)",
        "start_line": 2268,
        "end_line": 2289
      },
      {
        "method_name": "prof_boot2",
        "params": "(tsd_t *tsd)",
        "start_line": 2292,
        "end_line": 2398
      },
      {
        "method_name": "prof_prefork0",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2401,
        "end_line": 2415
      },
      {
        "method_name": "prof_prefork1",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2418,
        "end_line": 2426
      },
      {
        "method_name": "prof_postfork_parent",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2429,
        "end_line": 2449
      },
      {
        "method_name": "prof_postfork_child",
        "params": "(tsdn_t *tsdn)",
        "start_line": 2452,
        "end_line": 2471
      }
    ],
    "structs": [
      {
        "struct_name": "prof_tctx_dump_iter_arg_s",
        "start_line": 1119,
        "end_line": 1122
      },
      {
        "struct_name": "prof_gctx_merge_iter_arg_s",
        "start_line": 1197,
        "end_line": 1200
      },
      {
        "struct_name": "prof_tdata_merge_iter_arg_s",
        "start_line": 1264,
        "end_line": 1267
      },
      {
        "struct_name": "prof_gctx_dump_iter_arg_s",
        "start_line": 1526,
        "end_line": 1529
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/rtree.c",
    "line": 320,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/mutex.h"
    ],
    "methods": [
      {
        "method_name": "rtree_new",
        "params": "(rtree_t *rtree, bool zeroed)",
        "start_line": 13,
        "end_line": 28
      },
      {
        "method_name": "rtree_node_alloc_impl",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, size_t nelms)",
        "start_line": 31,
        "end_line": 34
      },
      {
        "method_name": "rtree_node_dalloc_impl",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *node)",
        "start_line": 38,
        "end_line": 41
      },
      {
        "method_name": "rtree_leaf_alloc_impl",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, size_t nelms)",
        "start_line": 46,
        "end_line": 49
      },
      {
        "method_name": "rtree_leaf_dalloc_impl",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *leaf)",
        "start_line": 53,
        "end_line": 56
      },
      {
        "method_name": "rtree_delete_subtree",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *subtree,\n    unsigned level)",
        "start_line": 64,
        "end_line": 90
      },
      {
        "method_name": "rtree_delete",
        "params": "(tsdn_t *tsdn, rtree_t *rtree)",
        "start_line": 94,
        "end_line": 98
      },
      {
        "method_name": "rtree_node_init",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, unsigned level,\n    atomic_p_t *elmp)",
        "start_line": 103,
        "end_line": 126
      },
      {
        "method_name": "rtree_leaf_init",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, atomic_p_t *elmp)",
        "start_line": 129,
        "end_line": 152
      },
      {
        "method_name": "rtree_node_valid",
        "params": "(rtree_node_elm_t *node)",
        "start_line": 155,
        "end_line": 157
      },
      {
        "method_name": "rtree_leaf_valid",
        "params": "(rtree_leaf_elm_t *leaf)",
        "start_line": 160,
        "end_line": 162
      },
      {
        "method_name": "rtree_child_node_tryread",
        "params": "(rtree_node_elm_t *elm, bool dependent)",
        "start_line": 165,
        "end_line": 178
      },
      {
        "method_name": "rtree_child_node_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *elm,\n    unsigned level, bool dependent)",
        "start_line": 182,
        "end_line": 191
      },
      {
        "method_name": "rtree_child_leaf_tryread",
        "params": "(rtree_node_elm_t *elm, bool dependent)",
        "start_line": 194,
        "end_line": 207
      },
      {
        "method_name": "rtree_child_leaf_read",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *elm,\n    unsigned level, bool dependent)",
        "start_line": 211,
        "end_line": 220
      },
      {
        "method_name": "rtree_leaf_elm_lookup_hard",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,\n    uintptr_t key, bool dependent, bool init_missing)",
        "start_line": 224,
        "end_line": 306
      },
      {
        "method_name": "rtree_ctx_data_init",
        "params": "(rtree_ctx_t *ctx)",
        "start_line": 309,
        "end_line": 320
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/stats.c",
    "line": 1286,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/ctl.h",
      "jemalloc/internal/emitter.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/mutex_prof.h"
    ],
    "methods": [
      {
        "method_name": "CTL_GET",
        "params": "(n, v, t)",
        "start_line": 23,
        "end_line": 26
      },
      {
        "method_name": "CTL_M2_GET",
        "params": "(n, i, v, t)",
        "start_line": 28,
        "end_line": 35
      },
      {
        "method_name": "CTL_M2_M4_GET",
        "params": "(n, i, j, v, t)",
        "start_line": 37,
        "end_line": 45
      },
      {
        "method_name": "get_rate_str",
        "params": "(uint64_t dividend, uint64_t divisor, char str[6])",
        "start_line": 57,
        "end_line": 78
      },
      {
        "method_name": "gen_mutex_ctl_str",
        "params": "(char *str, size_t buf_len, const char *prefix,\n    const char *mutex, const char *counter)",
        "start_line": 83,
        "end_line": 85
      },
      {
        "method_name": "mutex_stats_init_cols",
        "params": "(emitter_row_t *row, const char *table_name,\n    emitter_col_t *name,\n    emitter_col_t col_uint64_t[mutex_prof_num_uint64_t_counters],\n    emitter_col_t col_uint32_t[mutex_prof_num_uint32_t_counters])",
        "start_line": 91,
        "end_line": 119
      },
      {
        "method_name": "mutex_stats_read_global",
        "params": "(const char *name, emitter_col_t *col_name,\n    emitter_col_t col_uint64_t[mutex_prof_num_uint64_t_counters],\n    emitter_col_t col_uint32_t[mutex_prof_num_uint32_t_counters])",
        "start_line": 124,
        "end_line": 142
      },
      {
        "method_name": "mutex_stats_read_arena",
        "params": "(unsigned arena_ind, mutex_prof_arena_ind_t mutex_ind,\n    const char *name, emitter_col_t *col_name,\n    emitter_col_t col_uint64_t[mutex_prof_num_uint64_t_counters],\n    emitter_col_t col_uint32_t[mutex_prof_num_uint32_t_counters])",
        "start_line": 148,
        "end_line": 167
      },
      {
        "method_name": "mutex_stats_read_arena_bin",
        "params": "(unsigned arena_ind, unsigned bin_ind,\n    emitter_col_t col_uint64_t[mutex_prof_num_uint64_t_counters],\n    emitter_col_t col_uint32_t[mutex_prof_num_uint32_t_counters])",
        "start_line": 172,
        "end_line": 189
      },
      {
        "method_name": "mutex_stats_emit",
        "params": "(emitter_t *emitter, emitter_row_t *row,\n    emitter_col_t col_uint64_t[mutex_prof_num_uint64_t_counters],\n    emitter_col_t col_uint32_t[mutex_prof_num_uint32_t_counters])",
        "start_line": 195,
        "end_line": 216
      },
      {
        "method_name": "stats_arena_bins_print",
        "params": "(emitter_t *emitter, bool mutex, unsigned i)",
        "start_line": 219,
        "end_line": 408
      },
      {
        "method_name": "stats_arena_lextents_print",
        "params": "(emitter_t *emitter, unsigned i)",
        "start_line": 411,
        "end_line": 495
      },
      {
        "method_name": "stats_arena_mutexes_print",
        "params": "(emitter_t *emitter, unsigned arena_ind)",
        "start_line": 498,
        "end_line": 520
      },
      {
        "method_name": "stats_arena_print",
        "params": "(emitter_t *emitter, unsigned i, bool bins, bool large,\n    bool mutex)",
        "start_line": 524,
        "end_line": 823
      },
      {
        "method_name": "stats_general_print",
        "params": "(emitter_t *emitter)",
        "start_line": 826,
        "end_line": 1062
      },
      {
        "method_name": "stats_print_helper",
        "params": "(emitter_t *emitter, bool merged, bool destroyed,\n    bool unmerged, bool bins, bool large, bool mutex)",
        "start_line": 1066,
        "end_line": 1222
      },
      {
        "method_name": "(*write_cb)",
        "params": "(void *, const char *), void *cbopaque,\n    const char *opts)",
        "start_line": 1226,
        "end_line": 1286
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/sz.c",
    "line": 107,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/sz.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/tcache.c",
    "line": 717,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/size_classes.h"
    ],
    "methods": [
      {
        "method_name": "tcache_salloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 35,
        "end_line": 37
      },
      {
        "method_name": "tcache_event_hard",
        "params": "(tsd_t *tsd, tcache_t *tcache)",
        "start_line": 40,
        "end_line": 85
      },
      {
        "method_name": "tcache_alloc_small_hard",
        "params": "(tsdn_t *tsdn, arena_t *arena, tcache_t *tcache,\n    cache_bin_t *tbin, szind_t binind, bool *tcache_success)",
        "start_line": 89,
        "end_line": 101
      },
      {
        "method_name": "tcache_bin_flush_small",
        "params": "(tsd_t *tsd, tcache_t *tcache, cache_bin_t *tbin,\n    szind_t binind, unsigned rem)",
        "start_line": 105,
        "end_line": 186
      },
      {
        "method_name": "tcache_bin_flush_large",
        "params": "(tsd_t *tsd, cache_bin_t *tbin, szind_t binind,\n    unsigned rem, tcache_t *tcache)",
        "start_line": 190,
        "end_line": 284
      },
      {
        "method_name": "tcache_arena_associate",
        "params": "(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena)",
        "start_line": 287,
        "end_line": 305
      },
      {
        "method_name": "tcache_arena_dissociate",
        "params": "(tsdn_t *tsdn, tcache_t *tcache)",
        "start_line": 308,
        "end_line": 332
      },
      {
        "method_name": "tcache_arena_reassociate",
        "params": "(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena)",
        "start_line": 335,
        "end_line": 338
      },
      {
        "method_name": "tsd_tcache_enabled_data_init",
        "params": "(tsd_t *tsd)",
        "start_line": 341,
        "end_line": 352
      },
      {
        "method_name": "tcache_init",
        "params": "(tsd_t *tsd, tcache_t *tcache, void *avail_stack)",
        "start_line": 356,
        "end_line": 386
      },
      {
        "method_name": "tsd_tcache_data_init",
        "params": "(tsd_t *tsd)",
        "start_line": 390,
        "end_line": 428
      },
      {
        "method_name": "tcache_create_explicit",
        "params": "(tsd_t *tsd)",
        "start_line": 432,
        "end_line": 455
      },
      {
        "method_name": "tcache_flush_cache",
        "params": "(tsd_t *tsd, tcache_t *tcache)",
        "start_line": 458,
        "end_line": 483
      },
      {
        "method_name": "tcache_flush",
        "params": "(tsd_t *tsd)",
        "start_line": 486,
        "end_line": 489
      },
      {
        "method_name": "tcache_destroy",
        "params": "(tsd_t *tsd, tcache_t *tcache, bool tsd_tcache)",
        "start_line": 492,
        "end_line": 506
      },
      {
        "method_name": "tcache_cleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 510,
        "end_line": 526
      },
      {
        "method_name": "tcache_stats_merge",
        "params": "(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena)",
        "start_line": 529,
        "end_line": 550
      },
      {
        "method_name": "tcaches_create_prep",
        "params": "(tsd_t *tsd)",
        "start_line": 553,
        "end_line": 576
      },
      {
        "method_name": "tcaches_create",
        "params": "(tsd_t *tsd, unsigned *r_ind)",
        "start_line": 579,
        "end_line": 614
      },
      {
        "method_name": "tcaches_elm_remove",
        "params": "(tsd_t *tsd, tcaches_t *elm)",
        "start_line": 617,
        "end_line": 626
      },
      {
        "method_name": "tcaches_flush",
        "params": "(tsd_t *tsd, unsigned ind)",
        "start_line": 629,
        "end_line": 636
      },
      {
        "method_name": "tcaches_destroy",
        "params": "(tsd_t *tsd, unsigned ind)",
        "start_line": 639,
        "end_line": 649
      },
      {
        "method_name": "tcache_boot",
        "params": "(tsdn_t *tsdn)",
        "start_line": 652,
        "end_line": 696
      },
      {
        "method_name": "tcache_prefork",
        "params": "(tsdn_t *tsdn)",
        "start_line": 699,
        "end_line": 703
      },
      {
        "method_name": "tcache_postfork_parent",
        "params": "(tsdn_t *tsdn)",
        "start_line": 706,
        "end_line": 710
      },
      {
        "method_name": "tcache_postfork_child",
        "params": "(tsdn_t *tsdn)",
        "start_line": 713,
        "end_line": 717
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/ticker.c",
    "line": 3,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/tsd.c",
    "line": 351,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/mutex.h",
      "jemalloc/internal/rtree.h"
    ],
    "methods": [
      {
        "method_name": "tsd_slow_update",
        "params": "(tsd_t *tsd)",
        "start_line": 55,
        "end_line": 64
      },
      {
        "method_name": "tsd_data_init",
        "params": "(tsd_t *tsd)",
        "start_line": 67,
        "end_line": 85
      },
      {
        "method_name": "assert_tsd_data_cleanup_done",
        "params": "(tsd_t *tsd)",
        "start_line": 88,
        "end_line": 96
      },
      {
        "method_name": "tsd_data_init_nocleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 99,
        "end_line": 114
      },
      {
        "method_name": "tsd_fetch_slow",
        "params": "(tsd_t *tsd, bool minimal)",
        "start_line": 117,
        "end_line": 157
      },
      {
        "method_name": "malloc_tsd_malloc",
        "params": "(size_t size)",
        "start_line": 160,
        "end_line": 162
      },
      {
        "method_name": "malloc_tsd_dalloc",
        "params": "(void *wrapper)",
        "start_line": 165,
        "end_line": 167
      },
      {
        "method_name": "_malloc_thread_cleanup",
        "params": "(void)",
        "start_line": 174,
        "end_line": 193
      },
      {
        "method_name": "(*f)",
        "params": "(void))",
        "start_line": 197,
        "end_line": 201
      },
      {
        "method_name": "tsd_do_data_cleanup",
        "params": "(tsd_t *tsd)",
        "start_line": 204,
        "end_line": 211
      },
      {
        "method_name": "tsd_cleanup",
        "params": "(void *arg)",
        "start_line": 214,
        "end_line": 256
      },
      {
        "method_name": "malloc_tsd_boot0",
        "params": "(void)",
        "start_line": 259,
        "end_line": 269
      },
      {
        "method_name": "malloc_tsd_boot1",
        "params": "(void)",
        "start_line": 272,
        "end_line": 278
      },
      {
        "method_name": "_tls_callback",
        "params": "(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)",
        "start_line": 282,
        "end_line": 296
      },
      {
        "method_name": "tsd_init_check_recursion",
        "params": "(tsd_init_head_t *head, tsd_init_block_t *block)",
        "start_line": 325,
        "end_line": 343
      },
      {
        "method_name": "tsd_init_finish",
        "params": "(tsd_init_head_t *head, tsd_init_block_t *block)",
        "start_line": 346,
        "end_line": 350
      }
    ],
    "structs": [
      {
        "struct_name": "tsd_init_head_s",
        "start_line": 34,
        "end_line": 37
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/witness.c",
    "line": 100,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h",
      "jemalloc/internal/malloc_io.h"
    ],
    "methods": [
      {
        "method_name": "witness_init",
        "params": "(witness_t *witness, const char *name, witness_rank_t rank,\n    witness_comp_t *comp, void *opaque)",
        "start_line": 10,
        "end_line": 15
      },
      {
        "method_name": "witness_lock_error_impl",
        "params": "(const witness_list_t *witnesses,\n    const witness_t *witness)",
        "start_line": 19,
        "end_line": 28
      },
      {
        "method_name": "witness_owner_error_impl",
        "params": "(const witness_t *witness)",
        "start_line": 32,
        "end_line": 36
      },
      {
        "method_name": "witness_not_owner_error_impl",
        "params": "(const witness_t *witness)",
        "start_line": 41,
        "end_line": 45
      },
      {
        "method_name": "witness_depth_error_impl",
        "params": "(const witness_list_t *witnesses,\n    witness_rank_t rank_inclusive, unsigned depth)",
        "start_line": 51,
        "end_line": 61
      },
      {
        "method_name": "witnesses_cleanup",
        "params": "(witness_tsd_t *witness_tsd)",
        "start_line": 66,
        "end_line": 70
      },
      {
        "method_name": "witness_prefork",
        "params": "(witness_tsd_t *witness_tsd)",
        "start_line": 73,
        "end_line": 78
      },
      {
        "method_name": "witness_postfork_parent",
        "params": "(witness_tsd_t *witness_tsd)",
        "start_line": 81,
        "end_line": 86
      },
      {
        "method_name": "witness_postfork_child",
        "params": "(witness_tsd_t *witness_tsd)",
        "start_line": 89,
        "end_line": 100
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/src/zone.c",
    "line": 469,
    "headers": [
      "jemalloc/internal/jemalloc_preamble.h",
      "jemalloc/internal/jemalloc_internal_includes.h",
      "jemalloc/internal/assert.h"
    ],
    "methods": [
      {
        "method_name": "zone_size",
        "params": "(malloc_zone_t *zone, const void *ptr)",
        "start_line": 133,
        "end_line": 144
      },
      {
        "method_name": "zone_malloc",
        "params": "(malloc_zone_t *zone, size_t size)",
        "start_line": 147,
        "end_line": 149
      },
      {
        "method_name": "zone_calloc",
        "params": "(malloc_zone_t *zone, size_t num, size_t size)",
        "start_line": 152,
        "end_line": 154
      },
      {
        "method_name": "zone_valloc",
        "params": "(malloc_zone_t *zone, size_t size)",
        "start_line": 157,
        "end_line": 163
      },
      {
        "method_name": "zone_free",
        "params": "(malloc_zone_t *zone, void *ptr)",
        "start_line": 166,
        "end_line": 173
      },
      {
        "method_name": "zone_realloc",
        "params": "(malloc_zone_t *zone, void *ptr, size_t size)",
        "start_line": 176,
        "end_line": 182
      },
      {
        "method_name": "zone_memalign",
        "params": "(malloc_zone_t *zone, size_t alignment, size_t size)",
        "start_line": 185,
        "end_line": 191
      },
      {
        "method_name": "zone_free_definite_size",
        "params": "(malloc_zone_t *zone, void *ptr, size_t size)",
        "start_line": 194,
        "end_line": 205
      },
      {
        "method_name": "zone_destroy",
        "params": "(malloc_zone_t *zone)",
        "start_line": 208,
        "end_line": 211
      },
      {
        "method_name": "zone_batch_malloc",
        "params": "(struct _malloc_zone_t *zone, size_t size, void **results,\n    unsigned num_requested)",
        "start_line": 215,
        "end_line": 225
      },
      {
        "method_name": "zone_batch_free",
        "params": "(struct _malloc_zone_t *zone, void **to_be_freed,\n    unsigned num_to_be_freed)",
        "start_line": 229,
        "end_line": 236
      },
      {
        "method_name": "zone_pressure_relief",
        "params": "(struct _malloc_zone_t *zone, size_t goal)",
        "start_line": 239,
        "end_line": 241
      },
      {
        "method_name": "zone_good_size",
        "params": "(malloc_zone_t *zone, size_t size)",
        "start_line": 244,
        "end_line": 249
      },
      {
        "method_name": "zone_enumerator",
        "params": "(task_t task, void *data, unsigned type_mask,\n    vm_address_t zone_address, memory_reader_t reader,\n    vm_range_recorder_t recorder)",
        "start_line": 254,
        "end_line": 256
      },
      {
        "method_name": "zone_check",
        "params": "(malloc_zone_t *zone)",
        "start_line": 259,
        "end_line": 261
      },
      {
        "method_name": "zone_print",
        "params": "(malloc_zone_t *zone, boolean_t verbose)",
        "start_line": 264,
        "end_line": 265
      },
      {
        "method_name": "zone_log",
        "params": "(malloc_zone_t *zone, void *address)",
        "start_line": 268,
        "end_line": 269
      },
      {
        "method_name": "zone_force_lock",
        "params": "(malloc_zone_t *zone)",
        "start_line": 272,
        "end_line": 282
      },
      {
        "method_name": "zone_force_unlock",
        "params": "(malloc_zone_t *zone)",
        "start_line": 285,
        "end_line": 307
      },
      {
        "method_name": "zone_statistics",
        "params": "(malloc_zone_t *zone, malloc_statistics_t *stats)",
        "start_line": 310,
        "end_line": 316
      },
      {
        "method_name": "zone_locked",
        "params": "(malloc_zone_t *zone)",
        "start_line": 319,
        "end_line": 322
      },
      {
        "method_name": "zone_reinit_lock",
        "params": "(malloc_zone_t *zone)",
        "start_line": 325,
        "end_line": 329
      },
      {
        "method_name": "zone_init",
        "params": "(void)",
        "start_line": 332,
        "end_line": 367
      },
      {
        "method_name": "zone_default_get",
        "params": "(void)",
        "start_line": 370,
        "end_line": 397
      },
      {
        "method_name": "zone_promote",
        "params": "(void)",
        "start_line": 401,
        "end_line": 434
      },
      {
        "method_name": "zone_register",
        "params": "(void)",
        "start_line": 438,
        "end_line": 469
      }
    ],
    "structs": [
      {
        "struct_name": "_malloc_zone_t",
        "start_line": 14,
        "end_line": 32
      },
      {
        "struct_name": "",
        "start_line": 34,
        "end_line": 37
      },
      {
        "struct_name": "malloc_statistics_t",
        "start_line": 39,
        "end_line": 44
      },
      {
        "struct_name": "malloc_introspection_t",
        "start_line": 50,
        "end_line": 69
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-alti.h",
    "line": 186,
    "headers": [],
    "methods": [
      {
        "method_name": "vec_recursion",
        "params": "(vector unsigned int a,\n\t\t\t\t\t\tvector unsigned int b,\n\t\t\t\t\t\tvector unsigned int c,\n\t\t\t\t\t\tvector unsigned int d)",
        "start_line": 67,
        "end_line": 92
      },
      {
        "method_name": "gen_rand_all",
        "params": "(sfmt_t *ctx)",
        "start_line": 98,
        "end_line": 116
      },
      {
        "method_name": "gen_rand_array",
        "params": "(sfmt_t *ctx, w128_t *array, int size)",
        "start_line": 125,
        "end_line": 160
      },
      {
        "method_name": "swap",
        "params": "(w128_t *array, int size)",
        "start_line": 176,
        "end_line": 183
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params.h",
    "line": 132,
    "headers": [
      "test/SFMT-params607.h",
      "test/SFMT-params1279.h",
      "test/SFMT-params2281.h",
      "test/SFMT-params4253.h",
      "test/SFMT-params11213.h",
      "test/SFMT-params19937.h",
      "test/SFMT-params44497.h",
      "test/SFMT-params86243.h",
      "test/SFMT-params132049.h",
      "test/SFMT-params216091.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params11213.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params1279.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params132049.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params19937.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params216091.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params2281.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params4253.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params44497.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params607.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-params86243.h",
    "line": 81,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT-sse2.h",
    "line": 157,
    "headers": [],
    "methods": [
      {
        "method_name": "mm_recursion",
        "params": "(__m128i *a, __m128i *b,\n\t\t\t\t   __m128i c, __m128i d, __m128i mask)",
        "start_line": 64,
        "end_line": 78
      },
      {
        "method_name": "gen_rand_all",
        "params": "(sfmt_t *ctx)",
        "start_line": 84,
        "end_line": 105
      },
      {
        "method_name": "gen_rand_array",
        "params": "(sfmt_t *ctx, w128_t *array, int size)",
        "start_line": 114,
        "end_line": 155
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/SFMT.h",
    "line": 146,
    "headers": [],
    "methods": [
      {
        "method_name": "to_real1",
        "params": "(uint32_t v)",
        "start_line": 86,
        "end_line": 89
      },
      {
        "method_name": "genrand_real1",
        "params": "(sfmt_t *ctx)",
        "start_line": 92,
        "end_line": 94
      },
      {
        "method_name": "to_real2",
        "params": "(uint32_t v)",
        "start_line": 97,
        "end_line": 100
      },
      {
        "method_name": "genrand_real2",
        "params": "(sfmt_t *ctx)",
        "start_line": 103,
        "end_line": 105
      },
      {
        "method_name": "to_real3",
        "params": "(uint32_t v)",
        "start_line": 108,
        "end_line": 111
      },
      {
        "method_name": "genrand_real3",
        "params": "(sfmt_t *ctx)",
        "start_line": 114,
        "end_line": 116
      },
      {
        "method_name": "to_res53",
        "params": "(uint64_t v)",
        "start_line": 120,
        "end_line": 122
      },
      {
        "method_name": "to_res53_mix",
        "params": "(uint32_t x, uint32_t y)",
        "start_line": 126,
        "end_line": 128
      },
      {
        "method_name": "genrand_res53",
        "params": "(sfmt_t *ctx)",
        "start_line": 132,
        "end_line": 134
      },
      {
        "method_name": "genrand_res53_mix",
        "params": "(sfmt_t *ctx)",
        "start_line": 139,
        "end_line": 145
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/btalloc.h",
    "line": 30,
    "headers": [],
    "methods": [
      {
        "method_name": "btalloc_##n",
        "params": "(size_t size, unsigned bits)",
        "start_line": 11,
        "end_line": 30
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/extent_hooks.h",
    "line": 289,
    "headers": [],
    "methods": [
      {
        "method_name": "extent_alloc_hook",
        "params": "(extent_hooks_t *extent_hooks, void *new_addr, size_t size,\n    size_t alignment, bool *zero, bool *commit, unsigned arena_ind)",
        "start_line": 82,
        "end_line": 101
      },
      {
        "method_name": "extent_dalloc_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    bool committed, unsigned arena_ind)",
        "start_line": 105,
        "end_line": 122
      },
      {
        "method_name": "extent_destroy_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    bool committed, unsigned arena_ind)",
        "start_line": 126,
        "end_line": 140
      },
      {
        "method_name": "extent_commit_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 144,
        "end_line": 162
      },
      {
        "method_name": "extent_decommit_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 166,
        "end_line": 184
      },
      {
        "method_name": "extent_purge_lazy_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 188,
        "end_line": 207
      },
      {
        "method_name": "extent_purge_forced_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t offset, size_t length, unsigned arena_ind)",
        "start_line": 211,
        "end_line": 230
      },
      {
        "method_name": "extent_split_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    size_t size_a, size_t size_b, bool committed, unsigned arena_ind)",
        "start_line": 234,
        "end_line": 254
      },
      {
        "method_name": "extent_merge_hook",
        "params": "(extent_hooks_t *extent_hooks, void *addr_a, size_t size_a,\n    void *addr_b, size_t size_b, bool committed, unsigned arena_ind)",
        "start_line": 258,
        "end_line": 280
      },
      {
        "method_name": "extent_hooks_prep",
        "params": "(void)",
        "start_line": 283,
        "end_line": 289
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/math.h",
    "line": 306,
    "headers": [],
    "methods": [
      {
        "method_name": "ln_gamma",
        "params": "(double x)",
        "start_line": 10,
        "end_line": 33
      },
      {
        "method_name": "i_gamma",
        "params": "(double x, double p, double ln_gamma_p)",
        "start_line": 45,
        "end_line": 116
      },
      {
        "method_name": "pt_norm",
        "params": "(double p)",
        "start_line": 129,
        "end_line": 200
      },
      {
        "method_name": "pt_chi2",
        "params": "(double p, double df, double ln_gamma_df_2)",
        "start_line": 217,
        "end_line": 296
      },
      {
        "method_name": "pt_gamma",
        "params": "(double p, double shape, double scale, double ln_gamma_shape)",
        "start_line": 304,
        "end_line": 306
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/mq.h",
    "line": 107,
    "headers": [],
    "methods": [
      {
        "method_name": "a_prefix##init",
        "params": "(a_mq_type *mq)",
        "start_line": 38,
        "end_line": 46
      },
      {
        "method_name": "a_prefix##fini",
        "params": "(a_mq_type *mq)",
        "start_line": 48,
        "end_line": 50
      },
      {
        "method_name": "a_prefix##count",
        "params": "(a_mq_type *mq)",
        "start_line": 52,
        "end_line": 59
      },
      {
        "method_name": "a_prefix##tryget",
        "params": "(a_mq_type *mq)",
        "start_line": 61,
        "end_line": 72
      },
      {
        "method_name": "a_prefix##get",
        "params": "(a_mq_type *mq)",
        "start_line": 74,
        "end_line": 98
      },
      {
        "method_name": "a_prefix##put",
        "params": "(a_mq_type *mq, a_mq_msg_type *msg)",
        "start_line": 100,
        "end_line": 107
      }
    ],
    "structs": [
      {
        "struct_name": "mq_msg_s",
        "start_line": 9,
        "end_line": 12
      },
      {
        "struct_name": "",
        "start_line": 32,
        "end_line": 36
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/mtx.h",
    "line": 23,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 8,
        "end_line": 18
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/test.h",
    "line": 338,
    "headers": [],
    "methods": [
      {
        "method_name": "assert_cmp",
        "params": "(t, a, b, cmp, neg_cmp, pri, ...)",
        "start_line": 3,
        "end_line": 18
      },
      {
        "method_name": "assert_b_eq",
        "params": "(a, b, ...)",
        "start_line": 213,
        "end_line": 228
      },
      {
        "method_name": "assert_b_ne",
        "params": "(a, b, ...)",
        "start_line": 229,
        "end_line": 244
      },
      {
        "method_name": "assert_str_eq",
        "params": "(a, b, ...)",
        "start_line": 248,
        "end_line": 260
      },
      {
        "method_name": "assert_str_ne",
        "params": "(a, b, ...)",
        "start_line": 261,
        "end_line": 273
      },
      {
        "method_name": "assert_not_reached",
        "params": "(...)",
        "start_line": 275,
        "end_line": 283
      },
      {
        "method_name": "f",
        "params": "(void)",
        "start_line": 301,
        "end_line": 308
      },
      {
        "method_name": "test_skip_if",
        "params": "(e)",
        "start_line": 319,
        "end_line": 325
      }
    ],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 289,
        "end_line": 295
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/thd.h",
    "line": 9,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/include/test/timer.h",
    "line": 11,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 3,
        "end_line": 6
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/MALLOCX_ARENA.c",
    "line": 66,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 14,
        "end_line": 45
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_MALLOCX_ARENA)",
        "start_line": 47,
        "end_line": 59
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 63,
        "end_line": 66
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/aligned_alloc.c",
    "line": 133,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "purge",
        "params": "(void)",
        "start_line": 11,
        "end_line": 14
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_alignment_errors)",
        "start_line": 16,
        "end_line": 34
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_oom_errors)",
        "start_line": 37,
        "end_line": 78
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_alignment_and_size)",
        "start_line": 81,
        "end_line": 124
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 128,
        "end_line": 133
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/allocated.c",
    "line": 124,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 12,
        "end_line": 100
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_main_thread)",
        "start_line": 102,
        "end_line": 104
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_subthread)",
        "start_line": 107,
        "end_line": 112
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 116,
        "end_line": 124
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/extent.c",
    "line": 248,
    "headers": [
      "test/jemalloc_test.h",
      "test/extent_hooks.h"
    ],
    "methods": [
      {
        "method_name": "check_background_thread_enabled",
        "params": "(void)",
        "start_line": 6,
        "end_line": 15
      },
      {
        "method_name": "test_extent_body",
        "params": "(unsigned arena_ind)",
        "start_line": 18,
        "end_line": 99
      },
      {
        "method_name": "test_manual_hook_auto_arena",
        "params": "(void)",
        "start_line": 102,
        "end_line": 136
      },
      {
        "method_name": "test_manual_hook_body",
        "params": "(void)",
        "start_line": 139,
        "end_line": 206
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_extent_manual_hook)",
        "start_line": 208,
        "end_line": 222
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_extent_auto_hook)",
        "start_line": 225,
        "end_line": 240
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 244,
        "end_line": 248
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/mallocx.c",
    "line": 228,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "get_nsizes_impl",
        "params": "(const char *cmd)",
        "start_line": 4,
        "end_line": 13
      },
      {
        "method_name": "get_nlarge",
        "params": "(void)",
        "start_line": 16,
        "end_line": 18
      },
      {
        "method_name": "get_size_impl",
        "params": "(const char *cmd, size_t ind)",
        "start_line": 21,
        "end_line": 36
      },
      {
        "method_name": "get_large_size",
        "params": "(size_t ind)",
        "start_line": 39,
        "end_line": 41
      },
      {
        "method_name": "purge",
        "params": "(void)",
        "start_line": 49,
        "end_line": 52
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_overflow)",
        "start_line": 54,
        "end_line": 71
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_oom)",
        "start_line": 74,
        "end_line": 113
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_basic)",
        "start_line": 116,
        "end_line": 150
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_alignment_and_size)",
        "start_line": 153,
        "end_line": 218
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 222,
        "end_line": 228
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/overflow.c",
    "line": 46,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_overflow)",
        "start_line": 3,
        "end_line": 39
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 43,
        "end_line": 46
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/posix_memalign.c",
    "line": 127,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "purge",
        "params": "(void)",
        "start_line": 11,
        "end_line": 14
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_alignment_errors)",
        "start_line": 16,
        "end_line": 32
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_oom_errors)",
        "start_line": 35,
        "end_line": 70
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_alignment_and_size)",
        "start_line": 73,
        "end_line": 118
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 122,
        "end_line": 127
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/rallocx.c",
    "line": 245,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "get_nsizes_impl",
        "params": "(const char *cmd)",
        "start_line": 4,
        "end_line": 13
      },
      {
        "method_name": "get_nlarge",
        "params": "(void)",
        "start_line": 16,
        "end_line": 18
      },
      {
        "method_name": "get_size_impl",
        "params": "(const char *cmd, size_t ind)",
        "start_line": 21,
        "end_line": 36
      },
      {
        "method_name": "get_large_size",
        "params": "(size_t ind)",
        "start_line": 39,
        "end_line": 41
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_grow_and_shrink)",
        "start_line": 43,
        "end_line": 84
      },
      {
        "method_name": "validate_fill",
        "params": "(const void *p, uint8_t c, size_t offset, size_t len)",
        "start_line": 88,
        "end_line": 104
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_zero)",
        "start_line": 106,
        "end_line": 147
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_align)",
        "start_line": 150,
        "end_line": 171
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_lg_align_and_zero)",
        "start_line": 174,
        "end_line": 208
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_overflow)",
        "start_line": 211,
        "end_line": 234
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 238,
        "end_line": 245
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/sdallocx.c",
    "line": 55,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_basic)",
        "start_line": 6,
        "end_line": 9
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_alignment_and_size)",
        "start_line": 12,
        "end_line": 47
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 51,
        "end_line": 55
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/thread_arena.c",
    "line": 86,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 6,
        "end_line": 38
      },
      {
        "method_name": "mallctl_failure",
        "params": "(int err)",
        "start_line": 41,
        "end_line": 46
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_thread_arena)",
        "start_line": 48,
        "end_line": 79
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 83,
        "end_line": 86
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/thread_tcache_enabled.c",
    "line": 87,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 4,
        "end_line": 63
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_main_thread)",
        "start_line": 65,
        "end_line": 67
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_subthread)",
        "start_line": 70,
        "end_line": 75
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 79,
        "end_line": 87
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/integration/xallocx.c",
    "line": 384,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "arena_ind",
        "params": "(void)",
        "start_line": 9,
        "end_line": 19
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_same_size)",
        "start_line": 21,
        "end_line": 33
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_extra_no_move)",
        "start_line": 36,
        "end_line": 48
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_no_move_fail)",
        "start_line": 51,
        "end_line": 63
      },
      {
        "method_name": "get_nsizes_impl",
        "params": "(const char *cmd)",
        "start_line": 67,
        "end_line": 76
      },
      {
        "method_name": "get_nsmall",
        "params": "(void)",
        "start_line": 79,
        "end_line": 81
      },
      {
        "method_name": "get_nlarge",
        "params": "(void)",
        "start_line": 84,
        "end_line": 86
      },
      {
        "method_name": "get_size_impl",
        "params": "(const char *cmd, size_t ind)",
        "start_line": 89,
        "end_line": 104
      },
      {
        "method_name": "get_small_size",
        "params": "(size_t ind)",
        "start_line": 107,
        "end_line": 109
      },
      {
        "method_name": "get_large_size",
        "params": "(size_t ind)",
        "start_line": 112,
        "end_line": 114
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_size)",
        "start_line": 116,
        "end_line": 142
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_size_extra_overflow)",
        "start_line": 145,
        "end_line": 173
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_extra_small)",
        "start_line": 176,
        "end_line": 204
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_extra_large)",
        "start_line": 207,
        "end_line": 273
      },
      {
        "method_name": "print_filled_extents",
        "params": "(const void *p, uint8_t c, size_t len)",
        "start_line": 277,
        "end_line": 293
      },
      {
        "method_name": "validate_fill",
        "params": "(const void *p, uint8_t c, size_t offset, size_t len)",
        "start_line": 296,
        "end_line": 312
      },
      {
        "method_name": "test_zero",
        "params": "(size_t szmin, size_t szmax)",
        "start_line": 315,
        "end_line": 360
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_zero_large)",
        "start_line": 362,
        "end_line": 370
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 374,
        "end_line": 384
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/SFMT.c",
    "line": 719,
    "headers": [
      "test/jemalloc_test.h",
      "test/SFMT-params.h",
      "test/SFMT-alti.h",
      "test/SFMT-sse2.h"
    ],
    "methods": [
      {
        "method_name": "idxof",
        "params": "(int i)",
        "start_line": 145,
        "end_line": 147
      },
      {
        "method_name": "idxof",
        "params": "(int i)",
        "start_line": 149,
        "end_line": 151
      },
      {
        "method_name": "rshift128",
        "params": "(w128_t *out, w128_t const *in, int shift)",
        "start_line": 163,
        "end_line": 176
      },
      {
        "method_name": "rshift128",
        "params": "(w128_t *out, w128_t const *in, int shift)",
        "start_line": 178,
        "end_line": 191
      },
      {
        "method_name": "lshift128",
        "params": "(w128_t *out, w128_t const *in, int shift)",
        "start_line": 202,
        "end_line": 215
      },
      {
        "method_name": "lshift128",
        "params": "(w128_t *out, w128_t const *in, int shift)",
        "start_line": 217,
        "end_line": 230
      },
      {
        "method_name": "do_recursion",
        "params": "(w128_t *r, w128_t *a, w128_t *b, w128_t *c,\n\t\t\t\tw128_t *d)",
        "start_line": 245,
        "end_line": 259
      },
      {
        "method_name": "do_recursion",
        "params": "(w128_t *r, w128_t *a, w128_t *b, w128_t *c,\n\t\t\t\tw128_t *d)",
        "start_line": 262,
        "end_line": 276
      },
      {
        "method_name": "gen_rand_all",
        "params": "(sfmt_t *ctx)",
        "start_line": 285,
        "end_line": 303
      },
      {
        "method_name": "gen_rand_array",
        "params": "(sfmt_t *ctx, w128_t *array, int size)",
        "start_line": 312,
        "end_line": 342
      },
      {
        "method_name": "swap",
        "params": "(w128_t *array, int size)",
        "start_line": 346,
        "end_line": 358
      },
      {
        "method_name": "func1",
        "params": "(uint32_t x)",
        "start_line": 366,
        "end_line": 368
      },
      {
        "method_name": "func2",
        "params": "(uint32_t x)",
        "start_line": 376,
        "end_line": 378
      },
      {
        "method_name": "period_certification",
        "params": "(sfmt_t *ctx)",
        "start_line": 383,
        "end_line": 409
      },
      {
        "method_name": "*get_idstring",
        "params": "(void)",
        "start_line": 419,
        "end_line": 421
      },
      {
        "method_name": "get_min_array_size32",
        "params": "(void)",
        "start_line": 428,
        "end_line": 430
      },
      {
        "method_name": "get_min_array_size64",
        "params": "(void)",
        "start_line": 437,
        "end_line": 439
      },
      {
        "method_name": "gen_rand32",
        "params": "(sfmt_t *ctx)",
        "start_line": 447,
        "end_line": 458
      },
      {
        "method_name": "gen_rand32_range",
        "params": "(sfmt_t *ctx, uint32_t limit)",
        "start_line": 461,
        "end_line": 473
      },
      {
        "method_name": "gen_rand64",
        "params": "(sfmt_t *ctx)",
        "start_line": 482,
        "end_line": 508
      },
      {
        "method_name": "gen_rand64_range",
        "params": "(sfmt_t *ctx, uint64_t limit)",
        "start_line": 511,
        "end_line": 523
      },
      {
        "method_name": "fill_array32",
        "params": "(sfmt_t *ctx, uint32_t *array, int size)",
        "start_line": 551,
        "end_line": 559
      },
      {
        "method_name": "fill_array64",
        "params": "(sfmt_t *ctx, uint64_t *array, int size)",
        "start_line": 587,
        "end_line": 599
      },
      {
        "method_name": "*init_gen_rand",
        "params": "(uint32_t seed)",
        "start_line": 607,
        "end_line": 630
      },
      {
        "method_name": "*init_by_array",
        "params": "(uint32_t *init_key, int key_length)",
        "start_line": 638,
        "end_line": 712
      },
      {
        "method_name": "fini_gen_rand",
        "params": "(sfmt_t *ctx)",
        "start_line": 714,
        "end_line": 719
      }
    ],
    "structs": [
      {
        "struct_name": "W128_T",
        "start_line": 91,
        "end_line": 93
      },
      {
        "struct_name": "sfmt_s",
        "start_line": 99,
        "end_line": 107
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/btalloc.c",
    "line": 6,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "btalloc",
        "params": "(size_t size, unsigned bits)",
        "start_line": 4,
        "end_line": 6
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/btalloc_0.c",
    "line": 3,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/btalloc_1.c",
    "line": 3,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/math.c",
    "line": 2,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/mq.c",
    "line": 27,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "mq_nanosleep",
        "params": "(unsigned ns)",
        "start_line": 8,
        "end_line": 27
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/mtx.c",
    "line": 68,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "mtx_init",
        "params": "(mtx_t *mtx)",
        "start_line": 8,
        "end_line": 32
      },
      {
        "method_name": "mtx_fini",
        "params": "(mtx_t *mtx)",
        "start_line": 35,
        "end_line": 42
      },
      {
        "method_name": "mtx_lock",
        "params": "(mtx_t *mtx)",
        "start_line": 45,
        "end_line": 55
      },
      {
        "method_name": "mtx_unlock",
        "params": "(mtx_t *mtx)",
        "start_line": 58,
        "end_line": 68
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/test.c",
    "line": 217,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "reentrancy_t_str",
        "params": "(reentrancy_t r)",
        "start_line": 24,
        "end_line": 35
      },
      {
        "method_name": "(**hook)",
        "params": "())",
        "start_line": 38,
        "end_line": 47
      },
      {
        "method_name": "libc_reentrancy_hook",
        "params": "()",
        "start_line": 50,
        "end_line": 52
      },
      {
        "method_name": "arena_new_reentrancy_hook",
        "params": "()",
        "start_line": 55,
        "end_line": 57
      },
      {
        "method_name": "test_is_reentrant",
        "params": "()",
        "start_line": 61,
        "end_line": 63
      },
      {
        "method_name": "test_skip",
        "params": "(const char *format, ...)",
        "start_line": 67,
        "end_line": 75
      },
      {
        "method_name": "test_fail",
        "params": "(const char *format, ...)",
        "start_line": 79,
        "end_line": 87
      },
      {
        "method_name": "test_status_string",
        "params": "(test_status_t test_status)",
        "start_line": 90,
        "end_line": 97
      },
      {
        "method_name": "p_test_init",
        "params": "(const char *name)",
        "start_line": 100,
        "end_line": 104
      },
      {
        "method_name": "p_test_fini",
        "params": "(void)",
        "start_line": 107,
        "end_line": 111
      },
      {
        "method_name": "p_test_impl",
        "params": "(bool do_malloc_init, bool do_reentrant, test_t *t, va_list ap)",
        "start_line": 114,
        "end_line": 168
      },
      {
        "method_name": "p_test",
        "params": "(test_t *t, ...)",
        "start_line": 171,
        "end_line": 181
      },
      {
        "method_name": "p_test_no_reentrancy",
        "params": "(test_t *t, ...)",
        "start_line": 184,
        "end_line": 194
      },
      {
        "method_name": "p_test_no_malloc_init",
        "params": "(test_t *t, ...)",
        "start_line": 197,
        "end_line": 211
      },
      {
        "method_name": "p_test_fail",
        "params": "(const char *prefix, const char *message)",
        "start_line": 214,
        "end_line": 217
      }
    ],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 13,
        "end_line": 17
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/thd.c",
    "line": 34,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "*(*proc)",
        "params": "(void *), void *arg)",
        "start_line": 5,
        "end_line": 11
      },
      {
        "method_name": "thd_join",
        "params": "(thd_t thd, void **ret)",
        "start_line": 14,
        "end_line": 20
      },
      {
        "method_name": "*(*proc)",
        "params": "(void *), void *arg)",
        "start_line": 24,
        "end_line": 28
      },
      {
        "method_name": "thd_join",
        "params": "(thd_t thd, void **ret)",
        "start_line": 31,
        "end_line": 33
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/src/timer.c",
    "line": 56,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "timer_start",
        "params": "(timedelta_t *timer)",
        "start_line": 4,
        "end_line": 7
      },
      {
        "method_name": "timer_stop",
        "params": "(timedelta_t *timer)",
        "start_line": 10,
        "end_line": 13
      },
      {
        "method_name": "timer_usec",
        "params": "(const timedelta_t *timer)",
        "start_line": 16,
        "end_line": 22
      },
      {
        "method_name": "timer_ratio",
        "params": "(timedelta_t *a, timedelta_t *b, char *buf, size_t buflen)",
        "start_line": 25,
        "end_line": 56
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/stress/microbench.c",
    "line": 165,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "(*func)",
        "params": "(void))",
        "start_line": 5,
        "end_line": 16
      },
      {
        "method_name": "void",
        "params": "(*func_b))",
        "start_line": 20,
        "end_line": 41
      },
      {
        "method_name": "malloc_free",
        "params": "(void)",
        "start_line": 44,
        "end_line": 52
      },
      {
        "method_name": "mallocx_free",
        "params": "(void)",
        "start_line": 55,
        "end_line": 62
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_malloc_vs_mallocx)",
        "start_line": 64,
        "end_line": 67
      },
      {
        "method_name": "malloc_dallocx",
        "params": "(void)",
        "start_line": 71,
        "end_line": 78
      },
      {
        "method_name": "malloc_sdallocx",
        "params": "(void)",
        "start_line": 81,
        "end_line": 88
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_free_vs_dallocx)",
        "start_line": 90,
        "end_line": 93
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_dallocx_vs_sdallocx)",
        "start_line": 96,
        "end_line": 99
      },
      {
        "method_name": "malloc_mus_free",
        "params": "(void)",
        "start_line": 103,
        "end_line": 113
      },
      {
        "method_name": "malloc_sallocx_free",
        "params": "(void)",
        "start_line": 116,
        "end_line": 128
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mus_vs_sallocx)",
        "start_line": 130,
        "end_line": 133
      },
      {
        "method_name": "malloc_nallocx_free",
        "params": "(void)",
        "start_line": 137,
        "end_line": 149
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_sallocx_vs_nallocx)",
        "start_line": 151,
        "end_line": 154
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 158,
        "end_line": 165
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/SFMT.c",
    "line": 1599,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_gen_rand_32)",
        "start_line": 1452,
        "end_line": 1483
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_by_array_32)",
        "start_line": 1486,
        "end_line": 1518
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_gen_rand_64)",
        "start_line": 1521,
        "end_line": 1553
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_by_array_64)",
        "start_line": 1556,
        "end_line": 1589
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 1593,
        "end_line": 1599
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/a0.c",
    "line": 16,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_a0)",
        "start_line": 3,
        "end_line": 9
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 13,
        "end_line": 16
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/arena_reset.c",
    "line": 344,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/rtree.h",
      "test/extent_hooks.h"
    ],
    "methods": [
      {
        "method_name": "get_nsizes_impl",
        "params": "(const char *cmd)",
        "start_line": 11,
        "end_line": 20
      },
      {
        "method_name": "get_nsmall",
        "params": "(void)",
        "start_line": 23,
        "end_line": 25
      },
      {
        "method_name": "get_nlarge",
        "params": "(void)",
        "start_line": 28,
        "end_line": 30
      },
      {
        "method_name": "get_size_impl",
        "params": "(const char *cmd, size_t ind)",
        "start_line": 33,
        "end_line": 48
      },
      {
        "method_name": "get_small_size",
        "params": "(size_t ind)",
        "start_line": 51,
        "end_line": 53
      },
      {
        "method_name": "get_large_size",
        "params": "(size_t ind)",
        "start_line": 56,
        "end_line": 58
      },
      {
        "method_name": "vsalloc",
        "params": "(tsdn_t *tsdn, const void *ptr)",
        "start_line": 62,
        "end_line": 85
      },
      {
        "method_name": "do_arena_create",
        "params": "(extent_hooks_t *h)",
        "start_line": 88,
        "end_line": 95
      },
      {
        "method_name": "do_arena_reset_pre",
        "params": "(unsigned arena_ind, void ***ptrs, unsigned *nptrs)",
        "start_line": 98,
        "end_line": 134
      },
      {
        "method_name": "do_arena_reset_post",
        "params": "(void **ptrs, unsigned nptrs, unsigned arena_ind)",
        "start_line": 137,
        "end_line": 158
      },
      {
        "method_name": "do_arena_reset_destroy",
        "params": "(const char *name, unsigned arena_ind)",
        "start_line": 161,
        "end_line": 171
      },
      {
        "method_name": "do_arena_reset",
        "params": "(unsigned arena_ind)",
        "start_line": 174,
        "end_line": 176
      },
      {
        "method_name": "do_arena_destroy",
        "params": "(unsigned arena_ind)",
        "start_line": 179,
        "end_line": 181
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_reset)",
        "start_line": 183,
        "end_line": 192
      },
      {
        "method_name": "arena_i_initialized",
        "params": "(unsigned arena_ind, bool refresh)",
        "start_line": 196,
        "end_line": 216
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_destroy_initial)",
        "start_line": 218,
        "end_line": 221
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_destroy_hooks_default)",
        "start_line": 224,
        "end_line": 261
      },
      {
        "method_name": "extent_dalloc_unmap",
        "params": "(extent_hooks_t *extent_hooks, void *addr, size_t size,\n    bool committed, unsigned arena_ind)",
        "start_line": 270,
        "end_line": 285
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_destroy_hooks_unmap)",
        "start_line": 301,
        "end_line": 334
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 338,
        "end_line": 344
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/arena_reset_prof.c",
    "line": 4,
    "headers": [
      "test/jemalloc_test.h",
      "arena_reset.c"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/atomic.c",
    "line": 229,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "DO_TESTS",
        "params": "(t, ta, val1, val2, val3)",
        "start_line": 18,
        "end_line": 83
      },
      {
        "method_name": "DO_INTEGER_TESTS",
        "params": "(t, ta, val1, val2)",
        "start_line": 85,
        "end_line": 133
      },
      {
        "method_name": "TEST_CASES",
        "params": "(t)",
        "start_line": 142,
        "end_line": 159
      },
      {
        "method_name": "TEST_BODY",
        "params": "(t, ta)",
        "start_line": 161,
        "end_line": 167
      },
      {
        "method_name": "INTEGER_TEST_BODY",
        "params": "(t, ta)",
        "start_line": 169,
        "end_line": 176
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_atomic_u64)",
        "start_line": 179,
        "end_line": 185
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_atomic_u32)",
        "start_line": 190,
        "end_line": 192
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_atomic_p)",
        "start_line": 196,
        "end_line": 198
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_atomic_zu)",
        "start_line": 202,
        "end_line": 204
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_atomic_zd)",
        "start_line": 208,
        "end_line": 210
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_atomic_u)",
        "start_line": 215,
        "end_line": 217
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 221,
        "end_line": 229
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 136,
        "end_line": 140
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/background_thread.c",
    "line": 119,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "test_switch_background_thread_ctl",
        "params": "(bool new_val)",
        "start_line": 6,
        "end_line": 22
      },
      {
        "method_name": "test_repeat_background_thread_ctl",
        "params": "(bool before)",
        "start_line": 25,
        "end_line": 41
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_background_thread_ctl)",
        "start_line": 43,
        "end_line": 70
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_background_thread_running)",
        "start_line": 73,
        "end_line": 110
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 114,
        "end_line": 119
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/background_thread_enable.c",
    "line": 83,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_deferred)",
        "start_line": 5,
        "end_line": 30
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_max_background_threads)",
        "start_line": 33,
        "end_line": 75
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 79,
        "end_line": 83
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/base.c",
    "line": 234,
    "headers": [
      "test/jemalloc_test.h",
      "test/extent_hooks.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_base_hooks_default)",
        "start_line": 29,
        "end_line": 58
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_base_hooks_null)",
        "start_line": 61,
        "end_line": 103
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_base_hooks_not_null)",
        "start_line": 106,
        "end_line": 225
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 229,
        "end_line": 234
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/bit_util.c",
    "line": 57,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/bit_util.h"
    ],
    "methods": [
      {
        "method_name": "TEST_POW2_CEIL",
        "params": "(t, suf, pri)",
        "start_line": 5,
        "end_line": 34
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pow2_ceil_u64)",
        "start_line": 36,
        "end_line": 38
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pow2_ceil_u32)",
        "start_line": 41,
        "end_line": 43
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pow2_ceil_zu)",
        "start_line": 46,
        "end_line": 48
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 52,
        "end_line": 57
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/bitmap.c",
    "line": 431,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "test_bitmap_initializer_body",
        "params": "(const bitmap_info_t *binfo, size_t nbits)",
        "start_line": 96,
        "end_line": 124
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_bitmap_initializer)",
        "start_line": 126,
        "end_line": 136
      },
      {
        "method_name": "test_bitmap_size_body",
        "params": "(const bitmap_info_t *binfo, size_t nbits,\n    size_t prev_size)",
        "start_line": 141,
        "end_line": 147
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_bitmap_size)",
        "start_line": 149,
        "end_line": 166
      },
      {
        "method_name": "test_bitmap_init_body",
        "params": "(const bitmap_info_t *binfo, size_t nbits)",
        "start_line": 170,
        "end_line": 187
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_bitmap_init)",
        "start_line": 189,
        "end_line": 203
      },
      {
        "method_name": "test_bitmap_set_body",
        "params": "(const bitmap_info_t *binfo, size_t nbits)",
        "start_line": 207,
        "end_line": 218
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_bitmap_set)",
        "start_line": 220,
        "end_line": 234
      },
      {
        "method_name": "test_bitmap_unset_body",
        "params": "(const bitmap_info_t *binfo, size_t nbits)",
        "start_line": 238,
        "end_line": 256
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_bitmap_unset)",
        "start_line": 258,
        "end_line": 272
      },
      {
        "method_name": "test_bitmap_xfu_body",
        "params": "(const bitmap_info_t *binfo, size_t nbits)",
        "start_line": 276,
        "end_line": 403
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_bitmap_xfu)",
        "start_line": 405,
        "end_line": 419
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 423,
        "end_line": 431
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/ckh.c",
    "line": 211,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_new_delete)",
        "start_line": 3,
        "end_line": 16
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_count_insert_search_remove)",
        "start_line": 19,
        "end_line": 103
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_insert_iter_remove)",
        "start_line": 106,
        "end_line": 202
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 206,
        "end_line": 211
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/decay.c",
    "line": 599,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/ticker.h"
    ],
    "methods": [
      {
        "method_name": "check_background_thread_enabled",
        "params": "(void)",
        "start_line": 13,
        "end_line": 22
      },
      {
        "method_name": "nstime_monotonic_mock",
        "params": "(void)",
        "start_line": 25,
        "end_line": 27
      },
      {
        "method_name": "nstime_update_mock",
        "params": "(nstime_t *time)",
        "start_line": 30,
        "end_line": 36
      },
      {
        "method_name": "do_arena_create",
        "params": "(ssize_t dirty_decay_ms, ssize_t muzzy_decay_ms)",
        "start_line": 39,
        "end_line": 62
      },
      {
        "method_name": "do_arena_destroy",
        "params": "(unsigned arena_ind)",
        "start_line": 65,
        "end_line": 73
      },
      {
        "method_name": "do_epoch",
        "params": "(void)",
        "start_line": 76,
        "end_line": 80
      },
      {
        "method_name": "do_purge",
        "params": "(unsigned arena_ind)",
        "start_line": 83,
        "end_line": 91
      },
      {
        "method_name": "do_decay",
        "params": "(unsigned arena_ind)",
        "start_line": 94,
        "end_line": 102
      },
      {
        "method_name": "get_arena_npurge_impl",
        "params": "(const char *mibname, unsigned arena_ind)",
        "start_line": 105,
        "end_line": 116
      },
      {
        "method_name": "get_arena_dirty_npurge",
        "params": "(unsigned arena_ind)",
        "start_line": 119,
        "end_line": 122
      },
      {
        "method_name": "get_arena_muzzy_npurge",
        "params": "(unsigned arena_ind)",
        "start_line": 125,
        "end_line": 128
      },
      {
        "method_name": "get_arena_npurge",
        "params": "(unsigned arena_ind)",
        "start_line": 131,
        "end_line": 135
      },
      {
        "method_name": "get_arena_pdirty",
        "params": "(unsigned arena_ind)",
        "start_line": 138,
        "end_line": 150
      },
      {
        "method_name": "get_arena_pmuzzy",
        "params": "(unsigned arena_ind)",
        "start_line": 153,
        "end_line": 165
      },
      {
        "method_name": "do_mallocx",
        "params": "(size_t size, int flags)",
        "start_line": 168,
        "end_line": 172
      },
      {
        "method_name": "generate_dirty",
        "params": "(unsigned arena_ind, size_t size)",
        "start_line": 175,
        "end_line": 179
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_decay_ticks)",
        "start_line": 181,
        "end_line": 372
      },
      {
        "method_name": "decay_ticker_helper",
        "params": "(unsigned arena_ind, int flags, bool dirty, ssize_t dt,\n    uint64_t dirty_npurge0, uint64_t muzzy_npurge0, bool terminate_asap)",
        "start_line": 377,
        "end_line": 419
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_decay_ticker)",
        "start_line": 421,
        "end_line": 480
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_decay_nonmonotonic)",
        "start_line": 483,
        "end_line": 538
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_decay_now)",
        "start_line": 541,
        "end_line": 558
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_decay_never)",
        "start_line": 561,
        "end_line": 588
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 592,
        "end_line": 599
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/div.c",
    "line": 29,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/div.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_div_exhaustive)",
        "start_line": 5,
        "end_line": 22
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 26,
        "end_line": 29
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/emitter.c",
    "line": 413,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/emitter.h"
    ],
    "methods": [
      {
        "method_name": "forwarding_cb",
        "params": "(void *buf_descriptor_v, const char *str)",
        "start_line": 25,
        "end_line": 65
      },
      {
        "method_name": "(*emit_fn)",
        "params": "(emitter_t *),\n    const char *expected_json_output, const char *expected_table_output)",
        "start_line": 69,
        "end_line": 91
      },
      {
        "method_name": "emit_dict",
        "params": "(emitter_t *emitter)",
        "start_line": 94,
        "end_line": 110
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_dict)",
        "start_line": 127,
        "end_line": 129
      },
      {
        "method_name": "emit_table_printf",
        "params": "(emitter_t *emitter)",
        "start_line": 133,
        "end_line": 139
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_table_printf)",
        "start_line": 149,
        "end_line": 152
      },
      {
        "method_name": "emit_nested_dict",
        "params": "(emitter_t *emitter)",
        "start_line": 155,
        "end_line": 170
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nested_dict)",
        "start_line": 194,
        "end_line": 197
      },
      {
        "method_name": "emit_types",
        "params": "(emitter_t *emitter)",
        "start_line": 201,
        "end_line": 225
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_types)",
        "start_line": 249,
        "end_line": 251
      },
      {
        "method_name": "emit_modal",
        "params": "(emitter_t *emitter)",
        "start_line": 255,
        "end_line": 271
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_modal)",
        "start_line": 295,
        "end_line": 297
      },
      {
        "method_name": "emit_json_arr",
        "params": "(emitter_t *emitter)",
        "start_line": 301,
        "end_line": 320
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_json_arr)",
        "start_line": 341,
        "end_line": 343
      },
      {
        "method_name": "emit_table_row",
        "params": "(emitter_t *emitter)",
        "start_line": 347,
        "end_line": 386
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_table_row)",
        "start_line": 398,
        "end_line": 400
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 404,
        "end_line": 413
      }
    ],
    "structs": [
      {
        "struct_name": "buf_descriptor_s",
        "start_line": 14,
        "end_line": 18
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/extent_quantize.c",
    "line": 141,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_small_extent_size)",
        "start_line": 3,
        "end_line": 34
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_large_extent_size)",
        "start_line": 37,
        "end_line": 98
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_monotonic)",
        "start_line": 101,
        "end_line": 132
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 136,
        "end_line": 141
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/fork.c",
    "line": 141,
    "headers": [
      "test/jemalloc_test.h",
      "sys/wait.h"
    ],
    "methods": [
      {
        "method_name": "wait_for_child_exit",
        "params": "(int pid)",
        "start_line": 9,
        "end_line": 28
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_fork)",
        "start_line": 31,
        "end_line": 72
      },
      {
        "method_name": "do_fork_thd",
        "params": "(void *arg)",
        "start_line": 77,
        "end_line": 93
      },
      {
        "method_name": "do_test_fork_multithreaded",
        "params": "()",
        "start_line": 98,
        "end_line": 103
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_fork_multithreaded)",
        "start_line": 106,
        "end_line": 133
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 137,
        "end_line": 141
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/hash.c",
    "line": 173,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/hash.h"
    ],
    "methods": [
      {
        "method_name": "hash_variant_bits",
        "params": "(hash_variant_t variant)",
        "start_line": 40,
        "end_line": 47
      },
      {
        "method_name": "hash_variant_string",
        "params": "(hash_variant_t variant)",
        "start_line": 50,
        "end_line": 57
      },
      {
        "method_name": "hash_variant_verify_key",
        "params": "(hash_variant_t variant, uint8_t *key)",
        "start_line": 61,
        "end_line": 137
      },
      {
        "method_name": "hash_variant_verify",
        "params": "(hash_variant_t variant)",
        "start_line": 140,
        "end_line": 149
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_hash_x86_32)",
        "start_line": 152,
        "end_line": 154
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_hash_x86_128)",
        "start_line": 157,
        "end_line": 159
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_hash_x64_128)",
        "start_line": 162,
        "end_line": 164
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 168,
        "end_line": 173
      }
    ],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 33,
        "end_line": 37
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/hooks.c",
    "line": 38,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "hook",
        "params": "()",
        "start_line": 6,
        "end_line": 8
      },
      {
        "method_name": "func_to_hook",
        "params": "(int arg1, int arg2)",
        "start_line": 11,
        "end_line": 13
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(unhooked_call)",
        "start_line": 17,
        "end_line": 22
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(hooked_call)",
        "start_line": 25,
        "end_line": 30
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 34,
        "end_line": 38
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/junk.c",
    "line": 141,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "watch_junking",
        "params": "(void *p)",
        "start_line": 12,
        "end_line": 15
      },
      {
        "method_name": "arena_dalloc_junk_small_intercept",
        "params": "(void *ptr, const bin_info_t *bin_info)",
        "start_line": 18,
        "end_line": 30
      },
      {
        "method_name": "large_dalloc_junk_intercept",
        "params": "(void *ptr, size_t usize)",
        "start_line": 33,
        "end_line": 45
      },
      {
        "method_name": "large_dalloc_maybe_junk_intercept",
        "params": "(void *ptr, size_t usize)",
        "start_line": 48,
        "end_line": 53
      },
      {
        "method_name": "test_junk",
        "params": "(size_t sz_min, size_t sz_max)",
        "start_line": 56,
        "end_line": 122
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_junk_small)",
        "start_line": 124,
        "end_line": 127
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_junk_large)",
        "start_line": 130,
        "end_line": 133
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 137,
        "end_line": 141
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/junk_alloc.c",
    "line": 1,
    "headers": [
      "junk.c"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/junk_free.c",
    "line": 1,
    "headers": [
      "junk.c"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/log.c",
    "line": 193,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/log.h"
    ],
    "methods": [
      {
        "method_name": "expect_no_logging",
        "params": "(const char *names)",
        "start_line": 6,
        "end_line": 29
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_log_disabled)",
        "start_line": 31,
        "end_line": 40
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_log_enabled_direct)",
        "start_line": 43,
        "end_line": 82
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_log_enabled_indirect)",
        "start_line": 85,
        "end_line": 132
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_log_enabled_global)",
        "start_line": 135,
        "end_line": 154
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_logs_if_no_init)",
        "start_line": 157,
        "end_line": 170
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_log_only_format_string)",
        "start_line": 177,
        "end_line": 181
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 185,
        "end_line": 193
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/mallctl.c",
    "line": 805,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctl_errors)",
        "start_line": 5,
        "end_line": 29
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctlnametomib_errors)",
        "start_line": 32,
        "end_line": 39
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctlbymib_errors)",
        "start_line": 42,
        "end_line": 75
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctl_read_write)",
        "start_line": 78,
        "end_line": 102
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctlnametomib_short_mib)",
        "start_line": 105,
        "end_line": 116
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctl_config)",
        "start_line": 119,
        "end_line": 142
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mallctl_opt)",
        "start_line": 145,
        "end_line": 189
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_manpage_example)",
        "start_line": 192,
        "end_line": 213
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_tcache_none)",
        "start_line": 216,
        "end_line": 236
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_tcache)",
        "start_line": 239,
        "end_line": 329
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_thread_arena)",
        "start_line": 332,
        "end_line": 365
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_initialized)",
        "start_line": 368,
        "end_line": 403
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_dirty_decay_ms)",
        "start_line": 406,
        "end_line": 435
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_muzzy_decay_ms)",
        "start_line": 438,
        "end_line": 467
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_purge)",
        "start_line": 470,
        "end_line": 490
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_decay)",
        "start_line": 493,
        "end_line": 513
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_dss)",
        "start_line": 516,
        "end_line": 558
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_i_retain_grow_limit)",
        "start_line": 561,
        "end_line": 606
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_dirty_decay_ms)",
        "start_line": 609,
        "end_line": 638
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_muzzy_decay_ms)",
        "start_line": 641,
        "end_line": 670
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_constants)",
        "start_line": 673,
        "end_line": 688
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_bin_constants)",
        "start_line": 691,
        "end_line": 706
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_lextent_constants)",
        "start_line": 709,
        "end_line": 721
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_create)",
        "start_line": 724,
        "end_line": 738
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arenas_lookup)",
        "start_line": 741,
        "end_line": 754
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_arenas)",
        "start_line": 757,
        "end_line": 773
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 777,
        "end_line": 805
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/malloc_io.c",
    "line": 258,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_malloc_strtoumax_no_endptr)",
        "start_line": 3,
        "end_line": 10
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_malloc_strtoumax)",
        "start_line": 13,
        "end_line": 104
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_malloc_snprintf_truncated)",
        "start_line": 107,
        "end_line": 136
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_malloc_snprintf)",
        "start_line": 139,
        "end_line": 248
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 252,
        "end_line": 258
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/math.c",
    "line": 390,
    "headers": [
      "test/jemalloc_test.h",
      "float.h"
    ],
    "methods": [
      {
        "method_name": "double_eq_rel",
        "params": "(double a, double b, double max_rel_err, double max_abs_err)",
        "start_line": 17,
        "end_line": 25
      },
      {
        "method_name": "factorial",
        "params": "(unsigned x)",
        "start_line": 28,
        "end_line": 37
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ln_gamma_factorial)",
        "start_line": 39,
        "end_line": 48
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ln_gamma_misc)",
        "start_line": 190,
        "end_line": 199
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pt_norm)",
        "start_line": 240,
        "end_line": 249
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pt_chi2)",
        "start_line": 289,
        "end_line": 304
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pt_gamma_shape)",
        "start_line": 350,
        "end_line": 366
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pt_gamma_scale)",
        "start_line": 369,
        "end_line": 378
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 382,
        "end_line": 390
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/mq.c",
    "line": 89,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mq_basic)",
        "start_line": 12,
        "end_line": 29
      },
      {
        "method_name": "thd_receiver_start",
        "params": "(void *arg)",
        "start_line": 33,
        "end_line": 43
      },
      {
        "method_name": "thd_sender_start",
        "params": "(void *arg)",
        "start_line": 46,
        "end_line": 59
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mq_threaded)",
        "start_line": 61,
        "end_line": 80
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 84,
        "end_line": 88
      }
    ],
    "structs": [
      {
        "struct_name": "mq_msg_s",
        "start_line": 7,
        "end_line": 9
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/mtx.c",
    "line": 57,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mtx_basic)",
        "start_line": 6,
        "end_line": 13
      },
      {
        "method_name": "thd_start",
        "params": "(void *varg)",
        "start_line": 22,
        "end_line": 32
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_mtx_race)",
        "start_line": 34,
        "end_line": 49
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 53,
        "end_line": 57
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 16,
        "end_line": 19
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/nstime.c",
    "line": 249,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_init)",
        "start_line": 5,
        "end_line": 12
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_init2)",
        "start_line": 15,
        "end_line": 21
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_copy)",
        "start_line": 24,
        "end_line": 32
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_compare)",
        "start_line": 35,
        "end_line": 66
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_add)",
        "start_line": 69,
        "end_line": 85
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_iadd)",
        "start_line": 88,
        "end_line": 102
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_subtract)",
        "start_line": 105,
        "end_line": 121
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_isubtract)",
        "start_line": 124,
        "end_line": 138
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_imultiply)",
        "start_line": 141,
        "end_line": 155
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_idivide)",
        "start_line": 158,
        "end_line": 174
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_divide)",
        "start_line": 177,
        "end_line": 201
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_monotonic)",
        "start_line": 204,
        "end_line": 206
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_nstime_update)",
        "start_line": 209,
        "end_line": 230
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 234,
        "end_line": 249
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/pack.c",
    "line": 166,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "binind_compute",
        "params": "(void)",
        "start_line": 20,
        "end_line": 47
      },
      {
        "method_name": "nregs_per_run_compute",
        "params": "(void)",
        "start_line": 50,
        "end_line": 64
      },
      {
        "method_name": "arenas_create_mallctl",
        "params": "(void)",
        "start_line": 67,
        "end_line": 76
      },
      {
        "method_name": "arena_reset_mallctl",
        "params": "(unsigned arena_ind)",
        "start_line": 79,
        "end_line": 88
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pack)",
        "start_line": 90,
        "end_line": 159
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 163,
        "end_line": 166
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/pages.c",
    "line": 29,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_pages_huge)",
        "start_line": 3,
        "end_line": 22
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 26,
        "end_line": 29
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/ph.c",
    "line": 318,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/ph.h"
    ],
    "methods": [
      {
        "method_name": "node_cmp",
        "params": "(const node_t *a, const node_t *b)",
        "start_line": 15,
        "end_line": 28
      },
      {
        "method_name": "node_cmp_magic",
        "params": "(const node_t *a, const node_t *b)",
        "start_line": 31,
        "end_line": 37
      },
      {
        "method_name": "node_print",
        "params": "(const node_t *node, unsigned depth)",
        "start_line": 43,
        "end_line": 62
      },
      {
        "method_name": "heap_print",
        "params": "(const heap_t *heap)",
        "start_line": 65,
        "end_line": 85
      },
      {
        "method_name": "node_validate",
        "params": "(const node_t *node, const node_t *parent)",
        "start_line": 88,
        "end_line": 113
      },
      {
        "method_name": "heap_validate",
        "params": "(const heap_t *heap)",
        "start_line": 116,
        "end_line": 139
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ph_empty)",
        "start_line": 141,
        "end_line": 148
      },
      {
        "method_name": "node_remove",
        "params": "(heap_t *heap, node_t *node)",
        "start_line": 152,
        "end_line": 156
      },
      {
        "method_name": "node_remove_first",
        "params": "(heap_t *heap)",
        "start_line": 159,
        "end_line": 163
      },
      {
        "method_name": "node_remove_any",
        "params": "(heap_t *heap)",
        "start_line": 166,
        "end_line": 170
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ph_random)",
        "start_line": 172,
        "end_line": 310
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 314,
        "end_line": 318
      }
    ],
    "structs": [
      {
        "struct_name": "node_s",
        "start_line": 7,
        "end_line": 12
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prng.c",
    "line": 237,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "test_prng_lg_range_u32",
        "params": "(bool atomic)",
        "start_line": 4,
        "end_line": 38
      },
      {
        "method_name": "test_prng_lg_range_u64",
        "params": "(void)",
        "start_line": 41,
        "end_line": 74
      },
      {
        "method_name": "test_prng_lg_range_zu",
        "params": "(bool atomic)",
        "start_line": 77,
        "end_line": 112
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_lg_range_u32_nonatomic)",
        "start_line": 114,
        "end_line": 116
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_lg_range_u32_atomic)",
        "start_line": 119,
        "end_line": 121
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_lg_range_u64_nonatomic)",
        "start_line": 124,
        "end_line": 126
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_lg_range_zu_nonatomic)",
        "start_line": 129,
        "end_line": 131
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_lg_range_zu_atomic)",
        "start_line": 134,
        "end_line": 136
      },
      {
        "method_name": "test_prng_range_u32",
        "params": "(bool atomic)",
        "start_line": 140,
        "end_line": 157
      },
      {
        "method_name": "test_prng_range_u64",
        "params": "(void)",
        "start_line": 160,
        "end_line": 177
      },
      {
        "method_name": "test_prng_range_zu",
        "params": "(bool atomic)",
        "start_line": 180,
        "end_line": 197
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_range_u32_nonatomic)",
        "start_line": 199,
        "end_line": 201
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_range_u32_atomic)",
        "start_line": 204,
        "end_line": 206
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_range_u64_nonatomic)",
        "start_line": 209,
        "end_line": 211
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_range_zu_nonatomic)",
        "start_line": 214,
        "end_line": 216
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prng_range_zu_atomic)",
        "start_line": 219,
        "end_line": 221
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 225,
        "end_line": 237
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_accum.c",
    "line": 81,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "prof_dump_open_intercept",
        "params": "(bool propagate_err, const char *filename)",
        "start_line": 9,
        "end_line": 16
      },
      {
        "method_name": "alloc_from_permuted_backtrace",
        "params": "(unsigned thd_ind, unsigned iteration)",
        "start_line": 19,
        "end_line": 21
      },
      {
        "method_name": "thd_start",
        "params": "(void *varg)",
        "start_line": 24,
        "end_line": 50
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_idump)",
        "start_line": 52,
        "end_line": 74
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 78,
        "end_line": 81
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_active.c",
    "line": 117,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "mallctl_bool_get",
        "params": "(const char *name, bool expected, const char *func, int line)",
        "start_line": 4,
        "end_line": 13
      },
      {
        "method_name": "mallctl_bool_set",
        "params": "(const char *name, bool old_expected, bool val_new,\n    const char *func, int line)",
        "start_line": 17,
        "end_line": 28
      },
      {
        "method_name": "mallctl_prof_active_get_impl",
        "params": "(bool prof_active_old_expected, const char *func,\n    int line)",
        "start_line": 32,
        "end_line": 34
      },
      {
        "method_name": "mallctl_prof_active_set_impl",
        "params": "(bool prof_active_old_expected,\n    bool prof_active_new, const char *func, int line)",
        "start_line": 40,
        "end_line": 43
      },
      {
        "method_name": "mallctl_thread_prof_active_get_impl",
        "params": "(bool thread_prof_active_old_expected,\n    const char *func, int line)",
        "start_line": 49,
        "end_line": 52
      },
      {
        "method_name": "mallctl_thread_prof_active_set_impl",
        "params": "(bool thread_prof_active_old_expected,\n    bool thread_prof_active_new, const char *func, int line)",
        "start_line": 58,
        "end_line": 61
      },
      {
        "method_name": "prof_sampling_probe_impl",
        "params": "(bool expect_sample, const char *func, int line)",
        "start_line": 66,
        "end_line": 77
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_active)",
        "start_line": 81,
        "end_line": 110
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 114,
        "end_line": 117
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_gdump.c",
    "line": 74,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "prof_dump_open_intercept",
        "params": "(bool propagate_err, const char *filename)",
        "start_line": 6,
        "end_line": 15
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_gdump)",
        "start_line": 17,
        "end_line": 67
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 71,
        "end_line": 74
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_idump.c",
    "line": 42,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "prof_dump_open_intercept",
        "params": "(bool propagate_err, const char *filename)",
        "start_line": 6,
        "end_line": 15
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_idump)",
        "start_line": 17,
        "end_line": 35
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 39,
        "end_line": 42
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_reset.c",
    "line": 286,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "prof_dump_open_intercept",
        "params": "(bool propagate_err, const char *filename)",
        "start_line": 4,
        "end_line": 11
      },
      {
        "method_name": "set_prof_active",
        "params": "(bool active)",
        "start_line": 14,
        "end_line": 17
      },
      {
        "method_name": "get_lg_prof_sample",
        "params": "(void)",
        "start_line": 20,
        "end_line": 28
      },
      {
        "method_name": "do_prof_reset",
        "params": "(size_t lg_prof_sample)",
        "start_line": 31,
        "end_line": 37
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_reset_basic)",
        "start_line": 39,
        "end_line": 81
      },
      {
        "method_name": "prof_dump_header_intercept",
        "params": "(tsdn_t *tsdn, bool propagate_err,\n    const prof_cnt_t *cnt_all)",
        "start_line": 88,
        "end_line": 93
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_reset_cleanup)",
        "start_line": 95,
        "end_line": 130
      },
      {
        "method_name": "thd_start",
        "params": "(void *varg)",
        "start_line": 139,
        "end_line": 180
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_reset)",
        "start_line": 182,
        "end_line": 217
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_xallocx)",
        "start_line": 227,
        "end_line": 272
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 277,
        "end_line": 286
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_tctx.c",
    "line": 46,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_realloc)",
        "start_line": 3,
        "end_line": 39
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 43,
        "end_line": 46
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/prof_thread_name.c",
    "line": 120,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "mallctl_thread_name_get_impl",
        "params": "(const char *thread_name_expected, const char *func,\n    int line)",
        "start_line": 5,
        "end_line": 16
      },
      {
        "method_name": "mallctl_thread_name_set_impl",
        "params": "(const char *thread_name, const char *func,\n    int line)",
        "start_line": 22,
        "end_line": 28
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_thread_name_validation)",
        "start_line": 32,
        "end_line": 68
      },
      {
        "method_name": "thd_start",
        "params": "(void *varg)",
        "start_line": 74,
        "end_line": 94
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_prof_thread_name_threaded)",
        "start_line": 96,
        "end_line": 110
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 116,
        "end_line": 120
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/ql.c",
    "line": 204,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/ql.h"
    ],
    "methods": [
      {
        "method_name": "test_empty_list",
        "params": "(list_head_t *head)",
        "start_line": 17,
        "end_line": 36
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ql_empty)",
        "start_line": 38,
        "end_line": 43
      },
      {
        "method_name": "init_entries",
        "params": "(list_t *entries, unsigned nentries)",
        "start_line": 47,
        "end_line": 54
      },
      {
        "method_name": "test_entries_list",
        "params": "(list_head_t *head, list_t *entries, unsigned nentries)",
        "start_line": 57,
        "end_line": 90
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ql_tail_insert)",
        "start_line": 92,
        "end_line": 104
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ql_tail_remove)",
        "start_line": 107,
        "end_line": 123
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ql_head_insert)",
        "start_line": 126,
        "end_line": 138
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ql_head_remove)",
        "start_line": 141,
        "end_line": 157
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ql_insert)",
        "start_line": 160,
        "end_line": 192
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 196,
        "end_line": 204
      }
    ],
    "structs": [
      {
        "struct_name": "list_s",
        "start_line": 11,
        "end_line": 14
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/qr.c",
    "line": 243,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/qr.h"
    ],
    "methods": [
      {
        "method_name": "init_entries",
        "params": "(ring_t *entries)",
        "start_line": 18,
        "end_line": 25
      },
      {
        "method_name": "test_independent_entries",
        "params": "(ring_t *entries)",
        "start_line": 28,
        "end_line": 62
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_qr_one)",
        "start_line": 64,
        "end_line": 69
      },
      {
        "method_name": "test_entries_ring",
        "params": "(ring_t *entries)",
        "start_line": 73,
        "end_line": 103
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_qr_after_insert)",
        "start_line": 105,
        "end_line": 114
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_qr_remove)",
        "start_line": 117,
        "end_line": 143
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_qr_before_insert)",
        "start_line": 146,
        "end_line": 181
      },
      {
        "method_name": "test_split_entries",
        "params": "(ring_t *entries)",
        "start_line": 185,
        "end_line": 204
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_qr_meld_split)",
        "start_line": 206,
        "end_line": 232
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 236,
        "end_line": 243
      }
    ],
    "structs": [
      {
        "struct_name": "ring_s",
        "start_line": 12,
        "end_line": 15
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/rb.c",
    "line": 355,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/rb.h"
    ],
    "methods": [
      {
        "method_name": "rbtn_black_height",
        "params": "(a_type, a_field, a_rbt, r_height)",
        "start_line": 5,
        "end_line": 14
      },
      {
        "method_name": "node_cmp",
        "params": "(const node_t *a, const node_t *b)",
        "start_line": 26,
        "end_line": 42
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_rb_empty)",
        "start_line": 47,
        "end_line": 68
      },
      {
        "method_name": "tree_recurse",
        "params": "(node_t *node, unsigned black_height, unsigned black_depth)",
        "start_line": 72,
        "end_line": 118
      },
      {
        "method_name": "tree_iterate_cb",
        "params": "(tree_t *tree, node_t *node, void *data)",
        "start_line": 121,
        "end_line": 145
      },
      {
        "method_name": "tree_iterate",
        "params": "(tree_t *tree)",
        "start_line": 148,
        "end_line": 155
      },
      {
        "method_name": "tree_iterate_reverse",
        "params": "(tree_t *tree)",
        "start_line": 158,
        "end_line": 165
      },
      {
        "method_name": "node_remove",
        "params": "(tree_t *tree, node_t *node, unsigned nnodes)",
        "start_line": 168,
        "end_line": 197
      },
      {
        "method_name": "remove_iterate_cb",
        "params": "(tree_t *tree, node_t *node, void *data)",
        "start_line": 200,
        "end_line": 207
      },
      {
        "method_name": "remove_reverse_iterate_cb",
        "params": "(tree_t *tree, node_t *node, void *data)",
        "start_line": 210,
        "end_line": 217
      },
      {
        "method_name": "destroy_cb",
        "params": "(node_t *node, void *data)",
        "start_line": 220,
        "end_line": 225
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_rb_random)",
        "start_line": 227,
        "end_line": 347
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 351,
        "end_line": 355
      }
    ],
    "structs": [
      {
        "struct_name": "node_s",
        "start_line": 18,
        "end_line": 23
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/retained.c",
    "line": 181,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/spin.h"
    ],
    "methods": [
      {
        "method_name": "do_arena_create",
        "params": "(extent_hooks_t *h)",
        "start_line": 14,
        "end_line": 21
      },
      {
        "method_name": "do_arena_destroy",
        "params": "(unsigned arena_ind)",
        "start_line": 24,
        "end_line": 34
      },
      {
        "method_name": "do_refresh",
        "params": "(void)",
        "start_line": 37,
        "end_line": 41
      },
      {
        "method_name": "do_get_size_impl",
        "params": "(const char *cmd, unsigned arena_ind)",
        "start_line": 44,
        "end_line": 57
      },
      {
        "method_name": "do_get_active",
        "params": "(unsigned arena_ind)",
        "start_line": 60,
        "end_line": 62
      },
      {
        "method_name": "do_get_mapped",
        "params": "(unsigned arena_ind)",
        "start_line": 65,
        "end_line": 67
      },
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 70,
        "end_line": 98
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_retained)",
        "start_line": 100,
        "end_line": 174
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 178,
        "end_line": 181
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/rtree.c",
    "line": 227,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/rtree.h"
    ],
    "methods": [
      {
        "method_name": "rtree_node_alloc_intercept",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, size_t nelms)",
        "start_line": 14,
        "end_line": 27
      },
      {
        "method_name": "rtree_node_dalloc_intercept",
        "params": "(tsdn_t *tsdn, rtree_t *rtree,\n    rtree_node_elm_t *node)",
        "start_line": 31,
        "end_line": 38
      },
      {
        "method_name": "rtree_leaf_alloc_intercept",
        "params": "(tsdn_t *tsdn, rtree_t *rtree, size_t nelms)",
        "start_line": 41,
        "end_line": 54
      },
      {
        "method_name": "rtree_leaf_dalloc_intercept",
        "params": "(tsdn_t *tsdn, rtree_t *rtree,\n    rtree_leaf_elm_t *leaf)",
        "start_line": 58,
        "end_line": 65
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_rtree_read_empty)",
        "start_line": 67,
        "end_line": 79
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_rtree_extrema)",
        "start_line": 86,
        "end_line": 118
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_rtree_bits)",
        "start_line": 121,
        "end_line": 155
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_rtree_random)",
        "start_line": 158,
        "end_line": 208
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 212,
        "end_line": 227
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/size_classes.c",
    "line": 183,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "get_max_size_class",
        "params": "(void)",
        "start_line": 4,
        "end_line": 23
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_size_classes)",
        "start_line": 25,
        "end_line": 80
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_psize_classes)",
        "start_line": 83,
        "end_line": 136
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_overflow)",
        "start_line": 139,
        "end_line": 174
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 178,
        "end_line": 183
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/slab.c",
    "line": 32,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_arena_slab_regind)",
        "start_line": 3,
        "end_line": 25
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 29,
        "end_line": 32
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/smoothstep.c",
    "line": 102,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_smoothstep_integral)",
        "start_line": 10,
        "end_line": 36
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_smoothstep_monotonic)",
        "start_line": 39,
        "end_line": 57
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_smoothstep_slope)",
        "start_line": 60,
        "end_line": 93
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 97,
        "end_line": 102
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/spin.c",
    "line": 18,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/spin.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_spin)",
        "start_line": 5,
        "end_line": 11
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 15,
        "end_line": 18
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/stats.c",
    "line": 368,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_summary)",
        "start_line": 3,
        "end_line": 25
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_large)",
        "start_line": 28,
        "end_line": 65
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_arenas_summary)",
        "start_line": 68,
        "end_line": 127
      },
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 131,
        "end_line": 133
      },
      {
        "method_name": "no_lazy_lock",
        "params": "(void)",
        "start_line": 136,
        "end_line": 141
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_arenas_small)",
        "start_line": 143,
        "end_line": 185
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_arenas_large)",
        "start_line": 188,
        "end_line": 220
      },
      {
        "method_name": "gen_mallctl_str",
        "params": "(char *cmd, char *name, unsigned arena_ind)",
        "start_line": 224,
        "end_line": 226
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_arenas_bins)",
        "start_line": 228,
        "end_line": 314
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_stats_arenas_lextents)",
        "start_line": 317,
        "end_line": 355
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 359,
        "end_line": 368
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/stats_print.c",
    "line": 999,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/util.h"
    ],
    "methods": [
      {
        "method_name": "token_init",
        "params": "(token_t *token, parser_t *parser, token_type_t token_type,\n    size_t pos, size_t len, size_t line, size_t col)",
        "start_line": 44,
        "end_line": 51
      },
      {
        "method_name": "token_error",
        "params": "(token_t *token)",
        "start_line": 54,
        "end_line": 73
      },
      {
        "method_name": "parser_init",
        "params": "(parser_t *parser, bool verbose)",
        "start_line": 76,
        "end_line": 83
      },
      {
        "method_name": "parser_fini",
        "params": "(parser_t *parser)",
        "start_line": 86,
        "end_line": 90
      },
      {
        "method_name": "parser_append",
        "params": "(parser_t *parser, const char *str)",
        "start_line": 93,
        "end_line": 105
      },
      {
        "method_name": "parser_tokenize",
        "params": "(parser_t *parser)",
        "start_line": 108,
        "end_line": 663
      },
      {
        "method_name": "parser_parse_value",
        "params": "(parser_t *parser)",
        "start_line": 669,
        "end_line": 685
      },
      {
        "method_name": "parser_parse_pair",
        "params": "(parser_t *parser)",
        "start_line": 688,
        "end_line": 703
      },
      {
        "method_name": "parser_parse_values",
        "params": "(parser_t *parser)",
        "start_line": 706,
        "end_line": 730
      },
      {
        "method_name": "parser_parse_array",
        "params": "(parser_t *parser)",
        "start_line": 733,
        "end_line": 746
      },
      {
        "method_name": "parser_parse_pairs",
        "params": "(parser_t *parser)",
        "start_line": 749,
        "end_line": 781
      },
      {
        "method_name": "parser_parse_object",
        "params": "(parser_t *parser)",
        "start_line": 784,
        "end_line": 1000
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 23,
        "end_line": 30
      },
      {
        "struct_name": "parser_s",
        "start_line": 32,
        "end_line": 40
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 5,
        "end_line": 20
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/ticker.c",
    "line": 73,
    "headers": [
      "test/jemalloc_test.h",
      "jemalloc/internal/ticker.h"
    ],
    "methods": [
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ticker_tick)",
        "start_line": 5,
        "end_line": 27
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ticker_ticks)",
        "start_line": 30,
        "end_line": 45
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_ticker_copy)",
        "start_line": 48,
        "end_line": 64
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 68,
        "end_line": 73
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/tsd.c",
    "line": 139,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "data_cleanup",
        "params": "(int *data)",
        "start_line": 6,
        "end_line": 39
      },
      {
        "method_name": "thd_start",
        "params": "(void *arg)",
        "start_line": 42,
        "end_line": 65
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_tsd_main_thread)",
        "start_line": 67,
        "end_line": 69
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_tsd_sub_thread)",
        "start_line": 72,
        "end_line": 84
      },
      {
        "method_name": "thd_start_reincarnated",
        "params": "(void *arg)",
        "start_line": 88,
        "end_line": 118
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_tsd_reincarnation)",
        "start_line": 120,
        "end_line": 124
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 128,
        "end_line": 139
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/witness.c",
    "line": 280,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "witness_lock_error_intercept",
        "params": "(const witness_list_t *witnesses,\n    const witness_t *witness)",
        "start_line": 15,
        "end_line": 17
      },
      {
        "method_name": "witness_owner_error_intercept",
        "params": "(const witness_t *witness)",
        "start_line": 20,
        "end_line": 22
      },
      {
        "method_name": "witness_not_owner_error_intercept",
        "params": "(const witness_t *witness)",
        "start_line": 25,
        "end_line": 27
      },
      {
        "method_name": "witness_depth_error_intercept",
        "params": "(const witness_list_t *witnesses,\n    witness_rank_t rank_inclusive, unsigned depth)",
        "start_line": 31,
        "end_line": 33
      },
      {
        "method_name": "witness_comp",
        "params": "(const witness_t *a, void *oa, const witness_t *b, void *ob)",
        "start_line": 36,
        "end_line": 43
      },
      {
        "method_name": "witness_comp_reverse",
        "params": "(const witness_t *a, void *oa, const witness_t *b,\n    void *ob)",
        "start_line": 47,
        "end_line": 54
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_witness)",
        "start_line": 56,
        "end_line": 93
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_witness_comp)",
        "start_line": 96,
        "end_line": 145
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_witness_reversal)",
        "start_line": 148,
        "end_line": 176
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_witness_recursive)",
        "start_line": 179,
        "end_line": 211
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_witness_unlock_not_owned)",
        "start_line": 214,
        "end_line": 235
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_witness_depth)",
        "start_line": 238,
        "end_line": 268
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 272,
        "end_line": 280
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/jemalloc/test/unit/zero.c",
    "line": 59,
    "headers": [
      "test/jemalloc_test.h"
    ],
    "methods": [
      {
        "method_name": "test_zero",
        "params": "(size_t sz_min, size_t sz_max)",
        "start_line": 4,
        "end_line": 40
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_zero_small)",
        "start_line": 42,
        "end_line": 45
      },
      {
        "method_name": "TEST_BEGIN",
        "params": "(test_zero_large)",
        "start_line": 48,
        "end_line": 51
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 55,
        "end_line": 59
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/linenoise/example.c",
    "line": 79,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "linenoise.h"
    ],
    "methods": [
      {
        "method_name": "completion",
        "params": "(const char *buf, linenoiseCompletions *lc)",
        "start_line": 7,
        "end_line": 12
      },
      {
        "method_name": "*hints",
        "params": "(const char *buf, int *color, int *bold)",
        "start_line": 14,
        "end_line": 21
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 23,
        "end_line": 79
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/linenoise/linenoise.c",
    "line": 1225,
    "headers": [
      "termios.h",
      "unistd.h",
      "stdlib.h",
      "stdio.h",
      "errno.h",
      "string.h",
      "stdlib.h",
      "ctype.h",
      "sys/stat.h",
      "sys/types.h",
      "sys/ioctl.h",
      "unistd.h",
      "linenoise.h"
    ],
    "methods": [
      {
        "method_name": "if",
        "params": "(lndebug_fp == NULL)",
        "start_line": 185,
        "end_line": 191
      },
      {
        "method_name": "linenoiseMaskModeEnable",
        "params": "(void)",
        "start_line": 205,
        "end_line": 207
      },
      {
        "method_name": "linenoiseMaskModeDisable",
        "params": "(void)",
        "start_line": 210,
        "end_line": 212
      },
      {
        "method_name": "linenoiseSetMultiLine",
        "params": "(int ml)",
        "start_line": 215,
        "end_line": 217
      },
      {
        "method_name": "isUnsupportedTerm",
        "params": "(void)",
        "start_line": 221,
        "end_line": 229
      },
      {
        "method_name": "enableRawMode",
        "params": "(int fd)",
        "start_line": 232,
        "end_line": 265
      },
      {
        "method_name": "disableRawMode",
        "params": "(int fd)",
        "start_line": 267,
        "end_line": 271
      },
      {
        "method_name": "getCursorPosition",
        "params": "(int ifd, int ofd)",
        "start_line": 276,
        "end_line": 296
      },
      {
        "method_name": "getColumns",
        "params": "(int ifd, int ofd)",
        "start_line": 300,
        "end_line": 331
      },
      {
        "method_name": "linenoiseClearScreen",
        "params": "(void)",
        "start_line": 334,
        "end_line": 338
      },
      {
        "method_name": "linenoiseBeep",
        "params": "(void)",
        "start_line": 342,
        "end_line": 345
      },
      {
        "method_name": "freeCompletions",
        "params": "(linenoiseCompletions *lc)",
        "start_line": 350,
        "end_line": 356
      },
      {
        "method_name": "completeLine",
        "params": "(struct linenoiseState *ls)",
        "start_line": 364,
        "end_line": 420
      },
      {
        "method_name": "linenoiseSetCompletionCallback",
        "params": "(linenoiseCompletionCallback *fn)",
        "start_line": 423,
        "end_line": 425
      },
      {
        "method_name": "linenoiseSetHintsCallback",
        "params": "(linenoiseHintsCallback *fn)",
        "start_line": 429,
        "end_line": 431
      },
      {
        "method_name": "linenoiseSetFreeHintsCallback",
        "params": "(linenoiseFreeHintsCallback *fn)",
        "start_line": 435,
        "end_line": 437
      },
      {
        "method_name": "linenoiseAddCompletion",
        "params": "(linenoiseCompletions *lc, const char *str)",
        "start_line": 443,
        "end_line": 457
      },
      {
        "method_name": "abInit",
        "params": "(struct abuf *ab)",
        "start_line": 470,
        "end_line": 473
      },
      {
        "method_name": "abAppend",
        "params": "(struct abuf *ab, const char *s, int len)",
        "start_line": 475,
        "end_line": 482
      },
      {
        "method_name": "abFree",
        "params": "(struct abuf *ab)",
        "start_line": 484,
        "end_line": 486
      },
      {
        "method_name": "refreshShowHints",
        "params": "(struct abuf *ab, struct linenoiseState *l, int plen)",
        "start_line": 490,
        "end_line": 512
      },
      {
        "method_name": "refreshSingleLine",
        "params": "(struct linenoiseState *l)",
        "start_line": 518,
        "end_line": 557
      },
      {
        "method_name": "refreshMultiLine",
        "params": "(struct linenoiseState *l)",
        "start_line": 563,
        "end_line": 649
      },
      {
        "method_name": "refreshLine",
        "params": "(struct linenoiseState *l)",
        "start_line": 653,
        "end_line": 658
      },
      {
        "method_name": "linenoiseEditInsert",
        "params": "(struct linenoiseState *l, char c)",
        "start_line": 663,
        "end_line": 688
      },
      {
        "method_name": "linenoiseEditMoveLeft",
        "params": "(struct linenoiseState *l)",
        "start_line": 691,
        "end_line": 696
      },
      {
        "method_name": "linenoiseEditMoveRight",
        "params": "(struct linenoiseState *l)",
        "start_line": 699,
        "end_line": 704
      },
      {
        "method_name": "linenoiseEditMoveHome",
        "params": "(struct linenoiseState *l)",
        "start_line": 707,
        "end_line": 712
      },
      {
        "method_name": "linenoiseEditMoveEnd",
        "params": "(struct linenoiseState *l)",
        "start_line": 715,
        "end_line": 720
      },
      {
        "method_name": "linenoiseEditHistoryNext",
        "params": "(struct linenoiseState *l, int dir)",
        "start_line": 726,
        "end_line": 746
      },
      {
        "method_name": "linenoiseEditDelete",
        "params": "(struct linenoiseState *l)",
        "start_line": 750,
        "end_line": 757
      },
      {
        "method_name": "linenoiseEditBackspace",
        "params": "(struct linenoiseState *l)",
        "start_line": 760,
        "end_line": 768
      },
      {
        "method_name": "linenoiseEditDeletePrevWord",
        "params": "(struct linenoiseState *l)",
        "start_line": 772,
        "end_line": 784
      },
      {
        "method_name": "linenoiseEdit",
        "params": "(int stdin_fd, int stdout_fd, char *buf, size_t buflen, const char *prompt)",
        "start_line": 795,
        "end_line": 976
      },
      {
        "method_name": "linenoisePrintKeyCodes",
        "params": "(void)",
        "start_line": 981,
        "end_line": 1004
      },
      {
        "method_name": "linenoiseRaw",
        "params": "(char *buf, size_t buflen, const char *prompt)",
        "start_line": 1008,
        "end_line": 1021
      },
      {
        "method_name": "*linenoiseNoTTY",
        "params": "(void)",
        "start_line": 1028,
        "end_line": 1057
      },
      {
        "method_name": "*linenoise",
        "params": "(const char *prompt)",
        "start_line": 1064,
        "end_line": 1089
      },
      {
        "method_name": "linenoiseFree",
        "params": "(void *ptr)",
        "start_line": 1095,
        "end_line": 1097
      },
      {
        "method_name": "freeHistory",
        "params": "(void)",
        "start_line": 1103,
        "end_line": 1111
      },
      {
        "method_name": "linenoiseAtExit",
        "params": "(void)",
        "start_line": 1114,
        "end_line": 1117
      },
      {
        "method_name": "linenoiseHistoryAdd",
        "params": "(const char *line)",
        "start_line": 1126,
        "end_line": 1153
      },
      {
        "method_name": "linenoiseHistorySetMaxLen",
        "params": "(int len)",
        "start_line": 1159,
        "end_line": 1185
      },
      {
        "method_name": "linenoiseHistorySave",
        "params": "(const char *filename)",
        "start_line": 1189,
        "end_line": 1202
      },
      {
        "method_name": "linenoiseHistoryLoad",
        "params": "(const char *filename)",
        "start_line": 1209,
        "end_line": 1225
      }
    ],
    "structs": [
      {
        "struct_name": "linenoiseState",
        "start_line": 139,
        "end_line": 152
      },
      {
        "struct_name": "abuf",
        "start_line": 465,
        "end_line": 468
      }
    ],
    "enums": [
      {
        "enum_name": "KEY_ACTION",
        "start_line": 154,
        "end_line": 174
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/linenoise/linenoise.h",
    "line": 75,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "linenoiseCompletions",
        "start_line": 46,
        "end_line": 49
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/etc/all.c",
    "line": 38,
    "headers": [
      "lapi.c",
      "lcode.c",
      "ldebug.c",
      "ldo.c",
      "ldump.c",
      "lfunc.c",
      "lgc.c",
      "llex.c",
      "lmem.c",
      "lobject.c",
      "lopcodes.c",
      "lparser.c",
      "lstate.c",
      "lstring.c",
      "ltable.c",
      "ltm.c",
      "lundump.c",
      "lvm.c",
      "lzio.c",
      "lauxlib.c",
      "lbaselib.c",
      "ldblib.c",
      "liolib.c",
      "linit.c",
      "lmathlib.c",
      "loadlib.c",
      "loslib.c",
      "lstrlib.c",
      "ltablib.c",
      "lua.c"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/etc/min.c",
    "line": 39,
    "headers": [
      "stdio.h",
      "lua.h",
      "lauxlib.h"
    ],
    "methods": [
      {
        "method_name": "print",
        "params": "(lua_State *L)",
        "start_line": 13,
        "end_line": 30
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 33,
        "end_line": 39
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/etc/noparser.c",
    "line": 50,
    "headers": [
      "llex.h",
      "lparser.h",
      "lzio.h",
      "lundump.h"
    ],
    "methods": [
      {
        "method_name": "luaX_init",
        "params": "(lua_State *L)",
        "start_line": 21,
        "end_line": 23
      },
      {
        "method_name": "*luaY_parser",
        "params": "(lua_State *L, ZIO *z, Mbuffer *buff, const char *name)",
        "start_line": 25,
        "end_line": 32
      },
      {
        "method_name": "luaU_dump",
        "params": "(lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)",
        "start_line": 37,
        "end_line": 49
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/fpconv.c",
    "line": 205,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "assert.h",
      "string.h",
      "fpconv.h"
    ],
    "methods": [
      {
        "method_name": "fpconv_update_locale",
        "params": "()",
        "start_line": 53,
        "end_line": 66
      },
      {
        "method_name": "valid_number_character",
        "params": "(char ch)",
        "start_line": 76,
        "end_line": 90
      },
      {
        "method_name": "strtod_buffer_size",
        "params": "(const char *s)",
        "start_line": 95,
        "end_line": 102
      },
      {
        "method_name": "fpconv_strtod",
        "params": "(const char *nptr, char **endptr)",
        "start_line": 107,
        "end_line": 150
      },
      {
        "method_name": "set_number_format",
        "params": "(char *fmt, int precision)",
        "start_line": 154,
        "end_line": 171
      },
      {
        "method_name": "fpconv_g_fmt",
        "params": "(char *str, double num, int precision)",
        "start_line": 175,
        "end_line": 197
      },
      {
        "method_name": "fpconv_init",
        "params": "()",
        "start_line": 200,
        "end_line": 202
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/fpconv.h",
    "line": 22,
    "headers": [],
    "methods": [
      {
        "method_name": "fpconv_init",
        "params": "()",
        "start_line": 11,
        "end_line": 13
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lapi.c",
    "line": 1087,
    "headers": [
      "assert.h",
      "math.h",
      "stdarg.h",
      "string.h",
      "lua.h",
      "lapi.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lgc.h",
      "lmem.h",
      "lobject.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h",
      "lundump.h",
      "lvm.h"
    ],
    "methods": [
      {
        "method_name": "api_incr_top",
        "params": "(L)",
        "start_line": 45,
        "end_line": 45
      },
      {
        "method_name": "*index2adr",
        "params": "(lua_State *L, int idx)",
        "start_line": 49,
        "end_line": 76
      },
      {
        "method_name": "*getcurrenv",
        "params": "(lua_State *L)",
        "start_line": 79,
        "end_line": 86
      },
      {
        "method_name": "luaA_pushobject",
        "params": "(lua_State *L, const TValue *o)",
        "start_line": 89,
        "end_line": 92
      },
      {
        "method_name": "lua_checkstack",
        "params": "(lua_State *L, int size)",
        "start_line": 95,
        "end_line": 107
      },
      {
        "method_name": "lua_xmove",
        "params": "(lua_State *from, lua_State *to, int n)",
        "start_line": 110,
        "end_line": 122
      },
      {
        "method_name": "lua_setlevel",
        "params": "(lua_State *from, lua_State *to)",
        "start_line": 125,
        "end_line": 127
      },
      {
        "method_name": "lua_atpanic",
        "params": "(lua_State *L, lua_CFunction panicf)",
        "start_line": 130,
        "end_line": 137
      },
      {
        "method_name": "*lua_newthread",
        "params": "(lua_State *L)",
        "start_line": 140,
        "end_line": 150
      },
      {
        "method_name": "lua_gettop",
        "params": "(lua_State *L)",
        "start_line": 159,
        "end_line": 161
      },
      {
        "method_name": "lua_settop",
        "params": "(lua_State *L, int idx)",
        "start_line": 164,
        "end_line": 177
      },
      {
        "method_name": "lua_remove",
        "params": "(lua_State *L, int idx)",
        "start_line": 180,
        "end_line": 188
      },
      {
        "method_name": "lua_insert",
        "params": "(lua_State *L, int idx)",
        "start_line": 191,
        "end_line": 200
      },
      {
        "method_name": "lua_replace",
        "params": "(lua_State *L, int idx)",
        "start_line": 203,
        "end_line": 225
      },
      {
        "method_name": "lua_pushvalue",
        "params": "(lua_State *L, int idx)",
        "start_line": 228,
        "end_line": 233
      },
      {
        "method_name": "lua_type",
        "params": "(lua_State *L, int idx)",
        "start_line": 242,
        "end_line": 245
      },
      {
        "method_name": "*lua_typename",
        "params": "(lua_State *L, int t)",
        "start_line": 248,
        "end_line": 251
      },
      {
        "method_name": "lua_iscfunction",
        "params": "(lua_State *L, int idx)",
        "start_line": 254,
        "end_line": 257
      },
      {
        "method_name": "lua_isnumber",
        "params": "(lua_State *L, int idx)",
        "start_line": 260,
        "end_line": 264
      },
      {
        "method_name": "lua_isstring",
        "params": "(lua_State *L, int idx)",
        "start_line": 267,
        "end_line": 270
      },
      {
        "method_name": "lua_isuserdata",
        "params": "(lua_State *L, int idx)",
        "start_line": 273,
        "end_line": 276
      },
      {
        "method_name": "lua_rawequal",
        "params": "(lua_State *L, int index1, int index2)",
        "start_line": 279,
        "end_line": 284
      },
      {
        "method_name": "lua_equal",
        "params": "(lua_State *L, int index1, int index2)",
        "start_line": 287,
        "end_line": 296
      },
      {
        "method_name": "lua_lessthan",
        "params": "(lua_State *L, int index1, int index2)",
        "start_line": 299,
        "end_line": 309
      },
      {
        "method_name": "lua_tonumber",
        "params": "(lua_State *L, int idx)",
        "start_line": 313,
        "end_line": 320
      },
      {
        "method_name": "lua_tointeger",
        "params": "(lua_State *L, int idx)",
        "start_line": 323,
        "end_line": 334
      },
      {
        "method_name": "lua_toboolean",
        "params": "(lua_State *L, int idx)",
        "start_line": 337,
        "end_line": 340
      },
      {
        "method_name": "*lua_tolstring",
        "params": "(lua_State *L, int idx, size_t *len)",
        "start_line": 343,
        "end_line": 358
      },
      {
        "method_name": "lua_objlen",
        "params": "(lua_State *L, int idx)",
        "start_line": 361,
        "end_line": 376
      },
      {
        "method_name": "lua_tocfunction",
        "params": "(lua_State *L, int idx)",
        "start_line": 379,
        "end_line": 382
      },
      {
        "method_name": "*lua_touserdata",
        "params": "(lua_State *L, int idx)",
        "start_line": 385,
        "end_line": 392
      },
      {
        "method_name": "*lua_tothread",
        "params": "(lua_State *L, int idx)",
        "start_line": 395,
        "end_line": 398
      },
      {
        "method_name": "*lua_topointer",
        "params": "(lua_State *L, int idx)",
        "start_line": 401,
        "end_line": 412
      },
      {
        "method_name": "lua_pushnil",
        "params": "(lua_State *L)",
        "start_line": 421,
        "end_line": 426
      },
      {
        "method_name": "lua_pushnumber",
        "params": "(lua_State *L, lua_Number n)",
        "start_line": 429,
        "end_line": 434
      },
      {
        "method_name": "lua_pushinteger",
        "params": "(lua_State *L, lua_Integer n)",
        "start_line": 437,
        "end_line": 442
      },
      {
        "method_name": "lua_pushlstring",
        "params": "(lua_State *L, const char *s, size_t len)",
        "start_line": 445,
        "end_line": 451
      },
      {
        "method_name": "lua_pushstring",
        "params": "(lua_State *L, const char *s)",
        "start_line": 454,
        "end_line": 459
      },
      {
        "method_name": "*lua_pushvfstring",
        "params": "(lua_State *L, const char *fmt,\n                                      va_list argp)",
        "start_line": 463,
        "end_line": 470
      },
      {
        "method_name": "*lua_pushfstring",
        "params": "(lua_State *L, const char *fmt, ...)",
        "start_line": 473,
        "end_line": 483
      },
      {
        "method_name": "lua_pushcclosure",
        "params": "(lua_State *L, lua_CFunction fn, int n)",
        "start_line": 486,
        "end_line": 500
      },
      {
        "method_name": "lua_pushboolean",
        "params": "(lua_State *L, int b)",
        "start_line": 503,
        "end_line": 508
      },
      {
        "method_name": "lua_pushlightuserdata",
        "params": "(lua_State *L, void *p)",
        "start_line": 511,
        "end_line": 516
      },
      {
        "method_name": "lua_pushthread",
        "params": "(lua_State *L)",
        "start_line": 519,
        "end_line": 525
      },
      {
        "method_name": "lua_gettable",
        "params": "(lua_State *L, int idx)",
        "start_line": 534,
        "end_line": 541
      },
      {
        "method_name": "lua_getfield",
        "params": "(lua_State *L, int idx, const char *k)",
        "start_line": 544,
        "end_line": 554
      },
      {
        "method_name": "lua_rawget",
        "params": "(lua_State *L, int idx)",
        "start_line": 557,
        "end_line": 564
      },
      {
        "method_name": "lua_rawgeti",
        "params": "(lua_State *L, int idx, int n)",
        "start_line": 567,
        "end_line": 575
      },
      {
        "method_name": "lua_createtable",
        "params": "(lua_State *L, int narray, int nrec)",
        "start_line": 578,
        "end_line": 584
      },
      {
        "method_name": "lua_getmetatable",
        "params": "(lua_State *L, int objindex)",
        "start_line": 587,
        "end_line": 613
      },
      {
        "method_name": "lua_getfenv",
        "params": "(lua_State *L, int idx)",
        "start_line": 616,
        "end_line": 637
      },
      {
        "method_name": "lua_settable",
        "params": "(lua_State *L, int idx)",
        "start_line": 645,
        "end_line": 654
      },
      {
        "method_name": "lua_setfield",
        "params": "(lua_State *L, int idx, const char *k)",
        "start_line": 657,
        "end_line": 668
      },
      {
        "method_name": "lua_rawset",
        "params": "(lua_State *L, int idx)",
        "start_line": 671,
        "end_line": 681
      },
      {
        "method_name": "lua_rawseti",
        "params": "(lua_State *L, int idx, int n)",
        "start_line": 684,
        "end_line": 694
      },
      {
        "method_name": "lua_setmetatable",
        "params": "(lua_State *L, int objindex)",
        "start_line": 697,
        "end_line": 731
      },
      {
        "method_name": "lua_setfenv",
        "params": "(lua_State *L, int idx)",
        "start_line": 734,
        "end_line": 760
      },
      {
        "method_name": "adjustresults",
        "params": "(L,nres)",
        "start_line": 769,
        "end_line": 769
      },
      {
        "method_name": "lua_call",
        "params": "(lua_State *L, int nargs, int nresults)",
        "start_line": 776,
        "end_line": 785
      },
      {
        "method_name": "f_call",
        "params": "(lua_State *L, void *ud)",
        "start_line": 798,
        "end_line": 801
      },
      {
        "method_name": "lua_pcall",
        "params": "(lua_State *L, int nargs, int nresults, int errfunc)",
        "start_line": 805,
        "end_line": 825
      },
      {
        "method_name": "f_Ccall",
        "params": "(lua_State *L, void *ud)",
        "start_line": 837,
        "end_line": 847
      },
      {
        "method_name": "lua_cpcall",
        "params": "(lua_State *L, lua_CFunction func, void *ud)",
        "start_line": 850,
        "end_line": 859
      },
      {
        "method_name": "lua_load",
        "params": "(lua_State *L, lua_Reader reader, void *data,\n                      const char *chunkname)",
        "start_line": 863,
        "end_line": 872
      },
      {
        "method_name": "lua_dump",
        "params": "(lua_State *L, lua_Writer writer, void *data)",
        "start_line": 875,
        "end_line": 887
      },
      {
        "method_name": "lua_status",
        "params": "(lua_State *L)",
        "start_line": 890,
        "end_line": 892
      },
      {
        "method_name": "lua_gc",
        "params": "(lua_State *L, int what, int data)",
        "start_line": 899,
        "end_line": 955
      },
      {
        "method_name": "lua_error",
        "params": "(lua_State *L)",
        "start_line": 964,
        "end_line": 970
      },
      {
        "method_name": "lua_next",
        "params": "(lua_State *L, int idx)",
        "start_line": 973,
        "end_line": 987
      },
      {
        "method_name": "lua_concat",
        "params": "(lua_State *L, int n)",
        "start_line": 990,
        "end_line": 1004
      },
      {
        "method_name": "lua_getallocf",
        "params": "(lua_State *L, void **ud)",
        "start_line": 1007,
        "end_line": 1014
      },
      {
        "method_name": "lua_setallocf",
        "params": "(lua_State *L, lua_Alloc f, void *ud)",
        "start_line": 1017,
        "end_line": 1022
      },
      {
        "method_name": "*lua_newuserdata",
        "params": "(lua_State *L, size_t size)",
        "start_line": 1025,
        "end_line": 1034
      },
      {
        "method_name": "*aux_upvalue",
        "params": "(StkId fi, int n, TValue **val)",
        "start_line": 1039,
        "end_line": 1054
      },
      {
        "method_name": "*lua_getupvalue",
        "params": "(lua_State *L, int funcindex, int n)",
        "start_line": 1057,
        "end_line": 1068
      },
      {
        "method_name": "*lua_setupvalue",
        "params": "(lua_State *L, int funcindex, int n)",
        "start_line": 1071,
        "end_line": 1086
      }
    ],
    "structs": [
      {
        "struct_name": "CallS",
        "start_line": 792,
        "end_line": 795
      },
      {
        "struct_name": "CCallS",
        "start_line": 831,
        "end_line": 834
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lapi.h",
    "line": 16,
    "headers": [
      "lobject.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lauxlib.c",
    "line": 652,
    "headers": [
      "ctype.h",
      "errno.h",
      "stdarg.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h"
    ],
    "methods": [
      {
        "method_name": "luaL_argerror",
        "params": "(lua_State *L, int narg, const char *extramsg)",
        "start_line": 43,
        "end_line": 58
      },
      {
        "method_name": "luaL_typerror",
        "params": "(lua_State *L, int narg, const char *tname)",
        "start_line": 61,
        "end_line": 65
      },
      {
        "method_name": "tag_error",
        "params": "(lua_State *L, int narg, int tag)",
        "start_line": 68,
        "end_line": 70
      },
      {
        "method_name": "luaL_where",
        "params": "(lua_State *L, int level)",
        "start_line": 73,
        "end_line": 83
      },
      {
        "method_name": "luaL_error",
        "params": "(lua_State *L, const char *fmt, ...)",
        "start_line": 86,
        "end_line": 94
      },
      {
        "method_name": "luaL_checkoption",
        "params": "(lua_State *L, int narg, const char *def,\n                                 const char *const lst[])",
        "start_line": 100,
        "end_line": 109
      },
      {
        "method_name": "luaL_newmetatable",
        "params": "(lua_State *L, const char *tname)",
        "start_line": 112,
        "end_line": 121
      },
      {
        "method_name": "*luaL_checkudata",
        "params": "(lua_State *L, int ud, const char *tname)",
        "start_line": 124,
        "end_line": 137
      },
      {
        "method_name": "luaL_checkstack",
        "params": "(lua_State *L, int space, const char *mes)",
        "start_line": 140,
        "end_line": 143
      },
      {
        "method_name": "luaL_checktype",
        "params": "(lua_State *L, int narg, int t)",
        "start_line": 146,
        "end_line": 149
      },
      {
        "method_name": "luaL_checkany",
        "params": "(lua_State *L, int narg)",
        "start_line": 152,
        "end_line": 155
      },
      {
        "method_name": "*luaL_checklstring",
        "params": "(lua_State *L, int narg, size_t *len)",
        "start_line": 158,
        "end_line": 162
      },
      {
        "method_name": "*luaL_optlstring",
        "params": "(lua_State *L, int narg,\n                                        const char *def, size_t *len)",
        "start_line": 166,
        "end_line": 173
      },
      {
        "method_name": "luaL_checknumber",
        "params": "(lua_State *L, int narg)",
        "start_line": 176,
        "end_line": 181
      },
      {
        "method_name": "luaL_optnumber",
        "params": "(lua_State *L, int narg, lua_Number def)",
        "start_line": 184,
        "end_line": 186
      },
      {
        "method_name": "luaL_checkinteger",
        "params": "(lua_State *L, int narg)",
        "start_line": 189,
        "end_line": 194
      },
      {
        "method_name": "luaL_optinteger",
        "params": "(lua_State *L, int narg,\n                                                      lua_Integer def)",
        "start_line": 198,
        "end_line": 200
      },
      {
        "method_name": "luaL_getmetafield",
        "params": "(lua_State *L, int obj, const char *event)",
        "start_line": 203,
        "end_line": 216
      },
      {
        "method_name": "luaL_callmeta",
        "params": "(lua_State *L, int obj, const char *event)",
        "start_line": 219,
        "end_line": 226
      },
      {
        "method_name": "(luaL_register)",
        "params": "(lua_State *L, const char *libname,\n                                const luaL_Reg *l)",
        "start_line": 230,
        "end_line": 232
      },
      {
        "method_name": "libsize",
        "params": "(const luaL_Reg *l)",
        "start_line": 235,
        "end_line": 239
      },
      {
        "method_name": "luaI_openlib",
        "params": "(lua_State *L, const char *libname,\n                              const luaL_Reg *l, int nup)",
        "start_line": 243,
        "end_line": 268
      },
      {
        "method_name": "checkint",
        "params": "(lua_State *L, int topop)",
        "start_line": 280,
        "end_line": 284
      },
      {
        "method_name": "getsizes",
        "params": "(lua_State *L)",
        "start_line": 287,
        "end_line": 299
      },
      {
        "method_name": "luaL_setn",
        "params": "(lua_State *L, int t, int n)",
        "start_line": 302,
        "end_line": 318
      },
      {
        "method_name": "luaL_getn",
        "params": "(lua_State *L, int t)",
        "start_line": 321,
        "end_line": 332
      },
      {
        "method_name": "*luaL_gsub",
        "params": "(lua_State *L, const char *s, const char *p,\n                                                               const char *r)",
        "start_line": 341,
        "end_line": 354
      },
      {
        "method_name": "*luaL_findtable",
        "params": "(lua_State *L, int idx,\n                                       const char *fname, int szhint)",
        "start_line": 358,
        "end_line": 381
      },
      {
        "method_name": "emptybuffer",
        "params": "(luaL_Buffer *B)",
        "start_line": 398,
        "end_line": 407
      },
      {
        "method_name": "adjuststack",
        "params": "(luaL_Buffer *B)",
        "start_line": 410,
        "end_line": 426
      },
      {
        "method_name": "*luaL_prepbuffer",
        "params": "(luaL_Buffer *B)",
        "start_line": 429,
        "end_line": 433
      },
      {
        "method_name": "luaL_addlstring",
        "params": "(luaL_Buffer *B, const char *s, size_t l)",
        "start_line": 436,
        "end_line": 439
      },
      {
        "method_name": "luaL_addstring",
        "params": "(luaL_Buffer *B, const char *s)",
        "start_line": 442,
        "end_line": 444
      },
      {
        "method_name": "luaL_pushresult",
        "params": "(luaL_Buffer *B)",
        "start_line": 447,
        "end_line": 451
      },
      {
        "method_name": "luaL_addvalue",
        "params": "(luaL_Buffer *B)",
        "start_line": 454,
        "end_line": 469
      },
      {
        "method_name": "luaL_buffinit",
        "params": "(lua_State *L, luaL_Buffer *B)",
        "start_line": 472,
        "end_line": 476
      },
      {
        "method_name": "luaL_ref",
        "params": "(lua_State *L, int t)",
        "start_line": 481,
        "end_line": 501
      },
      {
        "method_name": "luaL_unref",
        "params": "(lua_State *L, int t, int ref)",
        "start_line": 504,
        "end_line": 512
      },
      {
        "method_name": "*getF",
        "params": "(lua_State *L, void *ud, size_t *size)",
        "start_line": 529,
        "end_line": 540
      },
      {
        "method_name": "errfile",
        "params": "(lua_State *L, const char *what, int fnameindex)",
        "start_line": 543,
        "end_line": 549
      },
      {
        "method_name": "luaL_loadfile",
        "params": "(lua_State *L, const char *filename)",
        "start_line": 552,
        "end_line": 590
      },
      {
        "method_name": "*getS",
        "params": "(lua_State *L, void *ud, size_t *size)",
        "start_line": 599,
        "end_line": 606
      },
      {
        "method_name": "luaL_loadbuffer",
        "params": "(lua_State *L, const char *buff, size_t size,\n                                const char *name)",
        "start_line": 610,
        "end_line": 615
      },
      {
        "method_name": "(luaL_loadstring)",
        "params": "(lua_State *L, const char *s)",
        "start_line": 618,
        "end_line": 620
      },
      {
        "method_name": "*l_alloc",
        "params": "(void *ud, void *ptr, size_t osize, size_t nsize)",
        "start_line": 627,
        "end_line": 636
      },
      {
        "method_name": "panic",
        "params": "(lua_State *L)",
        "start_line": 639,
        "end_line": 644
      },
      {
        "method_name": "*luaL_newstate",
        "params": "(void)",
        "start_line": 647,
        "end_line": 651
      }
    ],
    "structs": [
      {
        "struct_name": "LoadF",
        "start_line": 522,
        "end_line": 526
      },
      {
        "struct_name": "LoadS",
        "start_line": 593,
        "end_line": 596
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lauxlib.h",
    "line": 174,
    "headers": [
      "stddef.h",
      "stdio.h",
      "lua.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "luaL_Reg",
        "start_line": 35,
        "end_line": 38
      },
      {
        "struct_name": "luaL_Buffer",
        "start_line": 129,
        "end_line": 134
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lbaselib.c",
    "line": 653,
    "headers": [
      "ctype.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "luaB_print",
        "params": "(lua_State *L)",
        "start_line": 31,
        "end_line": 50
      },
      {
        "method_name": "luaB_tonumber",
        "params": "(lua_State *L)",
        "start_line": 53,
        "end_line": 78
      },
      {
        "method_name": "luaB_error",
        "params": "(lua_State *L)",
        "start_line": 81,
        "end_line": 90
      },
      {
        "method_name": "luaB_getmetatable",
        "params": "(lua_State *L)",
        "start_line": 93,
        "end_line": 101
      },
      {
        "method_name": "luaB_setmetatable",
        "params": "(lua_State *L)",
        "start_line": 104,
        "end_line": 114
      },
      {
        "method_name": "getfunc",
        "params": "(lua_State *L, int opt)",
        "start_line": 117,
        "end_line": 130
      },
      {
        "method_name": "luaB_getfenv",
        "params": "(lua_State *L)",
        "start_line": 133,
        "end_line": 140
      },
      {
        "method_name": "luaB_setfenv",
        "params": "(lua_State *L)",
        "start_line": 143,
        "end_line": 158
      },
      {
        "method_name": "luaB_rawequal",
        "params": "(lua_State *L)",
        "start_line": 161,
        "end_line": 166
      },
      {
        "method_name": "luaB_rawget",
        "params": "(lua_State *L)",
        "start_line": 169,
        "end_line": 175
      },
      {
        "method_name": "luaB_rawset",
        "params": "(lua_State *L)",
        "start_line": 177,
        "end_line": 184
      },
      {
        "method_name": "luaB_gcinfo",
        "params": "(lua_State *L)",
        "start_line": 187,
        "end_line": 190
      },
      {
        "method_name": "luaB_collectgarbage",
        "params": "(lua_State *L)",
        "start_line": 193,
        "end_line": 216
      },
      {
        "method_name": "luaB_type",
        "params": "(lua_State *L)",
        "start_line": 219,
        "end_line": 223
      },
      {
        "method_name": "luaB_next",
        "params": "(lua_State *L)",
        "start_line": 226,
        "end_line": 235
      },
      {
        "method_name": "luaB_pairs",
        "params": "(lua_State *L)",
        "start_line": 238,
        "end_line": 244
      },
      {
        "method_name": "ipairsaux",
        "params": "(lua_State *L)",
        "start_line": 247,
        "end_line": 254
      },
      {
        "method_name": "luaB_ipairs",
        "params": "(lua_State *L)",
        "start_line": 257,
        "end_line": 263
      },
      {
        "method_name": "load_aux",
        "params": "(lua_State *L, int status)",
        "start_line": 266,
        "end_line": 274
      },
      {
        "method_name": "luaB_loadstring",
        "params": "(lua_State *L)",
        "start_line": 277,
        "end_line": 282
      },
      {
        "method_name": "luaB_loadfile",
        "params": "(lua_State *L)",
        "start_line": 285,
        "end_line": 288
      },
      {
        "method_name": "*generic_reader",
        "params": "(lua_State *L, void *ud, size_t *size)",
        "start_line": 297,
        "end_line": 312
      },
      {
        "method_name": "luaB_load",
        "params": "(lua_State *L)",
        "start_line": 315,
        "end_line": 322
      },
      {
        "method_name": "luaB_dofile",
        "params": "(lua_State *L)",
        "start_line": 325,
        "end_line": 331
      },
      {
        "method_name": "luaB_assert",
        "params": "(lua_State *L)",
        "start_line": 334,
        "end_line": 339
      },
      {
        "method_name": "luaB_unpack",
        "params": "(lua_State *L)",
        "start_line": 342,
        "end_line": 355
      },
      {
        "method_name": "luaB_select",
        "params": "(lua_State *L)",
        "start_line": 358,
        "end_line": 371
      },
      {
        "method_name": "luaB_pcall",
        "params": "(lua_State *L)",
        "start_line": 374,
        "end_line": 381
      },
      {
        "method_name": "luaB_xpcall",
        "params": "(lua_State *L)",
        "start_line": 384,
        "end_line": 393
      },
      {
        "method_name": "luaB_tostring",
        "params": "(lua_State *L)",
        "start_line": 396,
        "end_line": 418
      },
      {
        "method_name": "luaB_newproxy",
        "params": "(lua_State *L)",
        "start_line": 421,
        "end_line": 444
      },
      {
        "method_name": "costatus",
        "params": "(lua_State *L, lua_State *co)",
        "start_line": 490,
        "end_line": 507
      },
      {
        "method_name": "luaB_costatus",
        "params": "(lua_State *L)",
        "start_line": 510,
        "end_line": 515
      },
      {
        "method_name": "auxresume",
        "params": "(lua_State *L, lua_State *co, int narg)",
        "start_line": 518,
        "end_line": 540
      },
      {
        "method_name": "luaB_coresume",
        "params": "(lua_State *L)",
        "start_line": 543,
        "end_line": 558
      },
      {
        "method_name": "luaB_auxwrap",
        "params": "(lua_State *L)",
        "start_line": 561,
        "end_line": 573
      },
      {
        "method_name": "luaB_cocreate",
        "params": "(lua_State *L)",
        "start_line": 576,
        "end_line": 583
      },
      {
        "method_name": "luaB_cowrap",
        "params": "(lua_State *L)",
        "start_line": 586,
        "end_line": 590
      },
      {
        "method_name": "luaB_yield",
        "params": "(lua_State *L)",
        "start_line": 593,
        "end_line": 595
      },
      {
        "method_name": "luaB_corunning",
        "params": "(lua_State *L)",
        "start_line": 598,
        "end_line": 602
      },
      {
        "method_name": "auxopen",
        "params": "(lua_State *L, const char *name,\n                     lua_CFunction f, lua_CFunction u)",
        "start_line": 619,
        "end_line": 623
      },
      {
        "method_name": "base_open",
        "params": "(lua_State *L)",
        "start_line": 626,
        "end_line": 645
      },
      {
        "method_name": "luaopen_base",
        "params": "(lua_State *L)",
        "start_line": 648,
        "end_line": 652
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lcode.c",
    "line": 831,
    "headers": [
      "stdlib.h",
      "lua.h",
      "lcode.h",
      "ldebug.h",
      "ldo.h",
      "lgc.h",
      "llex.h",
      "lmem.h",
      "lobject.h",
      "lopcodes.h",
      "lparser.h",
      "ltable.h"
    ],
    "methods": [
      {
        "method_name": "isnumeral",
        "params": "(expdesc *e)",
        "start_line": 30,
        "end_line": 32
      },
      {
        "method_name": "luaK_nil",
        "params": "(FuncState *fs, int from, int n)",
        "start_line": 35,
        "end_line": 56
      },
      {
        "method_name": "luaK_jump",
        "params": "(FuncState *fs)",
        "start_line": 59,
        "end_line": 66
      },
      {
        "method_name": "luaK_ret",
        "params": "(FuncState *fs, int first, int nret)",
        "start_line": 69,
        "end_line": 71
      },
      {
        "method_name": "condjump",
        "params": "(FuncState *fs, OpCode op, int A, int B, int C)",
        "start_line": 74,
        "end_line": 77
      },
      {
        "method_name": "fixjump",
        "params": "(FuncState *fs, int pc, int dest)",
        "start_line": 80,
        "end_line": 87
      },
      {
        "method_name": "luaK_getlabel",
        "params": "(FuncState *fs)",
        "start_line": 94,
        "end_line": 97
      },
      {
        "method_name": "getjump",
        "params": "(FuncState *fs, int pc)",
        "start_line": 100,
        "end_line": 106
      },
      {
        "method_name": "*getjumpcontrol",
        "params": "(FuncState *fs, int pc)",
        "start_line": 109,
        "end_line": 115
      },
      {
        "method_name": "need_value",
        "params": "(FuncState *fs, int list)",
        "start_line": 122,
        "end_line": 128
      },
      {
        "method_name": "patchtestreg",
        "params": "(FuncState *fs, int node, int reg)",
        "start_line": 131,
        "end_line": 141
      },
      {
        "method_name": "removevalues",
        "params": "(FuncState *fs, int list)",
        "start_line": 144,
        "end_line": 147
      },
      {
        "method_name": "patchlistaux",
        "params": "(FuncState *fs, int list, int vtarget, int reg,\n                          int dtarget)",
        "start_line": 151,
        "end_line": 160
      },
      {
        "method_name": "dischargejpc",
        "params": "(FuncState *fs)",
        "start_line": 163,
        "end_line": 166
      },
      {
        "method_name": "luaK_patchlist",
        "params": "(FuncState *fs, int list, int target)",
        "start_line": 169,
        "end_line": 176
      },
      {
        "method_name": "luaK_patchtohere",
        "params": "(FuncState *fs, int list)",
        "start_line": 179,
        "end_line": 182
      },
      {
        "method_name": "luaK_concat",
        "params": "(FuncState *fs, int *l1, int l2)",
        "start_line": 185,
        "end_line": 196
      },
      {
        "method_name": "luaK_checkstack",
        "params": "(FuncState *fs, int n)",
        "start_line": 199,
        "end_line": 206
      },
      {
        "method_name": "luaK_reserveregs",
        "params": "(FuncState *fs, int n)",
        "start_line": 209,
        "end_line": 212
      },
      {
        "method_name": "freereg",
        "params": "(FuncState *fs, int reg)",
        "start_line": 215,
        "end_line": 220
      },
      {
        "method_name": "freeexp",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 223,
        "end_line": 226
      },
      {
        "method_name": "addk",
        "params": "(FuncState *fs, TValue *k, TValue *v)",
        "start_line": 229,
        "end_line": 247
      },
      {
        "method_name": "luaK_stringK",
        "params": "(FuncState *fs, TString *s)",
        "start_line": 250,
        "end_line": 254
      },
      {
        "method_name": "luaK_numberK",
        "params": "(FuncState *fs, lua_Number r)",
        "start_line": 257,
        "end_line": 261
      },
      {
        "method_name": "boolK",
        "params": "(FuncState *fs, int b)",
        "start_line": 264,
        "end_line": 268
      },
      {
        "method_name": "nilK",
        "params": "(FuncState *fs)",
        "start_line": 271,
        "end_line": 277
      },
      {
        "method_name": "luaK_setreturns",
        "params": "(FuncState *fs, expdesc *e, int nresults)",
        "start_line": 280,
        "end_line": 289
      },
      {
        "method_name": "luaK_setoneret",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 292,
        "end_line": 301
      },
      {
        "method_name": "luaK_dischargevars",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 304,
        "end_line": 334
      },
      {
        "method_name": "code_label",
        "params": "(FuncState *fs, int A, int b, int jump)",
        "start_line": 337,
        "end_line": 340
      },
      {
        "method_name": "discharge2reg",
        "params": "(FuncState *fs, expdesc *e, int reg)",
        "start_line": 343,
        "end_line": 379
      },
      {
        "method_name": "discharge2anyreg",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 382,
        "end_line": 387
      },
      {
        "method_name": "exp2reg",
        "params": "(FuncState *fs, expdesc *e, int reg)",
        "start_line": 390,
        "end_line": 411
      },
      {
        "method_name": "luaK_exp2nextreg",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 414,
        "end_line": 419
      },
      {
        "method_name": "luaK_exp2anyreg",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 422,
        "end_line": 433
      },
      {
        "method_name": "luaK_exp2val",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 436,
        "end_line": 441
      },
      {
        "method_name": "luaK_exp2RK",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 444,
        "end_line": 469
      },
      {
        "method_name": "luaK_storevar",
        "params": "(FuncState *fs, expdesc *var, expdesc *ex)",
        "start_line": 472,
        "end_line": 500
      },
      {
        "method_name": "luaK_self",
        "params": "(FuncState *fs, expdesc *e, expdesc *key)",
        "start_line": 503,
        "end_line": 513
      },
      {
        "method_name": "invertjump",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 516,
        "end_line": 521
      },
      {
        "method_name": "jumponcond",
        "params": "(FuncState *fs, expdesc *e, int cond)",
        "start_line": 524,
        "end_line": 536
      },
      {
        "method_name": "luaK_goiftrue",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 539,
        "end_line": 560
      },
      {
        "method_name": "luaK_goiffalse",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 563,
        "end_line": 583
      },
      {
        "method_name": "codenot",
        "params": "(FuncState *fs, expdesc *e)",
        "start_line": 586,
        "end_line": 618
      },
      {
        "method_name": "luaK_indexed",
        "params": "(FuncState *fs, expdesc *t, expdesc *k)",
        "start_line": 621,
        "end_line": 624
      },
      {
        "method_name": "constfolding",
        "params": "(OpCode op, expdesc *e1, expdesc *e2)",
        "start_line": 627,
        "end_line": 650
      },
      {
        "method_name": "codearith",
        "params": "(FuncState *fs, OpCode op, expdesc *e1, expdesc *e2)",
        "start_line": 653,
        "end_line": 670
      },
      {
        "method_name": "codecomp",
        "params": "(FuncState *fs, OpCode op, int cond, expdesc *e1,\n                                                          expdesc *e2)",
        "start_line": 674,
        "end_line": 686
      },
      {
        "method_name": "luaK_prefix",
        "params": "(FuncState *fs, UnOpr op, expdesc *e)",
        "start_line": 689,
        "end_line": 707
      },
      {
        "method_name": "luaK_infix",
        "params": "(FuncState *fs, BinOpr op, expdesc *v)",
        "start_line": 710,
        "end_line": 734
      },
      {
        "method_name": "luaK_posfix",
        "params": "(FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2)",
        "start_line": 737,
        "end_line": 781
      },
      {
        "method_name": "luaK_fixline",
        "params": "(FuncState *fs, int line)",
        "start_line": 784,
        "end_line": 786
      },
      {
        "method_name": "luaK_code",
        "params": "(FuncState *fs, Instruction i, int line)",
        "start_line": 789,
        "end_line": 801
      },
      {
        "method_name": "luaK_codeABC",
        "params": "(FuncState *fs, OpCode o, int a, int b, int c)",
        "start_line": 804,
        "end_line": 809
      },
      {
        "method_name": "luaK_codeABx",
        "params": "(FuncState *fs, OpCode o, int a, unsigned int bc)",
        "start_line": 812,
        "end_line": 816
      },
      {
        "method_name": "luaK_setlist",
        "params": "(FuncState *fs, int base, int nelems, int tostore)",
        "start_line": 819,
        "end_line": 830
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lcode.h",
    "line": 76,
    "headers": [
      "llex.h",
      "lobject.h",
      "lopcodes.h",
      "lparser.h"
    ],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "BinOpr",
        "start_line": 26,
        "end_line": 33
      },
      {
        "enum_name": "UnOpr",
        "start_line": 36,
        "end_line": 36
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ldblib.c",
    "line": 398,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "db_getregistry",
        "params": "(lua_State *L)",
        "start_line": 22,
        "end_line": 25
      },
      {
        "method_name": "db_getmetatable",
        "params": "(lua_State *L)",
        "start_line": 28,
        "end_line": 34
      },
      {
        "method_name": "db_setmetatable",
        "params": "(lua_State *L)",
        "start_line": 37,
        "end_line": 44
      },
      {
        "method_name": "db_getfenv",
        "params": "(lua_State *L)",
        "start_line": 47,
        "end_line": 51
      },
      {
        "method_name": "db_setfenv",
        "params": "(lua_State *L)",
        "start_line": 54,
        "end_line": 61
      },
      {
        "method_name": "settabss",
        "params": "(lua_State *L, const char *i, const char *v)",
        "start_line": 64,
        "end_line": 67
      },
      {
        "method_name": "settabsi",
        "params": "(lua_State *L, const char *i, int v)",
        "start_line": 70,
        "end_line": 73
      },
      {
        "method_name": "*getthread",
        "params": "(lua_State *L, int *arg)",
        "start_line": 76,
        "end_line": 85
      },
      {
        "method_name": "treatstackoption",
        "params": "(lua_State *L, lua_State *L1, const char *fname)",
        "start_line": 88,
        "end_line": 96
      },
      {
        "method_name": "db_getinfo",
        "params": "(lua_State *L)",
        "start_line": 99,
        "end_line": 141
      },
      {
        "method_name": "db_getlocal",
        "params": "(lua_State *L)",
        "start_line": 144,
        "end_line": 162
      },
      {
        "method_name": "db_setlocal",
        "params": "(lua_State *L)",
        "start_line": 165,
        "end_line": 176
      },
      {
        "method_name": "auxupvalue",
        "params": "(lua_State *L, int get)",
        "start_line": 179,
        "end_line": 189
      },
      {
        "method_name": "db_getupvalue",
        "params": "(lua_State *L)",
        "start_line": 192,
        "end_line": 194
      },
      {
        "method_name": "db_setupvalue",
        "params": "(lua_State *L)",
        "start_line": 197,
        "end_line": 200
      },
      {
        "method_name": "hookf",
        "params": "(lua_State *L, lua_Debug *ar)",
        "start_line": 207,
        "end_line": 222
      },
      {
        "method_name": "makemask",
        "params": "(const char *smask, int count)",
        "start_line": 225,
        "end_line": 232
      },
      {
        "method_name": "*unmakemask",
        "params": "(int mask, char *smask)",
        "start_line": 235,
        "end_line": 242
      },
      {
        "method_name": "gethooktable",
        "params": "(lua_State *L)",
        "start_line": 245,
        "end_line": 255
      },
      {
        "method_name": "db_sethook",
        "params": "(lua_State *L)",
        "start_line": 258,
        "end_line": 279
      },
      {
        "method_name": "db_gethook",
        "params": "(lua_State *L)",
        "start_line": 282,
        "end_line": 299
      },
      {
        "method_name": "db_debug",
        "params": "(lua_State *L)",
        "start_line": 302,
        "end_line": 316
      },
      {
        "method_name": "db_errorfb",
        "params": "(lua_State *L)",
        "start_line": 322,
        "end_line": 372
      },
      {
        "method_name": "luaopen_debug",
        "params": "(lua_State *L)",
        "start_line": 394,
        "end_line": 397
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ldebug.c",
    "line": 638,
    "headers": [
      "stdarg.h",
      "stddef.h",
      "string.h",
      "lua.h",
      "lapi.h",
      "lcode.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lobject.h",
      "lopcodes.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h",
      "lvm.h"
    ],
    "methods": [
      {
        "method_name": "currentpc",
        "params": "(lua_State *L, CallInfo *ci)",
        "start_line": 36,
        "end_line": 41
      },
      {
        "method_name": "currentline",
        "params": "(lua_State *L, CallInfo *ci)",
        "start_line": 44,
        "end_line": 50
      },
      {
        "method_name": "lua_sethook",
        "params": "(lua_State *L, lua_Hook func, int mask, int count)",
        "start_line": 56,
        "end_line": 66
      },
      {
        "method_name": "lua_gethook",
        "params": "(lua_State *L)",
        "start_line": 69,
        "end_line": 71
      },
      {
        "method_name": "lua_gethookmask",
        "params": "(lua_State *L)",
        "start_line": 74,
        "end_line": 76
      },
      {
        "method_name": "lua_gethookcount",
        "params": "(lua_State *L)",
        "start_line": 79,
        "end_line": 81
      },
      {
        "method_name": "lua_getstack",
        "params": "(lua_State *L, int level, lua_Debug *ar)",
        "start_line": 84,
        "end_line": 104
      },
      {
        "method_name": "*getluaproto",
        "params": "(CallInfo *ci)",
        "start_line": 107,
        "end_line": 109
      },
      {
        "method_name": "*findlocal",
        "params": "(lua_State *L, CallInfo *ci, int n)",
        "start_line": 112,
        "end_line": 124
      },
      {
        "method_name": "*lua_getlocal",
        "params": "(lua_State *L, const lua_Debug *ar, int n)",
        "start_line": 127,
        "end_line": 135
      },
      {
        "method_name": "*lua_setlocal",
        "params": "(lua_State *L, const lua_Debug *ar, int n)",
        "start_line": 138,
        "end_line": 147
      },
      {
        "method_name": "funcinfo",
        "params": "(lua_Debug *ar, Closure *cl)",
        "start_line": 150,
        "end_line": 164
      },
      {
        "method_name": "info_tailcall",
        "params": "(lua_Debug *ar)",
        "start_line": 167,
        "end_line": 174
      },
      {
        "method_name": "collectvalidlines",
        "params": "(lua_State *L, Closure *f)",
        "start_line": 177,
        "end_line": 190
      },
      {
        "method_name": "auxgetinfo",
        "params": "(lua_State *L, const char *what, lua_Debug *ar,\n                    Closure *f, CallInfo *ci)",
        "start_line": 194,
        "end_line": 229
      },
      {
        "method_name": "lua_getinfo",
        "params": "(lua_State *L, const char *what, lua_Debug *ar)",
        "start_line": 232,
        "end_line": 259
      },
      {
        "method_name": "precheck",
        "params": "(const Proto *pt)",
        "start_line": 276,
        "end_line": 285
      },
      {
        "method_name": "luaG_checkopenop",
        "params": "(Instruction i)",
        "start_line": 290,
        "end_line": 301
      },
      {
        "method_name": "checkArgMode",
        "params": "(const Proto *pt, int r, enum OpArgMask mode)",
        "start_line": 304,
        "end_line": 314
      },
      {
        "method_name": "symbexec",
        "params": "(const Proto *pt, int lastpc, int reg)",
        "start_line": 317,
        "end_line": 475
      },
      {
        "method_name": "luaG_checkcode",
        "params": "(const Proto *pt)",
        "start_line": 484,
        "end_line": 486
      },
      {
        "method_name": "*kname",
        "params": "(Proto *p, int c)",
        "start_line": 489,
        "end_line": 494
      },
      {
        "method_name": "*getobjname",
        "params": "(lua_State *L, CallInfo *ci, int stackpos,\n                               const char **name)",
        "start_line": 498,
        "end_line": 541
      },
      {
        "method_name": "*getfuncname",
        "params": "(lua_State *L, CallInfo *ci, const char **name)",
        "start_line": 544,
        "end_line": 555
      },
      {
        "method_name": "isinstack",
        "params": "(CallInfo *ci, const TValue *o)",
        "start_line": 559,
        "end_line": 564
      },
      {
        "method_name": "luaG_typeerror",
        "params": "(lua_State *L, const TValue *o, const char *op)",
        "start_line": 567,
        "end_line": 578
      },
      {
        "method_name": "luaG_concaterror",
        "params": "(lua_State *L, StkId p1, StkId p2)",
        "start_line": 581,
        "end_line": 585
      },
      {
        "method_name": "luaG_aritherror",
        "params": "(lua_State *L, const TValue *p1, const TValue *p2)",
        "start_line": 588,
        "end_line": 593
      },
      {
        "method_name": "luaG_ordererror",
        "params": "(lua_State *L, const TValue *p1, const TValue *p2)",
        "start_line": 596,
        "end_line": 604
      },
      {
        "method_name": "addinfo",
        "params": "(lua_State *L, const char *msg)",
        "start_line": 607,
        "end_line": 615
      },
      {
        "method_name": "luaG_errormsg",
        "params": "(lua_State *L)",
        "start_line": 618,
        "end_line": 628
      },
      {
        "method_name": "luaG_runerror",
        "params": "(lua_State *L, const char *fmt, ...)",
        "start_line": 631,
        "end_line": 637
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ldebug.h",
    "line": 33,
    "headers": [
      "lstate.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ldo.c",
    "line": 519,
    "headers": [
      "setjmp.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lgc.h",
      "lmem.h",
      "lobject.h",
      "lopcodes.h",
      "lparser.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h",
      "lundump.h",
      "lvm.h",
      "lzio.h"
    ],
    "methods": [
      {
        "method_name": "luaD_seterrorobj",
        "params": "(lua_State *L, int errcode, StkId oldtop)",
        "start_line": 51,
        "end_line": 68
      },
      {
        "method_name": "restore_stack_limit",
        "params": "(lua_State *L)",
        "start_line": 71,
        "end_line": 78
      },
      {
        "method_name": "resetstack",
        "params": "(lua_State *L, int status)",
        "start_line": 81,
        "end_line": 91
      },
      {
        "method_name": "luaD_throw",
        "params": "(lua_State *L, int errcode)",
        "start_line": 94,
        "end_line": 108
      },
      {
        "method_name": "luaD_rawrunprotected",
        "params": "(lua_State *L, Pfunc f, void *ud)",
        "start_line": 111,
        "end_line": 121
      },
      {
        "method_name": "correctstack",
        "params": "(lua_State *L, TValue *oldstack)",
        "start_line": 126,
        "end_line": 138
      },
      {
        "method_name": "luaD_reallocstack",
        "params": "(lua_State *L, int newsize)",
        "start_line": 141,
        "end_line": 149
      },
      {
        "method_name": "luaD_reallocCI",
        "params": "(lua_State *L, int newsize)",
        "start_line": 152,
        "end_line": 158
      },
      {
        "method_name": "luaD_growstack",
        "params": "(lua_State *L, int n)",
        "start_line": 161,
        "end_line": 166
      },
      {
        "method_name": "*growCI",
        "params": "(lua_State *L)",
        "start_line": 169,
        "end_line": 178
      },
      {
        "method_name": "luaD_callhook",
        "params": "(lua_State *L, int event, int line)",
        "start_line": 181,
        "end_line": 205
      },
      {
        "method_name": "adjust_varargs",
        "params": "(lua_State *L, Proto *p, int actual)",
        "start_line": 208,
        "end_line": 241
      },
      {
        "method_name": "tryfuncTM",
        "params": "(lua_State *L, StkId func)",
        "start_line": 244,
        "end_line": 256
      },
      {
        "method_name": "luaD_precall",
        "params": "(lua_State *L, StkId func, int nresults)",
        "start_line": 265,
        "end_line": 329
      },
      {
        "method_name": "callrethooks",
        "params": "(lua_State *L, StkId firstResult)",
        "start_line": 332,
        "end_line": 340
      },
      {
        "method_name": "luaD_poscall",
        "params": "(lua_State *L, StkId firstResult)",
        "start_line": 343,
        "end_line": 361
      },
      {
        "method_name": "luaD_call",
        "params": "(lua_State *L, StkId func, int nResults)",
        "start_line": 370,
        "end_line": 381
      },
      {
        "method_name": "resume",
        "params": "(lua_State *L, void *ud)",
        "start_line": 384,
        "end_line": 406
      },
      {
        "method_name": "resume_error",
        "params": "(lua_State *L, const char *msg)",
        "start_line": 409,
        "end_line": 415
      },
      {
        "method_name": "lua_resume",
        "params": "(lua_State *L, int nargs)",
        "start_line": 418,
        "end_line": 441
      },
      {
        "method_name": "lua_yield",
        "params": "(lua_State *L, int nresults)",
        "start_line": 444,
        "end_line": 453
      },
      {
        "method_name": "luaD_pcall",
        "params": "(lua_State *L, Pfunc func, void *u,\n                ptrdiff_t old_top, ptrdiff_t ef)",
        "start_line": 457,
        "end_line": 478
      },
      {
        "method_name": "f_parser",
        "params": "(lua_State *L, void *ud)",
        "start_line": 491,
        "end_line": 506
      },
      {
        "method_name": "luaD_protectedparser",
        "params": "(lua_State *L, ZIO *z, const char *name)",
        "start_line": 509,
        "end_line": 517
      }
    ],
    "structs": [
      {
        "struct_name": "lua_longjmp",
        "start_line": 44,
        "end_line": 48
      },
      {
        "struct_name": "SParser",
        "start_line": 485,
        "end_line": 489
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ldo.h",
    "line": 57,
    "headers": [
      "lobject.h",
      "lstate.h",
      "lzio.h"
    ],
    "methods": [
      {
        "method_name": "incr_top",
        "params": "(L)",
        "start_line": 22,
        "end_line": 22
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ldump.c",
    "line": 164,
    "headers": [
      "stddef.h",
      "lua.h",
      "lobject.h",
      "lstate.h",
      "lundump.h"
    ],
    "methods": [
      {
        "method_name": "DumpBlock",
        "params": "(const void* b, size_t size, DumpState* D)",
        "start_line": 30,
        "end_line": 37
      },
      {
        "method_name": "DumpChar",
        "params": "(int y, DumpState* D)",
        "start_line": 40,
        "end_line": 43
      },
      {
        "method_name": "DumpInt",
        "params": "(int x, DumpState* D)",
        "start_line": 46,
        "end_line": 48
      },
      {
        "method_name": "DumpNumber",
        "params": "(lua_Number x, DumpState* D)",
        "start_line": 51,
        "end_line": 53
      },
      {
        "method_name": "DumpVector",
        "params": "(const void* b, int n, size_t size, DumpState* D)",
        "start_line": 56,
        "end_line": 59
      },
      {
        "method_name": "DumpString",
        "params": "(const TString* s, DumpState* D)",
        "start_line": 62,
        "end_line": 74
      },
      {
        "method_name": "DumpConstants",
        "params": "(const Proto* f, DumpState* D)",
        "start_line": 81,
        "end_line": 109
      },
      {
        "method_name": "DumpDebug",
        "params": "(const Proto* f, DumpState* D)",
        "start_line": 112,
        "end_line": 127
      },
      {
        "method_name": "DumpFunction",
        "params": "(const Proto* f, const TString* p, DumpState* D)",
        "start_line": 130,
        "end_line": 141
      },
      {
        "method_name": "DumpHeader",
        "params": "(DumpState* D)",
        "start_line": 144,
        "end_line": 148
      },
      {
        "method_name": "luaU_dump",
        "params": "(lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)",
        "start_line": 154,
        "end_line": 164
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 18,
        "end_line": 24
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lfunc.c",
    "line": 174,
    "headers": [
      "stddef.h",
      "lua.h",
      "lfunc.h",
      "lgc.h",
      "lmem.h",
      "lobject.h",
      "lstate.h"
    ],
    "methods": [
      {
        "method_name": "*luaF_newCclosure",
        "params": "(lua_State *L, int nelems, Table *e)",
        "start_line": 23,
        "end_line": 30
      },
      {
        "method_name": "*luaF_newLclosure",
        "params": "(lua_State *L, int nelems, Table *e)",
        "start_line": 33,
        "end_line": 41
      },
      {
        "method_name": "*luaF_newupval",
        "params": "(lua_State *L)",
        "start_line": 44,
        "end_line": 50
      },
      {
        "method_name": "*luaF_findupval",
        "params": "(lua_State *L, StkId level)",
        "start_line": 53,
        "end_line": 79
      },
      {
        "method_name": "unlinkupval",
        "params": "(UpVal *uv)",
        "start_line": 82,
        "end_line": 86
      },
      {
        "method_name": "luaF_freeupval",
        "params": "(lua_State *L, UpVal *uv)",
        "start_line": 89,
        "end_line": 93
      },
      {
        "method_name": "luaF_close",
        "params": "(lua_State *L, StkId level)",
        "start_line": 96,
        "end_line": 112
      },
      {
        "method_name": "*luaF_newproto",
        "params": "(lua_State *L)",
        "start_line": 115,
        "end_line": 138
      },
      {
        "method_name": "luaF_freeproto",
        "params": "(lua_State *L, Proto *f)",
        "start_line": 141,
        "end_line": 149
      },
      {
        "method_name": "luaF_freeclosure",
        "params": "(lua_State *L, Closure *c)",
        "start_line": 152,
        "end_line": 156
      },
      {
        "method_name": "*luaF_getlocalname",
        "params": "(const Proto *f, int local_number, int pc)",
        "start_line": 163,
        "end_line": 173
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lfunc.h",
    "line": 34,
    "headers": [
      "lobject.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lgc.c",
    "line": 710,
    "headers": [
      "string.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lgc.h",
      "lmem.h",
      "lobject.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h"
    ],
    "methods": [
      {
        "method_name": "markvalue",
        "params": "(g,o)",
        "start_line": 52,
        "end_line": 53
      },
      {
        "method_name": "markobject",
        "params": "(g,t)",
        "start_line": 55,
        "end_line": 56
      },
      {
        "method_name": "removeentry",
        "params": "(Node *n)",
        "start_line": 62,
        "end_line": 66
      },
      {
        "method_name": "reallymarkobject",
        "params": "(global_State *g, GCObject *o)",
        "start_line": 69,
        "end_line": 112
      },
      {
        "method_name": "marktmu",
        "params": "(global_State *g)",
        "start_line": 115,
        "end_line": 124
      },
      {
        "method_name": "luaC_separateudata",
        "params": "(lua_State *L, int all)",
        "start_line": 128,
        "end_line": 155
      },
      {
        "method_name": "traversetable",
        "params": "(global_State *g, Table *h)",
        "start_line": 158,
        "end_line": 196
      },
      {
        "method_name": "traverseproto",
        "params": "(global_State *g, Proto *f)",
        "start_line": 203,
        "end_line": 220
      },
      {
        "method_name": "traverseclosure",
        "params": "(global_State *g, Closure *cl)",
        "start_line": 224,
        "end_line": 238
      },
      {
        "method_name": "checkstacksizes",
        "params": "(lua_State *L, StkId max)",
        "start_line": 241,
        "end_line": 253
      },
      {
        "method_name": "traversestack",
        "params": "(global_State *g, lua_State *l)",
        "start_line": 256,
        "end_line": 270
      },
      {
        "method_name": "propagatemark",
        "params": "(global_State *g)",
        "start_line": 277,
        "end_line": 320
      },
      {
        "method_name": "propagateall",
        "params": "(global_State *g)",
        "start_line": 323,
        "end_line": 327
      },
      {
        "method_name": "iscleared",
        "params": "(const TValue *o, int iskey)",
        "start_line": 337,
        "end_line": 345
      },
      {
        "method_name": "cleartable",
        "params": "(GCObject *l)",
        "start_line": 351,
        "end_line": 375
      },
      {
        "method_name": "freeobj",
        "params": "(lua_State *L, GCObject *o)",
        "start_line": 378,
        "end_line": 400
      },
      {
        "method_name": "**sweeplist",
        "params": "(lua_State *L, GCObject **p, lu_mem count)",
        "start_line": 407,
        "end_line": 428
      },
      {
        "method_name": "checkSizes",
        "params": "(lua_State *L)",
        "start_line": 431,
        "end_line": 442
      },
      {
        "method_name": "GCTM",
        "params": "(lua_State *L)",
        "start_line": 445,
        "end_line": 471
      },
      {
        "method_name": "luaC_callGCTM",
        "params": "(lua_State *L)",
        "start_line": 477,
        "end_line": 480
      },
      {
        "method_name": "luaC_freeall",
        "params": "(lua_State *L)",
        "start_line": 483,
        "end_line": 490
      },
      {
        "method_name": "markmt",
        "params": "(global_State *g)",
        "start_line": 493,
        "end_line": 497
      },
      {
        "method_name": "markroot",
        "params": "(lua_State *L)",
        "start_line": 501,
        "end_line": 512
      },
      {
        "method_name": "remarkupvals",
        "params": "(global_State *g)",
        "start_line": 515,
        "end_line": 522
      },
      {
        "method_name": "atomic",
        "params": "(lua_State *L)",
        "start_line": 525,
        "end_line": 553
      },
      {
        "method_name": "singlestep",
        "params": "(lua_State *L)",
        "start_line": 556,
        "end_line": 607
      },
      {
        "method_name": "luaC_step",
        "params": "(lua_State *L)",
        "start_line": 610,
        "end_line": 632
      },
      {
        "method_name": "luaC_fullgc",
        "params": "(lua_State *L)",
        "start_line": 635,
        "end_line": 658
      },
      {
        "method_name": "luaC_barrierf",
        "params": "(lua_State *L, GCObject *o, GCObject *v)",
        "start_line": 661,
        "end_line": 671
      },
      {
        "method_name": "luaC_barrierback",
        "params": "(lua_State *L, Table *t)",
        "start_line": 674,
        "end_line": 682
      },
      {
        "method_name": "luaC_link",
        "params": "(lua_State *L, GCObject *o, lu_byte tt)",
        "start_line": 685,
        "end_line": 691
      },
      {
        "method_name": "luaC_linkupval",
        "params": "(lua_State *L, UpVal *uv)",
        "start_line": 694,
        "end_line": 709
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lgc.h",
    "line": 110,
    "headers": [
      "lobject.h"
    ],
    "methods": [
      {
        "method_name": "luaC_checkGC",
        "params": "(L)",
        "start_line": 80,
        "end_line": 83
      },
      {
        "method_name": "luaC_barrier",
        "params": "(L,p,v)",
        "start_line": 86,
        "end_line": 87
      },
      {
        "method_name": "luaC_barriert",
        "params": "(L,t,v)",
        "start_line": 89,
        "end_line": 90
      },
      {
        "method_name": "luaC_objbarrier",
        "params": "(L,p,o)",
        "start_line": 93,
        "end_line": 94
      },
      {
        "method_name": "luaC_objbarriert",
        "params": "(L,t,o)",
        "start_line": 97,
        "end_line": 97
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/linit.c",
    "line": 38,
    "headers": [
      "lua.h",
      "lualib.h",
      "lauxlib.h"
    ],
    "methods": [
      {
        "method_name": "luaL_openlibs",
        "params": "(lua_State *L)",
        "start_line": 30,
        "end_line": 37
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/liolib.c",
    "line": 556,
    "headers": [
      "errno.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "pushresult",
        "params": "(lua_State *L, int i, const char *filename)",
        "start_line": 30,
        "end_line": 45
      },
      {
        "method_name": "fileerror",
        "params": "(lua_State *L, int arg, const char *filename)",
        "start_line": 48,
        "end_line": 51
      },
      {
        "method_name": "io_type",
        "params": "(lua_State *L)",
        "start_line": 57,
        "end_line": 69
      },
      {
        "method_name": "*tofile",
        "params": "(lua_State *L)",
        "start_line": 72,
        "end_line": 77
      },
      {
        "method_name": "**newfile",
        "params": "(lua_State *L)",
        "start_line": 86,
        "end_line": 92
      },
      {
        "method_name": "io_noclose",
        "params": "(lua_State *L)",
        "start_line": 98,
        "end_line": 102
      },
      {
        "method_name": "io_pclose",
        "params": "(lua_State *L)",
        "start_line": 108,
        "end_line": 113
      },
      {
        "method_name": "io_fclose",
        "params": "(lua_State *L)",
        "start_line": 119,
        "end_line": 124
      },
      {
        "method_name": "aux_close",
        "params": "(lua_State *L)",
        "start_line": 127,
        "end_line": 131
      },
      {
        "method_name": "io_close",
        "params": "(lua_State *L)",
        "start_line": 134,
        "end_line": 139
      },
      {
        "method_name": "io_gc",
        "params": "(lua_State *L)",
        "start_line": 142,
        "end_line": 148
      },
      {
        "method_name": "io_tostring",
        "params": "(lua_State *L)",
        "start_line": 151,
        "end_line": 158
      },
      {
        "method_name": "io_open",
        "params": "(lua_State *L)",
        "start_line": 161,
        "end_line": 167
      },
      {
        "method_name": "io_popen",
        "params": "(lua_State *L)",
        "start_line": 174,
        "end_line": 180
      },
      {
        "method_name": "io_tmpfile",
        "params": "(lua_State *L)",
        "start_line": 183,
        "end_line": 187
      },
      {
        "method_name": "*getiofile",
        "params": "(lua_State *L, int findex)",
        "start_line": 190,
        "end_line": 197
      },
      {
        "method_name": "g_iofile",
        "params": "(lua_State *L, int f, const char *mode)",
        "start_line": 200,
        "end_line": 218
      },
      {
        "method_name": "io_input",
        "params": "(lua_State *L)",
        "start_line": 221,
        "end_line": 223
      },
      {
        "method_name": "io_output",
        "params": "(lua_State *L)",
        "start_line": 226,
        "end_line": 228
      },
      {
        "method_name": "aux_lines",
        "params": "(lua_State *L, int idx, int toclose)",
        "start_line": 234,
        "end_line": 238
      },
      {
        "method_name": "f_lines",
        "params": "(lua_State *L)",
        "start_line": 241,
        "end_line": 245
      },
      {
        "method_name": "io_lines",
        "params": "(lua_State *L)",
        "start_line": 248,
        "end_line": 263
      },
      {
        "method_name": "read_number",
        "params": "(lua_State *L, FILE *f)",
        "start_line": 273,
        "end_line": 283
      },
      {
        "method_name": "test_eof",
        "params": "(lua_State *L, FILE *f)",
        "start_line": 286,
        "end_line": 291
      },
      {
        "method_name": "read_line",
        "params": "(lua_State *L, FILE *f)",
        "start_line": 294,
        "end_line": 313
      },
      {
        "method_name": "read_chars",
        "params": "(lua_State *L, FILE *f, size_t n)",
        "start_line": 316,
        "end_line": 331
      },
      {
        "method_name": "g_read",
        "params": "(lua_State *L, FILE *f, int first)",
        "start_line": 334,
        "end_line": 378
      },
      {
        "method_name": "io_read",
        "params": "(lua_State *L)",
        "start_line": 381,
        "end_line": 383
      },
      {
        "method_name": "f_read",
        "params": "(lua_State *L)",
        "start_line": 386,
        "end_line": 388
      },
      {
        "method_name": "io_readline",
        "params": "(lua_State *L)",
        "start_line": 391,
        "end_line": 408
      },
      {
        "method_name": "g_write",
        "params": "(lua_State *L, FILE *f, int arg)",
        "start_line": 413,
        "end_line": 429
      },
      {
        "method_name": "io_write",
        "params": "(lua_State *L)",
        "start_line": 432,
        "end_line": 434
      },
      {
        "method_name": "f_write",
        "params": "(lua_State *L)",
        "start_line": 437,
        "end_line": 439
      },
      {
        "method_name": "f_seek",
        "params": "(lua_State *L)",
        "start_line": 442,
        "end_line": 455
      },
      {
        "method_name": "f_setvbuf",
        "params": "(lua_State *L)",
        "start_line": 458,
        "end_line": 466
      },
      {
        "method_name": "io_flush",
        "params": "(lua_State *L)",
        "start_line": 470,
        "end_line": 472
      },
      {
        "method_name": "f_flush",
        "params": "(lua_State *L)",
        "start_line": 475,
        "end_line": 477
      },
      {
        "method_name": "createmeta",
        "params": "(lua_State *L)",
        "start_line": 510,
        "end_line": 515
      },
      {
        "method_name": "createstdfile",
        "params": "(lua_State *L, FILE *f, int k, const char *fname)",
        "start_line": 518,
        "end_line": 527
      },
      {
        "method_name": "newfenv",
        "params": "(lua_State *L, lua_CFunction cls)",
        "start_line": 530,
        "end_line": 534
      },
      {
        "method_name": "luaopen_io",
        "params": "(lua_State *L)",
        "start_line": 537,
        "end_line": 555
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/llex.c",
    "line": 463,
    "headers": [
      "ctype.h",
      "locale.h",
      "string.h",
      "lua.h",
      "ldo.h",
      "llex.h",
      "lobject.h",
      "lparser.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "lzio.h"
    ],
    "methods": [
      {
        "method_name": "save",
        "params": "(LexState *ls, int c)",
        "start_line": 51,
        "end_line": 61
      },
      {
        "method_name": "luaX_init",
        "params": "(lua_State *L)",
        "start_line": 64,
        "end_line": 72
      },
      {
        "method_name": "*luaX_token2str",
        "params": "(LexState *ls, int token)",
        "start_line": 78,
        "end_line": 86
      },
      {
        "method_name": "*txtToken",
        "params": "(LexState *ls, int token)",
        "start_line": 89,
        "end_line": 99
      },
      {
        "method_name": "luaX_lexerror",
        "params": "(LexState *ls, const char *msg, int token)",
        "start_line": 102,
        "end_line": 109
      },
      {
        "method_name": "luaX_syntaxerror",
        "params": "(LexState *ls, const char *msg)",
        "start_line": 112,
        "end_line": 114
      },
      {
        "method_name": "*luaX_newstring",
        "params": "(LexState *ls, const char *str, size_t l)",
        "start_line": 117,
        "end_line": 126
      },
      {
        "method_name": "inclinenumber",
        "params": "(LexState *ls)",
        "start_line": 129,
        "end_line": 137
      },
      {
        "method_name": "luaX_setinput",
        "params": "(lua_State *L, LexState *ls, ZIO *z, TString *source)",
        "start_line": 140,
        "end_line": 151
      },
      {
        "method_name": "check_next",
        "params": "(LexState *ls, const char *set)",
        "start_line": 163,
        "end_line": 168
      },
      {
        "method_name": "buffreplace",
        "params": "(LexState *ls, char from, char to)",
        "start_line": 171,
        "end_line": 176
      },
      {
        "method_name": "trydecpoint",
        "params": "(LexState *ls, SemInfo *seminfo)",
        "start_line": 179,
        "end_line": 190
      },
      {
        "method_name": "read_numeral",
        "params": "(LexState *ls, SemInfo *seminfo)",
        "start_line": 194,
        "end_line": 207
      },
      {
        "method_name": "skip_sep",
        "params": "(LexState *ls)",
        "start_line": 210,
        "end_line": 220
      },
      {
        "method_name": "read_long_string",
        "params": "(LexState *ls, SemInfo *seminfo, int sep)",
        "start_line": 223,
        "end_line": 275
      },
      {
        "method_name": "read_string",
        "params": "(LexState *ls, int del, SemInfo *seminfo)",
        "start_line": 278,
        "end_line": 331
      },
      {
        "method_name": "llex",
        "params": "(LexState *ls, SemInfo *seminfo)",
        "start_line": 334,
        "end_line": 445
      },
      {
        "method_name": "luaX_next",
        "params": "(LexState *ls)",
        "start_line": 448,
        "end_line": 456
      },
      {
        "method_name": "luaX_lookahead",
        "params": "(LexState *ls)",
        "start_line": 459,
        "end_line": 462
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/llex.h",
    "line": 81,
    "headers": [
      "lobject.h",
      "lzio.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "Token",
        "start_line": 49,
        "end_line": 52
      },
      {
        "struct_name": "LexState",
        "start_line": 55,
        "end_line": 67
      }
    ],
    "enums": [
      {
        "enum_name": "RESERVED",
        "start_line": 24,
        "end_line": 33
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/llimits.h",
    "line": 128,
    "headers": [
      "limits.h",
      "stddef.h",
      "lua.h"
    ],
    "methods": [
      {
        "method_name": "luai_threadyield",
        "params": "(L)",
        "start_line": 115,
        "end_line": 115
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lmathlib.c",
    "line": 263,
    "headers": [
      "stdlib.h",
      "math.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "math_abs",
        "params": "(lua_State *L)",
        "start_line": 26,
        "end_line": 29
      },
      {
        "method_name": "math_sin",
        "params": "(lua_State *L)",
        "start_line": 31,
        "end_line": 34
      },
      {
        "method_name": "math_sinh",
        "params": "(lua_State *L)",
        "start_line": 36,
        "end_line": 39
      },
      {
        "method_name": "math_cos",
        "params": "(lua_State *L)",
        "start_line": 41,
        "end_line": 44
      },
      {
        "method_name": "math_cosh",
        "params": "(lua_State *L)",
        "start_line": 46,
        "end_line": 49
      },
      {
        "method_name": "math_tan",
        "params": "(lua_State *L)",
        "start_line": 51,
        "end_line": 54
      },
      {
        "method_name": "math_tanh",
        "params": "(lua_State *L)",
        "start_line": 56,
        "end_line": 59
      },
      {
        "method_name": "math_asin",
        "params": "(lua_State *L)",
        "start_line": 61,
        "end_line": 64
      },
      {
        "method_name": "math_acos",
        "params": "(lua_State *L)",
        "start_line": 66,
        "end_line": 69
      },
      {
        "method_name": "math_atan",
        "params": "(lua_State *L)",
        "start_line": 71,
        "end_line": 74
      },
      {
        "method_name": "math_atan2",
        "params": "(lua_State *L)",
        "start_line": 76,
        "end_line": 79
      },
      {
        "method_name": "math_ceil",
        "params": "(lua_State *L)",
        "start_line": 81,
        "end_line": 84
      },
      {
        "method_name": "math_floor",
        "params": "(lua_State *L)",
        "start_line": 86,
        "end_line": 89
      },
      {
        "method_name": "math_fmod",
        "params": "(lua_State *L)",
        "start_line": 91,
        "end_line": 94
      },
      {
        "method_name": "math_modf",
        "params": "(lua_State *L)",
        "start_line": 96,
        "end_line": 102
      },
      {
        "method_name": "math_sqrt",
        "params": "(lua_State *L)",
        "start_line": 104,
        "end_line": 107
      },
      {
        "method_name": "math_pow",
        "params": "(lua_State *L)",
        "start_line": 109,
        "end_line": 112
      },
      {
        "method_name": "math_log",
        "params": "(lua_State *L)",
        "start_line": 114,
        "end_line": 117
      },
      {
        "method_name": "math_log10",
        "params": "(lua_State *L)",
        "start_line": 119,
        "end_line": 122
      },
      {
        "method_name": "math_exp",
        "params": "(lua_State *L)",
        "start_line": 124,
        "end_line": 127
      },
      {
        "method_name": "math_deg",
        "params": "(lua_State *L)",
        "start_line": 129,
        "end_line": 132
      },
      {
        "method_name": "math_rad",
        "params": "(lua_State *L)",
        "start_line": 134,
        "end_line": 137
      },
      {
        "method_name": "math_frexp",
        "params": "(lua_State *L)",
        "start_line": 139,
        "end_line": 144
      },
      {
        "method_name": "math_ldexp",
        "params": "(lua_State *L)",
        "start_line": 146,
        "end_line": 149
      },
      {
        "method_name": "math_min",
        "params": "(lua_State *L)",
        "start_line": 153,
        "end_line": 164
      },
      {
        "method_name": "math_max",
        "params": "(lua_State *L)",
        "start_line": 167,
        "end_line": 178
      },
      {
        "method_name": "math_random",
        "params": "(lua_State *L)",
        "start_line": 181,
        "end_line": 206
      },
      {
        "method_name": "math_randomseed",
        "params": "(lua_State *L)",
        "start_line": 209,
        "end_line": 212
      },
      {
        "method_name": "luaopen_math",
        "params": "(lua_State *L)",
        "start_line": 251,
        "end_line": 262
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lmem.c",
    "line": 86,
    "headers": [
      "stddef.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lmem.h",
      "lobject.h",
      "lstate.h"
    ],
    "methods": [
      {
        "method_name": "*luaM_growaux_",
        "params": "(lua_State *L, void *block, int *size, size_t size_elems,\n                     int limit, const char *errormsg)",
        "start_line": 47,
        "end_line": 63
      },
      {
        "method_name": "*luaM_toobig",
        "params": "(lua_State *L)",
        "start_line": 66,
        "end_line": 69
      },
      {
        "method_name": "*luaM_realloc_",
        "params": "(lua_State *L, void *block, size_t osize, size_t nsize)",
        "start_line": 76,
        "end_line": 85
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lmem.h",
    "line": 49,
    "headers": [
      "stddef.h",
      "llimits.h",
      "lua.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/loadlib.c",
    "line": 666,
    "headers": [
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h",
      "dlfcn.h",
      "windows.h",
      "mach-o/dyld.h"
    ],
    "methods": [
      {
        "method_name": "ll_unloadlib",
        "params": "(void *lib)",
        "start_line": 63,
        "end_line": 65
      },
      {
        "method_name": "*ll_load",
        "params": "(lua_State *L, const char *path)",
        "start_line": 68,
        "end_line": 72
      },
      {
        "method_name": "ll_sym",
        "params": "(lua_State *L, void *lib, const char *sym)",
        "start_line": 75,
        "end_line": 79
      },
      {
        "method_name": "setprogdir",
        "params": "(lua_State *L)",
        "start_line": 97,
        "end_line": 109
      },
      {
        "method_name": "pusherror",
        "params": "(lua_State *L)",
        "start_line": 112,
        "end_line": 120
      },
      {
        "method_name": "ll_unloadlib",
        "params": "(void *lib)",
        "start_line": 122,
        "end_line": 124
      },
      {
        "method_name": "*ll_load",
        "params": "(lua_State *L, const char *path)",
        "start_line": 127,
        "end_line": 131
      },
      {
        "method_name": "ll_sym",
        "params": "(lua_State *L, void *lib, const char *sym)",
        "start_line": 134,
        "end_line": 138
      },
      {
        "method_name": "pusherror",
        "params": "(lua_State *L)",
        "start_line": 159,
        "end_line": 166
      },
      {
        "method_name": "*errorfromcode",
        "params": "(NSObjectFileImageReturnCode ret)",
        "start_line": 169,
        "end_line": 183
      },
      {
        "method_name": "ll_unloadlib",
        "params": "(void *lib)",
        "start_line": 186,
        "end_line": 188
      },
      {
        "method_name": "*ll_load",
        "params": "(lua_State *L, const char *path)",
        "start_line": 191,
        "end_line": 209
      },
      {
        "method_name": "ll_sym",
        "params": "(lua_State *L, void *lib, const char *sym)",
        "start_line": 212,
        "end_line": 219
      },
      {
        "method_name": "ll_unloadlib",
        "params": "(void *lib)",
        "start_line": 239,
        "end_line": 241
      },
      {
        "method_name": "*ll_load",
        "params": "(lua_State *L, const char *path)",
        "start_line": 244,
        "end_line": 248
      },
      {
        "method_name": "ll_sym",
        "params": "(lua_State *L, void *lib, const char *sym)",
        "start_line": 251,
        "end_line": 255
      },
      {
        "method_name": "**ll_register",
        "params": "(lua_State *L, const char *path)",
        "start_line": 262,
        "end_line": 279
      },
      {
        "method_name": "gctm",
        "params": "(lua_State *L)",
        "start_line": 286,
        "end_line": 291
      },
      {
        "method_name": "ll_loadfunc",
        "params": "(lua_State *L, const char *path, const char *sym)",
        "start_line": 294,
        "end_line": 306
      },
      {
        "method_name": "ll_loadlib",
        "params": "(lua_State *L)",
        "start_line": 309,
        "end_line": 321
      },
      {
        "method_name": "readable",
        "params": "(const char *filename)",
        "start_line": 332,
        "end_line": 337
      },
      {
        "method_name": "*pushnexttemplate",
        "params": "(lua_State *L, const char *path)",
        "start_line": 340,
        "end_line": 348
      },
      {
        "method_name": "*findfile",
        "params": "(lua_State *L, const char *name,\n                                           const char *pname)",
        "start_line": 352,
        "end_line": 371
      },
      {
        "method_name": "loaderror",
        "params": "(lua_State *L, const char *filename)",
        "start_line": 374,
        "end_line": 377
      },
      {
        "method_name": "loader_Lua",
        "params": "(lua_State *L)",
        "start_line": 380,
        "end_line": 388
      },
      {
        "method_name": "*mkfuncname",
        "params": "(lua_State *L, const char *modname)",
        "start_line": 391,
        "end_line": 399
      },
      {
        "method_name": "loader_C",
        "params": "(lua_State *L)",
        "start_line": 402,
        "end_line": 411
      },
      {
        "method_name": "loader_Croot",
        "params": "(lua_State *L)",
        "start_line": 414,
        "end_line": 432
      },
      {
        "method_name": "loader_preload",
        "params": "(lua_State *L)",
        "start_line": 435,
        "end_line": 444
      },
      {
        "method_name": "ll_require",
        "params": "(lua_State *L)",
        "start_line": 451,
        "end_line": 494
      },
      {
        "method_name": "setfenv",
        "params": "(lua_State *L)",
        "start_line": 507,
        "end_line": 516
      },
      {
        "method_name": "dooptions",
        "params": "(lua_State *L, int n)",
        "start_line": 519,
        "end_line": 526
      },
      {
        "method_name": "modinit",
        "params": "(lua_State *L, const char *modname)",
        "start_line": 529,
        "end_line": 541
      },
      {
        "method_name": "ll_module",
        "params": "(lua_State *L)",
        "start_line": 544,
        "end_line": 569
      },
      {
        "method_name": "ll_seeall",
        "params": "(lua_State *L)",
        "start_line": 572,
        "end_line": 582
      },
      {
        "method_name": "setpath",
        "params": "(lua_State *L, const char *fieldname, const char *envname,\n                                   const char *def)",
        "start_line": 593,
        "end_line": 606
      },
      {
        "method_name": "luaopen_package",
        "params": "(lua_State *L)",
        "start_line": 627,
        "end_line": 665
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lobject.c",
    "line": 214,
    "headers": [
      "ctype.h",
      "stdarg.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "ldo.h",
      "lmem.h",
      "lobject.h",
      "lstate.h",
      "lstring.h",
      "lvm.h"
    ],
    "methods": [
      {
        "method_name": "luaO_int2fb",
        "params": "(unsigned int x)",
        "start_line": 35,
        "end_line": 43
      },
      {
        "method_name": "luaO_fb2int",
        "params": "(int x)",
        "start_line": 47,
        "end_line": 51
      },
      {
        "method_name": "luaO_log2",
        "params": "(unsigned int x)",
        "start_line": 54,
        "end_line": 69
      },
      {
        "method_name": "luaO_rawequalObj",
        "params": "(const TValue *t1, const TValue *t2)",
        "start_line": 72,
        "end_line": 87
      },
      {
        "method_name": "luaO_str2d",
        "params": "(const char *s, lua_Number *result)",
        "start_line": 90,
        "end_line": 100
      },
      {
        "method_name": "pushstr",
        "params": "(lua_State *L, const char *str)",
        "start_line": 104,
        "end_line": 107
      },
      {
        "method_name": "*luaO_pushvfstring",
        "params": "(lua_State *L, const char *fmt, va_list argp)",
        "start_line": 111,
        "end_line": 169
      },
      {
        "method_name": "*luaO_pushfstring",
        "params": "(lua_State *L, const char *fmt, ...)",
        "start_line": 172,
        "end_line": 179
      },
      {
        "method_name": "luaO_chunkid",
        "params": "(char *out, const char *source, size_t bufflen)",
        "start_line": 182,
        "end_line": 214
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lobject.h",
    "line": 381,
    "headers": [
      "stdarg.h",
      "llimits.h",
      "lua.h"
    ],
    "methods": [
      {
        "method_name": "setnvalue",
        "params": "(obj,x)",
        "start_line": 120,
        "end_line": 120
      },
      {
        "method_name": "setpvalue",
        "params": "(obj,x)",
        "start_line": 123,
        "end_line": 123
      },
      {
        "method_name": "setbvalue",
        "params": "(obj,x)",
        "start_line": 126,
        "end_line": 126
      },
      {
        "method_name": "setsvalue",
        "params": "(L,obj,x)",
        "start_line": 129,
        "end_line": 131
      },
      {
        "method_name": "setuvalue",
        "params": "(L,obj,x)",
        "start_line": 134,
        "end_line": 136
      },
      {
        "method_name": "setthvalue",
        "params": "(L,obj,x)",
        "start_line": 139,
        "end_line": 141
      },
      {
        "method_name": "setclvalue",
        "params": "(L,obj,x)",
        "start_line": 144,
        "end_line": 146
      },
      {
        "method_name": "sethvalue",
        "params": "(L,obj,x)",
        "start_line": 149,
        "end_line": 151
      },
      {
        "method_name": "setptvalue",
        "params": "(L,obj,x)",
        "start_line": 154,
        "end_line": 156
      },
      {
        "method_name": "setobj",
        "params": "(L,obj1,obj2)",
        "start_line": 162,
        "end_line": 164
      }
    ],
    "structs": [
      {
        "struct_name": "GCheader",
        "start_line": 49,
        "end_line": 51
      },
      {
        "struct_name": "lua_TValue",
        "start_line": 73,
        "end_line": 75
      },
      {
        "struct_name": "",
        "start_line": 201,
        "end_line": 206
      },
      {
        "struct_name": "",
        "start_line": 217,
        "end_line": 222
      },
      {
        "struct_name": "Proto",
        "start_line": 231,
        "end_line": 253
      },
      {
        "struct_name": "LocVar",
        "start_line": 262,
        "end_line": 266
      },
      {
        "struct_name": "UpVal",
        "start_line": 274,
        "end_line": 284
      },
      {
        "struct_name": "CClosure",
        "start_line": 295,
        "end_line": 299
      },
      {
        "struct_name": "LClosure",
        "start_line": 302,
        "end_line": 306
      },
      {
        "struct_name": "",
        "start_line": 324,
        "end_line": 327
      },
      {
        "struct_name": "Node",
        "start_line": 332,
        "end_line": 335
      },
      {
        "struct_name": "Table",
        "start_line": 338,
        "end_line": 348
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lopcodes.c",
    "line": 102,
    "headers": [
      "lopcodes.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lopcodes.h",
    "line": 268,
    "headers": [
      "llimits.h"
    ],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "OpMode",
        "start_line": 31,
        "end_line": 31
      },
      {
        "enum_name": "",
        "start_line": 150,
        "end_line": 208
      },
      {
        "enum_name": "OpArgMask",
        "start_line": 245,
        "end_line": 250
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/loslib.c",
    "line": 243,
    "headers": [
      "errno.h",
      "locale.h",
      "stdlib.h",
      "string.h",
      "time.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "os_pushresult",
        "params": "(lua_State *L, int i, const char *filename)",
        "start_line": 23,
        "end_line": 35
      },
      {
        "method_name": "os_execute",
        "params": "(lua_State *L)",
        "start_line": 38,
        "end_line": 41
      },
      {
        "method_name": "os_remove",
        "params": "(lua_State *L)",
        "start_line": 44,
        "end_line": 47
      },
      {
        "method_name": "os_rename",
        "params": "(lua_State *L)",
        "start_line": 50,
        "end_line": 54
      },
      {
        "method_name": "os_tmpname",
        "params": "(lua_State *L)",
        "start_line": 57,
        "end_line": 65
      },
      {
        "method_name": "os_getenv",
        "params": "(lua_State *L)",
        "start_line": 68,
        "end_line": 71
      },
      {
        "method_name": "os_clock",
        "params": "(lua_State *L)",
        "start_line": 74,
        "end_line": 77
      },
      {
        "method_name": "setfield",
        "params": "(lua_State *L, const char *key, int value)",
        "start_line": 88,
        "end_line": 91
      },
      {
        "method_name": "setboolfield",
        "params": "(lua_State *L, const char *key, int value)",
        "start_line": 93,
        "end_line": 98
      },
      {
        "method_name": "getboolfield",
        "params": "(lua_State *L, const char *key)",
        "start_line": 100,
        "end_line": 106
      },
      {
        "method_name": "getfield",
        "params": "(lua_State *L, const char *key, int d)",
        "start_line": 109,
        "end_line": 121
      },
      {
        "method_name": "os_date",
        "params": "(lua_State *L)",
        "start_line": 124,
        "end_line": 167
      },
      {
        "method_name": "os_time",
        "params": "(lua_State *L)",
        "start_line": 170,
        "end_line": 192
      },
      {
        "method_name": "os_difftime",
        "params": "(lua_State *L)",
        "start_line": 195,
        "end_line": 199
      },
      {
        "method_name": "os_setlocale",
        "params": "(lua_State *L)",
        "start_line": 204,
        "end_line": 213
      },
      {
        "method_name": "os_exit",
        "params": "(lua_State *L)",
        "start_line": 216,
        "end_line": 218
      },
      {
        "method_name": "luaopen_os",
        "params": "(lua_State *L)",
        "start_line": 239,
        "end_line": 242
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lparser.c",
    "line": 1339,
    "headers": [
      "string.h",
      "lua.h",
      "lcode.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "llex.h",
      "lmem.h",
      "lobject.h",
      "lopcodes.h",
      "lparser.h",
      "lstate.h",
      "lstring.h",
      "ltable.h"
    ],
    "methods": [
      {
        "method_name": "anchor_token",
        "params": "(LexState *ls)",
        "start_line": 57,
        "end_line": 62
      },
      {
        "method_name": "error_expected",
        "params": "(LexState *ls, int token)",
        "start_line": 65,
        "end_line": 68
      },
      {
        "method_name": "errorlimit",
        "params": "(FuncState *fs, int limit, const char *what)",
        "start_line": 71,
        "end_line": 77
      },
      {
        "method_name": "testnext",
        "params": "(LexState *ls, int c)",
        "start_line": 80,
        "end_line": 86
      },
      {
        "method_name": "check",
        "params": "(LexState *ls, int c)",
        "start_line": 89,
        "end_line": 92
      },
      {
        "method_name": "checknext",
        "params": "(LexState *ls, int c)",
        "start_line": 94,
        "end_line": 97
      },
      {
        "method_name": "check_condition",
        "params": "(ls,c,msg)",
        "start_line": 100,
        "end_line": 100
      },
      {
        "method_name": "check_match",
        "params": "(LexState *ls, int what, int who, int where)",
        "start_line": 104,
        "end_line": 114
      },
      {
        "method_name": "*str_checkname",
        "params": "(LexState *ls)",
        "start_line": 117,
        "end_line": 123
      },
      {
        "method_name": "init_exp",
        "params": "(expdesc *e, expkind k, int i)",
        "start_line": 126,
        "end_line": 130
      },
      {
        "method_name": "codestring",
        "params": "(LexState *ls, expdesc *e, TString *s)",
        "start_line": 133,
        "end_line": 135
      },
      {
        "method_name": "checkname",
        "params": "(LexState *ls, expdesc *e)",
        "start_line": 138,
        "end_line": 140
      },
      {
        "method_name": "registerlocalvar",
        "params": "(LexState *ls, TString *varname)",
        "start_line": 143,
        "end_line": 153
      },
      {
        "method_name": "new_localvar",
        "params": "(LexState *ls, TString *name, int n)",
        "start_line": 160,
        "end_line": 164
      },
      {
        "method_name": "adjustlocalvars",
        "params": "(LexState *ls, int nvars)",
        "start_line": 167,
        "end_line": 173
      },
      {
        "method_name": "removevars",
        "params": "(LexState *ls, int tolevel)",
        "start_line": 176,
        "end_line": 180
      },
      {
        "method_name": "indexupvalue",
        "params": "(FuncState *fs, TString *name, expdesc *v)",
        "start_line": 183,
        "end_line": 204
      },
      {
        "method_name": "searchvar",
        "params": "(FuncState *fs, TString *n)",
        "start_line": 207,
        "end_line": 214
      },
      {
        "method_name": "markupval",
        "params": "(FuncState *fs, int level)",
        "start_line": 217,
        "end_line": 221
      },
      {
        "method_name": "singlevaraux",
        "params": "(FuncState *fs, TString *n, expdesc *var, int base)",
        "start_line": 224,
        "end_line": 245
      },
      {
        "method_name": "singlevar",
        "params": "(LexState *ls, expdesc *var)",
        "start_line": 248,
        "end_line": 253
      },
      {
        "method_name": "adjust_assign",
        "params": "(LexState *ls, int nvars, int nexps, expdesc *e)",
        "start_line": 256,
        "end_line": 273
      },
      {
        "method_name": "enterlevel",
        "params": "(LexState *ls)",
        "start_line": 276,
        "end_line": 279
      },
      {
        "method_name": "enterblock",
        "params": "(FuncState *fs, BlockCnt *bl, lu_byte isbreakable)",
        "start_line": 285,
        "end_line": 293
      },
      {
        "method_name": "leaveblock",
        "params": "(FuncState *fs)",
        "start_line": 296,
        "end_line": 307
      },
      {
        "method_name": "pushclosure",
        "params": "(LexState *ls, FuncState *func, expdesc *v)",
        "start_line": 310,
        "end_line": 325
      },
      {
        "method_name": "open_func",
        "params": "(LexState *ls, FuncState *fs)",
        "start_line": 328,
        "end_line": 353
      },
      {
        "method_name": "close_func",
        "params": "(LexState *ls)",
        "start_line": 356,
        "end_line": 380
      },
      {
        "method_name": "*luaY_parser",
        "params": "(lua_State *L, ZIO *z, Mbuffer *buff, const char *name)",
        "start_line": 383,
        "end_line": 398
      },
      {
        "method_name": "field",
        "params": "(LexState *ls, expdesc *v)",
        "start_line": 407,
        "end_line": 415
      },
      {
        "method_name": "yindex",
        "params": "(LexState *ls, expdesc *v)",
        "start_line": 418,
        "end_line": 424
      },
      {
        "method_name": "recfield",
        "params": "(LexState *ls, struct ConsControl *cc)",
        "start_line": 443,
        "end_line": 461
      },
      {
        "method_name": "closelistfield",
        "params": "(FuncState *fs, struct ConsControl *cc)",
        "start_line": 464,
        "end_line": 472
      },
      {
        "method_name": "lastlistfield",
        "params": "(FuncState *fs, struct ConsControl *cc)",
        "start_line": 475,
        "end_line": 487
      },
      {
        "method_name": "listfield",
        "params": "(LexState *ls, struct ConsControl *cc)",
        "start_line": 490,
        "end_line": 495
      },
      {
        "method_name": "constructor",
        "params": "(LexState *ls, expdesc *t)",
        "start_line": 498,
        "end_line": 533
      },
      {
        "method_name": "parlist",
        "params": "(LexState *ls)",
        "start_line": 543,
        "end_line": 573
      },
      {
        "method_name": "body",
        "params": "(LexState *ls, expdesc *e, int needself, int line)",
        "start_line": 576,
        "end_line": 593
      },
      {
        "method_name": "explist1",
        "params": "(LexState *ls, expdesc *v)",
        "start_line": 596,
        "end_line": 606
      },
      {
        "method_name": "funcargs",
        "params": "(LexState *ls, expdesc *f)",
        "start_line": 609,
        "end_line": 1340
      }
    ],
    "structs": [
      {
        "struct_name": "BlockCnt",
        "start_line": 40,
        "end_line": 46
      },
      {
        "struct_name": "ConsControl",
        "start_line": 434,
        "end_line": 440
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lparser.h",
    "line": 82,
    "headers": [
      "llimits.h",
      "lobject.h",
      "lzio.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "expdesc",
        "start_line": 37,
        "end_line": 45
      },
      {
        "struct_name": "upvaldesc",
        "start_line": 48,
        "end_line": 51
      },
      {
        "struct_name": "FuncState",
        "start_line": 58,
        "end_line": 75
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 19,
        "end_line": 35
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lstate.c",
    "line": 214,
    "headers": [
      "stddef.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lgc.h",
      "llex.h",
      "lmem.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h"
    ],
    "methods": [
      {
        "method_name": "stack_init",
        "params": "(lua_State *L1, lua_State *L)",
        "start_line": 42,
        "end_line": 58
      },
      {
        "method_name": "freestack",
        "params": "(lua_State *L, lua_State *L1)",
        "start_line": 61,
        "end_line": 64
      },
      {
        "method_name": "f_luaopen",
        "params": "(lua_State *L, void *ud)",
        "start_line": 70,
        "end_line": 81
      },
      {
        "method_name": "preinit_state",
        "params": "(lua_State *L, global_State *g)",
        "start_line": 84,
        "end_line": 102
      },
      {
        "method_name": "close_state",
        "params": "(lua_State *L)",
        "start_line": 105,
        "end_line": 116
      },
      {
        "method_name": "*luaE_newthread",
        "params": "(lua_State *L)",
        "start_line": 119,
        "end_line": 131
      },
      {
        "method_name": "luaE_freethread",
        "params": "(lua_State *L, lua_State *L1)",
        "start_line": 134,
        "end_line": 140
      },
      {
        "method_name": "*lua_newstate",
        "params": "(lua_Alloc f, void *ud)",
        "start_line": 143,
        "end_line": 190
      },
      {
        "method_name": "callallgcTM",
        "params": "(lua_State *L, void *ud)",
        "start_line": 193,
        "end_line": 196
      },
      {
        "method_name": "lua_close",
        "params": "(lua_State *L)",
        "start_line": 199,
        "end_line": 213
      }
    ],
    "structs": [
      {
        "struct_name": "LG",
        "start_line": 35,
        "end_line": 38
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lstate.h",
    "line": 169,
    "headers": [
      "lua.h",
      "lobject.h",
      "ltm.h",
      "lzio.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "stringtable",
        "start_line": 38,
        "end_line": 42
      },
      {
        "struct_name": "CallInfo",
        "start_line": 48,
        "end_line": 55
      },
      {
        "struct_name": "global_State",
        "start_line": 68,
        "end_line": 94
      },
      {
        "struct_name": "lua_State",
        "start_line": 100,
        "end_line": 127
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lstring.c",
    "line": 111,
    "headers": [
      "string.h",
      "lua.h",
      "lmem.h",
      "lobject.h",
      "lstate.h",
      "lstring.h"
    ],
    "methods": [
      {
        "method_name": "luaS_resize",
        "params": "(lua_State *L, int newsize)",
        "start_line": 22,
        "end_line": 47
      },
      {
        "method_name": "*newlstr",
        "params": "(lua_State *L, const char *str, size_t l,\n                                       unsigned int h)",
        "start_line": 51,
        "end_line": 72
      },
      {
        "method_name": "*luaS_newlstr",
        "params": "(lua_State *L, const char *str, size_t l)",
        "start_line": 75,
        "end_line": 93
      },
      {
        "method_name": "*luaS_newudata",
        "params": "(lua_State *L, size_t s, Table *e)",
        "start_line": 96,
        "end_line": 110
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lstring.h",
    "line": 31,
    "headers": [
      "lgc.h",
      "lobject.h",
      "lstate.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lstrlib.c",
    "line": 871,
    "headers": [
      "ctype.h",
      "stddef.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "str_len",
        "params": "(lua_State *L)",
        "start_line": 28,
        "end_line": 33
      },
      {
        "method_name": "posrelat",
        "params": "(ptrdiff_t pos, size_t len)",
        "start_line": 36,
        "end_line": 40
      },
      {
        "method_name": "str_sub",
        "params": "(lua_State *L)",
        "start_line": 43,
        "end_line": 54
      },
      {
        "method_name": "str_reverse",
        "params": "(lua_State *L)",
        "start_line": 57,
        "end_line": 65
      },
      {
        "method_name": "str_lower",
        "params": "(lua_State *L)",
        "start_line": 68,
        "end_line": 78
      },
      {
        "method_name": "str_upper",
        "params": "(lua_State *L)",
        "start_line": 81,
        "end_line": 91
      },
      {
        "method_name": "str_rep",
        "params": "(lua_State *L)",
        "start_line": 93,
        "end_line": 103
      },
      {
        "method_name": "str_byte",
        "params": "(lua_State *L)",
        "start_line": 106,
        "end_line": 122
      },
      {
        "method_name": "str_char",
        "params": "(lua_State *L)",
        "start_line": 125,
        "end_line": 137
      },
      {
        "method_name": "writer",
        "params": "(lua_State *L, const void* b, size_t size, void* B)",
        "start_line": 140,
        "end_line": 144
      },
      {
        "method_name": "str_dump",
        "params": "(lua_State *L)",
        "start_line": 147,
        "end_line": 156
      },
      {
        "method_name": "check_capture",
        "params": "(MatchState *ms, int l)",
        "start_line": 186,
        "end_line": 191
      },
      {
        "method_name": "capture_to_close",
        "params": "(MatchState *ms)",
        "start_line": 194,
        "end_line": 199
      },
      {
        "method_name": "*classend",
        "params": "(MatchState *ms, const char *p)",
        "start_line": 202,
        "end_line": 223
      },
      {
        "method_name": "match_class",
        "params": "(int c, int cl)",
        "start_line": 226,
        "end_line": 242
      },
      {
        "method_name": "matchbracketclass",
        "params": "(int c, const char *p, const char *ec)",
        "start_line": 245,
        "end_line": 265
      },
      {
        "method_name": "singlematch",
        "params": "(int c, const char *p, const char *ep)",
        "start_line": 268,
        "end_line": 275
      },
      {
        "method_name": "*matchbalance",
        "params": "(MatchState *ms, const char *s,\n                                   const char *p)",
        "start_line": 282,
        "end_line": 298
      },
      {
        "method_name": "*max_expand",
        "params": "(MatchState *ms, const char *s,\n                                 const char *p, const char *ep)",
        "start_line": 302,
        "end_line": 313
      },
      {
        "method_name": "*min_expand",
        "params": "(MatchState *ms, const char *s,\n                                 const char *p, const char *ep)",
        "start_line": 317,
        "end_line": 326
      },
      {
        "method_name": "*start_capture",
        "params": "(MatchState *ms, const char *s,\n                                    const char *p, int what)",
        "start_line": 330,
        "end_line": 340
      },
      {
        "method_name": "*end_capture",
        "params": "(MatchState *ms, const char *s,\n                                  const char *p)",
        "start_line": 344,
        "end_line": 351
      },
      {
        "method_name": "*match_capture",
        "params": "(MatchState *ms, const char *s, int l)",
        "start_line": 354,
        "end_line": 362
      },
      {
        "method_name": "*match",
        "params": "(MatchState *ms, const char *s, const char *p)",
        "start_line": 365,
        "end_line": 440
      },
      {
        "method_name": "*lmemfind",
        "params": "(const char *s1, size_t l1,\n                               const char *s2, size_t l2)",
        "start_line": 445,
        "end_line": 463
      },
      {
        "method_name": "push_onecapture",
        "params": "(MatchState *ms, int i, const char *s,\n                                                    const char *e)",
        "start_line": 467,
        "end_line": 482
      },
      {
        "method_name": "push_captures",
        "params": "(MatchState *ms, const char *s, const char *e)",
        "start_line": 485,
        "end_line": 492
      },
      {
        "method_name": "str_find_aux",
        "params": "(lua_State *L, int find)",
        "start_line": 495,
        "end_line": 535
      },
      {
        "method_name": "str_find",
        "params": "(lua_State *L)",
        "start_line": 538,
        "end_line": 540
      },
      {
        "method_name": "str_match",
        "params": "(lua_State *L)",
        "start_line": 543,
        "end_line": 545
      },
      {
        "method_name": "gmatch_aux",
        "params": "(lua_State *L)",
        "start_line": 548,
        "end_line": 571
      },
      {
        "method_name": "gmatch",
        "params": "(lua_State *L)",
        "start_line": 574,
        "end_line": 581
      },
      {
        "method_name": "gfind_nodef",
        "params": "(lua_State *L)",
        "start_line": 584,
        "end_line": 587
      },
      {
        "method_name": "add_s",
        "params": "(MatchState *ms, luaL_Buffer *b, const char *s,\n                                                   const char *e)",
        "start_line": 591,
        "end_line": 609
      },
      {
        "method_name": "add_value",
        "params": "(MatchState *ms, luaL_Buffer *b, const char *s,\n                                                       const char *e)",
        "start_line": 613,
        "end_line": 641
      },
      {
        "method_name": "str_gsub",
        "params": "(lua_State *L)",
        "start_line": 644,
        "end_line": 680
      },
      {
        "method_name": "addquoted",
        "params": "(lua_State *L, luaL_Buffer *b, int arg)",
        "start_line": 696,
        "end_line": 723
      },
      {
        "method_name": "*scanformat",
        "params": "(lua_State *L, const char *strfrmt, char *form)",
        "start_line": 725,
        "end_line": 744
      },
      {
        "method_name": "addintlen",
        "params": "(char *form)",
        "start_line": 747,
        "end_line": 753
      },
      {
        "method_name": "str_format",
        "params": "(lua_State *L)",
        "start_line": 756,
        "end_line": 824
      },
      {
        "method_name": "createmetatable",
        "params": "(lua_State *L)",
        "start_line": 847,
        "end_line": 856
      },
      {
        "method_name": "luaopen_string",
        "params": "(lua_State *L)",
        "start_line": 862,
        "end_line": 870
      }
    ],
    "structs": [
      {
        "struct_name": "MatchState",
        "start_line": 170,
        "end_line": 179
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ltable.c",
    "line": 588,
    "headers": [
      "math.h",
      "string.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lgc.h",
      "lmem.h",
      "lobject.h",
      "lstate.h",
      "ltable.h"
    ],
    "methods": [
      {
        "method_name": "*hashnum",
        "params": "(const Table *t, lua_Number n)",
        "start_line": 84,
        "end_line": 92
      },
      {
        "method_name": "*mainposition",
        "params": "(const Table *t, const TValue *key)",
        "start_line": 100,
        "end_line": 113
      },
      {
        "method_name": "arrayindex",
        "params": "(const TValue *key)",
        "start_line": 120,
        "end_line": 129
      },
      {
        "method_name": "findindex",
        "params": "(lua_State *L, Table *t, StkId key)",
        "start_line": 137,
        "end_line": 159
      },
      {
        "method_name": "luaH_next",
        "params": "(lua_State *L, Table *t, StkId key)",
        "start_line": 162,
        "end_line": 179
      },
      {
        "method_name": "computesizes",
        "params": "(int nums[], int *narray)",
        "start_line": 189,
        "end_line": 208
      },
      {
        "method_name": "countint",
        "params": "(const TValue *key, int *nums)",
        "start_line": 211,
        "end_line": 219
      },
      {
        "method_name": "numusearray",
        "params": "(const Table *t, int *nums)",
        "start_line": 222,
        "end_line": 244
      },
      {
        "method_name": "numusehash",
        "params": "(const Table *t, int *nums, int *pnasize)",
        "start_line": 247,
        "end_line": 260
      },
      {
        "method_name": "setarrayvector",
        "params": "(lua_State *L, Table *t, int size)",
        "start_line": 263,
        "end_line": 269
      },
      {
        "method_name": "setnodevector",
        "params": "(lua_State *L, Table *t, int size)",
        "start_line": 272,
        "end_line": 294
      },
      {
        "method_name": "resize",
        "params": "(lua_State *L, Table *t, int nasize, int nhsize)",
        "start_line": 297,
        "end_line": 324
      },
      {
        "method_name": "luaH_resizearray",
        "params": "(lua_State *L, Table *t, int nasize)",
        "start_line": 327,
        "end_line": 330
      },
      {
        "method_name": "rehash",
        "params": "(lua_State *L, Table *t, const TValue *ek)",
        "start_line": 333,
        "end_line": 349
      },
      {
        "method_name": "*luaH_new",
        "params": "(lua_State *L, int narray, int nhash)",
        "start_line": 358,
        "end_line": 371
      },
      {
        "method_name": "luaH_free",
        "params": "(lua_State *L, Table *t)",
        "start_line": 374,
        "end_line": 379
      },
      {
        "method_name": "*getfreepos",
        "params": "(Table *t)",
        "start_line": 382,
        "end_line": 388
      },
      {
        "method_name": "*newkey",
        "params": "(lua_State *L, Table *t, const TValue *key)",
        "start_line": 399,
        "end_line": 429
      },
      {
        "method_name": "*luaH_getnum",
        "params": "(Table *t, int key)",
        "start_line": 435,
        "end_line": 449
      },
      {
        "method_name": "*luaH_getstr",
        "params": "(Table *t, TString *key)",
        "start_line": 455,
        "end_line": 463
      },
      {
        "method_name": "*luaH_get",
        "params": "(Table *t, const TValue *key)",
        "start_line": 469,
        "end_line": 491
      },
      {
        "method_name": "*luaH_set",
        "params": "(lua_State *L, Table *t, const TValue *key)",
        "start_line": 494,
        "end_line": 505
      },
      {
        "method_name": "*luaH_setnum",
        "params": "(lua_State *L, Table *t, int key)",
        "start_line": 508,
        "end_line": 517
      },
      {
        "method_name": "*luaH_setstr",
        "params": "(lua_State *L, Table *t, TString *key)",
        "start_line": 520,
        "end_line": 529
      },
      {
        "method_name": "unbound_search",
        "params": "(Table *t, unsigned int j)",
        "start_line": 532,
        "end_line": 553
      },
      {
        "method_name": "luaH_getn",
        "params": "(Table *t)",
        "start_line": 560,
        "end_line": 576
      },
      {
        "method_name": "*luaH_mainposition",
        "params": "(const Table *t, const TValue *key)",
        "start_line": 582,
        "end_line": 584
      },
      {
        "method_name": "luaH_isdummy",
        "params": "(Node *n)",
        "start_line": 586,
        "end_line": 586
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ltable.h",
    "line": 40,
    "headers": [
      "lobject.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ltablib.c",
    "line": 287,
    "headers": [
      "stddef.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "foreachi",
        "params": "(lua_State *L)",
        "start_line": 22,
        "end_line": 36
      },
      {
        "method_name": "foreach",
        "params": "(lua_State *L)",
        "start_line": 39,
        "end_line": 53
      },
      {
        "method_name": "maxn",
        "params": "(lua_State *L)",
        "start_line": 56,
        "end_line": 69
      },
      {
        "method_name": "getn",
        "params": "(lua_State *L)",
        "start_line": 72,
        "end_line": 75
      },
      {
        "method_name": "setn",
        "params": "(lua_State *L)",
        "start_line": 78,
        "end_line": 87
      },
      {
        "method_name": "tinsert",
        "params": "(lua_State *L)",
        "start_line": 90,
        "end_line": 115
      },
      {
        "method_name": "tremove",
        "params": "(lua_State *L)",
        "start_line": 118,
        "end_line": 132
      },
      {
        "method_name": "addfield",
        "params": "(lua_State *L, luaL_Buffer *b, int i)",
        "start_line": 135,
        "end_line": 141
      },
      {
        "method_name": "tconcat",
        "params": "(lua_State *L)",
        "start_line": 144,
        "end_line": 161
      },
      {
        "method_name": "set2",
        "params": "(lua_State *L, int i, int j)",
        "start_line": 173,
        "end_line": 176
      },
      {
        "method_name": "sort_comp",
        "params": "(lua_State *L, int a, int b)",
        "start_line": 178,
        "end_line": 191
      },
      {
        "method_name": "auxsort",
        "params": "(lua_State *L, int l, int u)",
        "start_line": 193,
        "end_line": 254
      },
      {
        "method_name": "sort",
        "params": "(lua_State *L)",
        "start_line": 256,
        "end_line": 264
      },
      {
        "method_name": "luaopen_table",
        "params": "(lua_State *L)",
        "start_line": 283,
        "end_line": 286
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ltm.c",
    "line": 75,
    "headers": [
      "string.h",
      "lua.h",
      "lobject.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h"
    ],
    "methods": [
      {
        "method_name": "luaT_init",
        "params": "(lua_State *L)",
        "start_line": 30,
        "end_line": 43
      },
      {
        "method_name": "*luaT_gettm",
        "params": "(Table *events, TMS event, TString *ename)",
        "start_line": 50,
        "end_line": 58
      },
      {
        "method_name": "*luaT_gettmbyobj",
        "params": "(lua_State *L, const TValue *o, TMS event)",
        "start_line": 61,
        "end_line": 74
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/ltm.h",
    "line": 54,
    "headers": [
      "lobject.h"
    ],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 18,
        "end_line": 37
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lua.c",
    "line": 392,
    "headers": [
      "signal.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h"
    ],
    "methods": [
      {
        "method_name": "lstop",
        "params": "(lua_State *L, lua_Debug *ar)",
        "start_line": 28,
        "end_line": 32
      },
      {
        "method_name": "laction",
        "params": "(int i)",
        "start_line": 35,
        "end_line": 39
      },
      {
        "method_name": "print_usage",
        "params": "(void)",
        "start_line": 42,
        "end_line": 55
      },
      {
        "method_name": "l_message",
        "params": "(const char *pname, const char *msg)",
        "start_line": 58,
        "end_line": 62
      },
      {
        "method_name": "report",
        "params": "(lua_State *L, int status)",
        "start_line": 65,
        "end_line": 73
      },
      {
        "method_name": "traceback",
        "params": "(lua_State *L)",
        "start_line": 76,
        "end_line": 93
      },
      {
        "method_name": "docall",
        "params": "(lua_State *L, int narg, int clear)",
        "start_line": 96,
        "end_line": 108
      },
      {
        "method_name": "print_version",
        "params": "(void)",
        "start_line": 111,
        "end_line": 113
      },
      {
        "method_name": "getargs",
        "params": "(lua_State *L, char **argv, int n)",
        "start_line": 116,
        "end_line": 131
      },
      {
        "method_name": "dofile",
        "params": "(lua_State *L, const char *name)",
        "start_line": 134,
        "end_line": 137
      },
      {
        "method_name": "dostring",
        "params": "(lua_State *L, const char *s, const char *name)",
        "start_line": 140,
        "end_line": 143
      },
      {
        "method_name": "dolibrary",
        "params": "(lua_State *L, const char *name)",
        "start_line": 146,
        "end_line": 150
      },
      {
        "method_name": "*get_prompt",
        "params": "(lua_State *L, int firstline)",
        "start_line": 153,
        "end_line": 160
      },
      {
        "method_name": "incomplete",
        "params": "(lua_State *L, int status)",
        "start_line": 163,
        "end_line": 174
      },
      {
        "method_name": "pushline",
        "params": "(lua_State *L, int firstline)",
        "start_line": 177,
        "end_line": 193
      },
      {
        "method_name": "loadline",
        "params": "(lua_State *L)",
        "start_line": 196,
        "end_line": 213
      },
      {
        "method_name": "dotty",
        "params": "(lua_State *L)",
        "start_line": 216,
        "end_line": 236
      },
      {
        "method_name": "handle_script",
        "params": "(lua_State *L, char **argv, int n)",
        "start_line": 239,
        "end_line": 254
      },
      {
        "method_name": "notail",
        "params": "(x)",
        "start_line": 258,
        "end_line": 258
      },
      {
        "method_name": "collectargs",
        "params": "(char **argv, int *pi, int *pv, int *pe)",
        "start_line": 261,
        "end_line": 291
      },
      {
        "method_name": "runargs",
        "params": "(lua_State *L, char **argv, int n)",
        "start_line": 294,
        "end_line": 320
      },
      {
        "method_name": "handle_luainit",
        "params": "(lua_State *L)",
        "start_line": 323,
        "end_line": 330
      },
      {
        "method_name": "pmain",
        "params": "(lua_State *L)",
        "start_line": 340,
        "end_line": 374
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 377,
        "end_line": 391
      }
    ],
    "structs": [
      {
        "struct_name": "Smain",
        "start_line": 333,
        "end_line": 337
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lua.h",
    "line": 388,
    "headers": [
      "stdarg.h",
      "stddef.h",
      "luaconf.h",
      "= 0)\n\n#define lua_pushliteral(L, s)\t\\\n\tlua_pushlstring(L, "
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "lua_Debug",
        "start_line": 346,
        "end_line": 359
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lua_bit.c",
    "line": 189,
    "headers": [
      "lua.h",
      "lauxlib.h"
    ],
    "methods": [
      {
        "method_name": "barg",
        "params": "(lua_State *L, int idx)",
        "start_line": 58,
        "end_line": 91
      },
      {
        "method_name": "bit_tobit",
        "params": "(lua_State *L)",
        "start_line": 96,
        "end_line": 96
      },
      {
        "method_name": "bit_bnot",
        "params": "(lua_State *L)",
        "start_line": 97,
        "end_line": 97
      },
      {
        "method_name": "func",
        "params": "(lua_State *L)",
        "start_line": 100,
        "end_line": 101
      },
      {
        "method_name": "func",
        "params": "(lua_State *L)",
        "start_line": 112,
        "end_line": 113
      },
      {
        "method_name": "bit_bswap",
        "params": "(lua_State *L)",
        "start_line": 121,
        "end_line": 125
      },
      {
        "method_name": "bit_tohex",
        "params": "(lua_State *L)",
        "start_line": 128,
        "end_line": 139
      },
      {
        "method_name": "luaopen_bit",
        "params": "(lua_State *L)",
        "start_line": 164,
        "end_line": 188
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lua_cjson.c",
    "line": 1427,
    "headers": [
      "assert.h",
      "string.h",
      "math.h",
      "limits.h",
      "lua.h",
      "lauxlib.h",
      "strbuf.h",
      "fpconv.h",
      "../../../src/solarisfixes.h"
    ],
    "methods": [
      {
        "method_name": "*json_fetch_config",
        "params": "(lua_State *l)",
        "start_line": 195,
        "end_line": 203
      },
      {
        "method_name": "*json_arg_init",
        "params": "(lua_State *l, int args)",
        "start_line": 209,
        "end_line": 217
      },
      {
        "method_name": "json_integer_option",
        "params": "(lua_State *l, int optindex, int *setting,\n                               int min, int max)",
        "start_line": 222,
        "end_line": 236
      },
      {
        "method_name": "json_enum_option",
        "params": "(lua_State *l, int optindex, int *setting,\n                            const char **options, int bool_true)",
        "start_line": 241,
        "end_line": 262
      },
      {
        "method_name": "json_cfg_encode_sparse_array",
        "params": "(lua_State *l)",
        "start_line": 269,
        "end_line": 277
      },
      {
        "method_name": "json_cfg_encode_max_depth",
        "params": "(lua_State *l)",
        "start_line": 282,
        "end_line": 286
      },
      {
        "method_name": "json_cfg_decode_max_depth",
        "params": "(lua_State *l)",
        "start_line": 291,
        "end_line": 295
      },
      {
        "method_name": "json_cfg_encode_number_precision",
        "params": "(lua_State *l)",
        "start_line": 299,
        "end_line": 303
      },
      {
        "method_name": "json_cfg_encode_keep_buffer",
        "params": "(lua_State *l)",
        "start_line": 307,
        "end_line": 324
      },
      {
        "method_name": "json_verify_invalid_number_setting",
        "params": "(lua_State *l, int *setting)",
        "start_line": 328,
        "end_line": 333
      },
      {
        "method_name": "json_verify_invalid_number_setting",
        "params": "(l, s)",
        "start_line": 335,
        "end_line": 335
      },
      {
        "method_name": "json_cfg_encode_invalid_numbers",
        "params": "(lua_State *l)",
        "start_line": 339,
        "end_line": 348
      },
      {
        "method_name": "json_cfg_decode_invalid_numbers",
        "params": "(lua_State *l)",
        "start_line": 351,
        "end_line": 359
      },
      {
        "method_name": "json_destroy_config",
        "params": "(lua_State *l)",
        "start_line": 362,
        "end_line": 371
      },
      {
        "method_name": "json_create_config",
        "params": "(lua_State *l)",
        "start_line": 374,
        "end_line": 444
      },
      {
        "method_name": "json_encode_exception",
        "params": "(lua_State *l, json_config_t *cfg, strbuf_t *json, int lindex,\n                                  const char *reason)",
        "start_line": 450,
        "end_line": 455
      },
      {
        "method_name": "json_append_string",
        "params": "(lua_State *l, strbuf_t *json, int lindex)",
        "start_line": 464,
        "end_line": 487
      },
      {
        "method_name": "lua_array_length",
        "params": "(lua_State *l, json_config_t *cfg, strbuf_t *json)",
        "start_line": 494,
        "end_line": 534
      },
      {
        "method_name": "json_check_encode_depth",
        "params": "(lua_State *l, json_config_t *cfg,\n                                    int current_depth, strbuf_t *json)",
        "start_line": 538,
        "end_line": 557
      },
      {
        "method_name": "json_append_array",
        "params": "(lua_State *l, json_config_t *cfg, int current_depth,\n                              strbuf_t *json, int array_length)",
        "start_line": 568,
        "end_line": 586
      },
      {
        "method_name": "json_append_number",
        "params": "(lua_State *l, json_config_t *cfg,\n                               strbuf_t *json, int lindex)",
        "start_line": 590,
        "end_line": 616
      },
      {
        "method_name": "json_append_object",
        "params": "(lua_State *l, json_config_t *cfg,\n                               int current_depth, strbuf_t *json)",
        "start_line": 620,
        "end_line": 657
      },
      {
        "method_name": "json_append_data",
        "params": "(lua_State *l, json_config_t *cfg,\n                             int current_depth, strbuf_t *json)",
        "start_line": 662,
        "end_line": 701
      },
      {
        "method_name": "json_encode",
        "params": "(lua_State *l)",
        "start_line": 704,
        "end_line": 732
      },
      {
        "method_name": "hexdigit2int",
        "params": "(char hex)",
        "start_line": 740,
        "end_line": 750
      },
      {
        "method_name": "decode_hex4",
        "params": "(const char *hex)",
        "start_line": 753,
        "end_line": 771
      },
      {
        "method_name": "codepoint_to_utf8",
        "params": "(char *utf8, int codepoint)",
        "start_line": 776,
        "end_line": 808
      },
      {
        "method_name": "json_append_unicode_escape",
        "params": "(json_parse_t *json)",
        "start_line": 820,
        "end_line": 875
      },
      {
        "method_name": "json_set_token_error",
        "params": "(json_token_t *token, json_parse_t *json,\n                                 const char *errtype)",
        "start_line": 879,
        "end_line": 883
      },
      {
        "method_name": "json_next_string_token",
        "params": "(json_parse_t *json, json_token_t *token)",
        "start_line": 886,
        "end_line": 943
      },
      {
        "method_name": "json_is_invalid_number",
        "params": "(json_parse_t *json)",
        "start_line": 961,
        "end_line": 994
      },
      {
        "method_name": "json_next_number_token",
        "params": "(json_parse_t *json, json_token_t *token)",
        "start_line": 997,
        "end_line": 1008
      },
      {
        "method_name": "json_next_token",
        "params": "(json_parse_t *json, json_token_t *token)",
        "start_line": 1015,
        "end_line": 1091
      },
      {
        "method_name": "json_throw_parse_error",
        "params": "(lua_State *l, json_parse_t *json,\n                                   const char *exp, json_token_t *token)",
        "start_line": 1101,
        "end_line": 1114
      },
      {
        "method_name": "json_decode_ascend",
        "params": "(json_parse_t *json)",
        "start_line": 1117,
        "end_line": 1119
      },
      {
        "method_name": "json_decode_descend",
        "params": "(lua_State *l, json_parse_t *json, int slots)",
        "start_line": 1122,
        "end_line": 1133
      },
      {
        "method_name": "json_parse_object_context",
        "params": "(lua_State *l, json_parse_t *json)",
        "start_line": 1136,
        "end_line": 1183
      },
      {
        "method_name": "json_parse_array_context",
        "params": "(lua_State *l, json_parse_t *json)",
        "start_line": 1187,
        "end_line": 1221
      },
      {
        "method_name": "json_process_value",
        "params": "(lua_State *l, json_parse_t *json,\n                               json_token_t *token)",
        "start_line": 1226,
        "end_line": 1251
      },
      {
        "method_name": "json_decode",
        "params": "(lua_State *l)",
        "start_line": 1254,
        "end_line": 1291
      },
      {
        "method_name": "luaL_setfuncs",
        "params": "(lua_State *l, const luaL_Reg *reg, int nup)",
        "start_line": 1301,
        "end_line": 1312
      },
      {
        "method_name": "json_protect_conversion",
        "params": "(lua_State *l)",
        "start_line": 1319,
        "end_line": 1341
      },
      {
        "method_name": "lua_cjson_new",
        "params": "(lua_State *l)",
        "start_line": 1345,
        "end_line": 1381
      },
      {
        "method_name": "lua_cjson_safe_new",
        "params": "(lua_State *l)",
        "start_line": 1385,
        "end_line": 1402
      },
      {
        "method_name": "luaopen_cjson",
        "params": "(lua_State *l)",
        "start_line": 1405,
        "end_line": 1416
      },
      {
        "method_name": "luaopen_cjson_safe",
        "params": "(lua_State *l)",
        "start_line": 1419,
        "end_line": 1424
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 114,
        "end_line": 132
      },
      {
        "struct_name": "",
        "start_line": 134,
        "end_line": 140
      },
      {
        "struct_name": "",
        "start_line": 142,
        "end_line": 151
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 79,
        "end_line": 94
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lua_cmsgpack.c",
    "line": 977,
    "headers": [
      "math.h",
      "stdlib.h",
      "stdint.h",
      "string.h",
      "assert.h",
      "lua.h",
      "lauxlib.h"
    ],
    "methods": [
      {
        "method_name": "memrevifle",
        "params": "(void *ptr, size_t len)",
        "start_line": 69,
        "end_line": 85
      },
      {
        "method_name": "*mp_realloc",
        "params": "(lua_State *L, void *target, size_t osize,size_t nsize)",
        "start_line": 98,
        "end_line": 105
      },
      {
        "method_name": "*mp_buf_new",
        "params": "(lua_State *L)",
        "start_line": 107,
        "end_line": 116
      },
      {
        "method_name": "mp_buf_append",
        "params": "(lua_State *L, mp_buf *buf, const unsigned char *s, size_t len)",
        "start_line": 118,
        "end_line": 128
      },
      {
        "method_name": "mp_buf_free",
        "params": "(lua_State *L, mp_buf *buf)",
        "start_line": 130,
        "end_line": 133
      },
      {
        "method_name": "mp_cur_init",
        "params": "(mp_cur *cursor, const unsigned char *s, size_t len)",
        "start_line": 154,
        "end_line": 158
      },
      {
        "method_name": "mp_cur_consume",
        "params": "(_c,_len)",
        "start_line": 160,
        "end_line": 160
      },
      {
        "method_name": "mp_cur_need",
        "params": "(_c,_len)",
        "start_line": 165,
        "end_line": 170
      },
      {
        "method_name": "mp_encode_bytes",
        "params": "(lua_State *L, mp_buf *buf, const unsigned char *s, size_t len)",
        "start_line": 174,
        "end_line": 200
      },
      {
        "method_name": "mp_encode_double",
        "params": "(lua_State *L, mp_buf *buf, double d)",
        "start_line": 203,
        "end_line": 219
      },
      {
        "method_name": "mp_encode_int",
        "params": "(lua_State *L, mp_buf *buf, int64_t n)",
        "start_line": 221,
        "end_line": 291
      },
      {
        "method_name": "mp_encode_array",
        "params": "(lua_State *L, mp_buf *buf, int64_t n)",
        "start_line": 293,
        "end_line": 314
      },
      {
        "method_name": "mp_encode_map",
        "params": "(lua_State *L, mp_buf *buf, int64_t n)",
        "start_line": 316,
        "end_line": 337
      },
      {
        "method_name": "mp_encode_lua_string",
        "params": "(lua_State *L, mp_buf *buf)",
        "start_line": 341,
        "end_line": 347
      },
      {
        "method_name": "mp_encode_lua_bool",
        "params": "(lua_State *L, mp_buf *buf)",
        "start_line": 349,
        "end_line": 352
      },
      {
        "method_name": "mp_encode_lua_integer",
        "params": "(lua_State *L, mp_buf *buf)",
        "start_line": 355,
        "end_line": 362
      },
      {
        "method_name": "mp_encode_lua_number",
        "params": "(lua_State *L, mp_buf *buf)",
        "start_line": 367,
        "end_line": 375
      },
      {
        "method_name": "mp_encode_lua_table_as_array",
        "params": "(lua_State *L, mp_buf *buf, int level)",
        "start_line": 380,
        "end_line": 394
      },
      {
        "method_name": "mp_encode_lua_table_as_map",
        "params": "(lua_State *L, mp_buf *buf, int level)",
        "start_line": 397,
        "end_line": 420
      },
      {
        "method_name": "table_is_an_array",
        "params": "(lua_State *L)",
        "start_line": 425,
        "end_line": 463
      },
      {
        "method_name": "mp_encode_lua_table",
        "params": "(lua_State *L, mp_buf *buf, int level)",
        "start_line": 468,
        "end_line": 473
      },
      {
        "method_name": "mp_encode_lua_null",
        "params": "(lua_State *L, mp_buf *buf)",
        "start_line": 475,
        "end_line": 480
      },
      {
        "method_name": "mp_encode_lua_type",
        "params": "(lua_State *L, mp_buf *buf, int level)",
        "start_line": 482,
        "end_line": 506
      },
      {
        "method_name": "mp_pack",
        "params": "(lua_State *L)",
        "start_line": 512,
        "end_line": 545
      },
      {
        "method_name": "mp_decode_to_lua_array",
        "params": "(lua_State *L, mp_cur *c, size_t len)",
        "start_line": 551,
        "end_line": 563
      },
      {
        "method_name": "mp_decode_to_lua_hash",
        "params": "(lua_State *L, mp_cur *c, size_t len)",
        "start_line": 565,
        "end_line": 575
      },
      {
        "method_name": "mp_decode_to_lua_type",
        "params": "(lua_State *L, mp_cur *c)",
        "start_line": 579,
        "end_line": 791
      },
      {
        "method_name": "mp_unpack_full",
        "params": "(lua_State *L, int limit, int offset)",
        "start_line": 793,
        "end_line": 847
      },
      {
        "method_name": "mp_unpack",
        "params": "(lua_State *L)",
        "start_line": 849,
        "end_line": 851
      },
      {
        "method_name": "mp_unpack_one",
        "params": "(lua_State *L)",
        "start_line": 853,
        "end_line": 858
      },
      {
        "method_name": "mp_unpack_limit",
        "params": "(lua_State *L)",
        "start_line": 860,
        "end_line": 867
      },
      {
        "method_name": "mp_safe",
        "params": "(lua_State *L)",
        "start_line": 869,
        "end_line": 889
      },
      {
        "method_name": "luaopen_create",
        "params": "(lua_State *L)",
        "start_line": 900,
        "end_line": 921
      },
      {
        "method_name": "luaopen_cmsgpack",
        "params": "(lua_State *L)",
        "start_line": 923,
        "end_line": 933
      },
      {
        "method_name": "luaopen_cmsgpack_safe",
        "params": "(lua_State *L)",
        "start_line": 935,
        "end_line": 954
      }
    ],
    "structs": [
      {
        "struct_name": "mp_buf",
        "start_line": 93,
        "end_line": 96
      },
      {
        "struct_name": "mp_cur",
        "start_line": 148,
        "end_line": 152
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lua_struct.c",
    "line": 429,
    "headers": [
      "assert.h",
      "ctype.h",
      "limits.h",
      "stddef.h",
      "string.h",
      "lua.h",
      "lauxlib.h"
    ],
    "methods": [
      {
        "method_name": "getnum",
        "params": "(lua_State *L, const char **fmt, int df)",
        "start_line": 92,
        "end_line": 104
      },
      {
        "method_name": "optsize",
        "params": "(lua_State *L, char opt, const char **fmt)",
        "start_line": 111,
        "end_line": 130
      },
      {
        "method_name": "gettoalign",
        "params": "(size_t len, Header *h, int opt, size_t size)",
        "start_line": 137,
        "end_line": 142
      },
      {
        "method_name": "controloptions",
        "params": "(lua_State *L, int opt, const char **fmt,\n                            Header *h)",
        "start_line": 149,
        "end_line": 166
      },
      {
        "method_name": "putinteger",
        "params": "(lua_State *L, luaL_Buffer *b, int arg, int endian,\n                        int size)",
        "start_line": 170,
        "end_line": 193
      },
      {
        "method_name": "correctbytes",
        "params": "(char *b, int size, int endian)",
        "start_line": 196,
        "end_line": 205
      },
      {
        "method_name": "b_pack",
        "params": "(lua_State *L)",
        "start_line": 208,
        "end_line": 263
      },
      {
        "method_name": "getinteger",
        "params": "(const char *buff, int endian,\n                        int issigned, int size)",
        "start_line": 267,
        "end_line": 290
      },
      {
        "method_name": "b_unpack",
        "params": "(lua_State *L)",
        "start_line": 293,
        "end_line": 363
      },
      {
        "method_name": "b_size",
        "params": "(lua_State *L)",
        "start_line": 366,
        "end_line": 385
      },
      {
        "method_name": "luaopen_struct",
        "params": "(lua_State *L)",
        "start_line": 401,
        "end_line": 404
      }
    ],
    "structs": [
      {
        "struct_name": "cD",
        "start_line": 65,
        "end_line": 68
      },
      {
        "struct_name": "Header",
        "start_line": 86,
        "end_line": 89
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/luac.c",
    "line": 200,
    "headers": [
      "errno.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "lauxlib.h",
      "ldo.h",
      "lfunc.h",
      "lmem.h",
      "lobject.h",
      "lopcodes.h",
      "lstring.h",
      "lundump.h"
    ],
    "methods": [
      {
        "method_name": "fatal",
        "params": "(const char* message)",
        "start_line": 37,
        "end_line": 40
      },
      {
        "method_name": "cannot",
        "params": "(const char* what)",
        "start_line": 43,
        "end_line": 46
      },
      {
        "method_name": "usage",
        "params": "(const char* message)",
        "start_line": 49,
        "end_line": 66
      },
      {
        "method_name": "doargs",
        "params": "(int argc, char* argv[])",
        "start_line": 71,
        "end_line": 115
      },
      {
        "method_name": "combine",
        "params": "(lua_State* L, int n)",
        "start_line": 120,
        "end_line": 145
      },
      {
        "method_name": "writer",
        "params": "(lua_State* L, const void* p, size_t size, void* u)",
        "start_line": 148,
        "end_line": 151
      },
      {
        "method_name": "pmain",
        "params": "(lua_State* L)",
        "start_line": 159,
        "end_line": 184
      },
      {
        "method_name": "main",
        "params": "(int argc, char* argv[])",
        "start_line": 187,
        "end_line": 200
      }
    ],
    "structs": [
      {
        "struct_name": "Smain",
        "start_line": 153,
        "end_line": 156
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/luaconf.h",
    "line": 763,
    "headers": [
      "limits.h",
      "stddef.h",
      "unistd.h",
      "io.h",
      "stdio.h",
      "stdio.h",
      "readline/readline.h",
      "readline/history.h",
      "assert.h",
      "math.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "lua_saveline",
        "params": "(L,idx)",
        "start_line": 286,
        "end_line": 286
      },
      {
        "method_name": "lua_freeline",
        "params": "(L,b)",
        "start_line": 287,
        "end_line": 287
      },
      {
        "method_name": "luai_apicheck",
        "params": "(L,o)",
        "start_line": 379,
        "end_line": 379
      },
      {
        "method_name": "luai_apicheck",
        "params": "(L,o)",
        "start_line": 381,
        "end_line": 381
      },
      {
        "method_name": "lua_number2int",
        "params": "(i,d)",
        "start_line": 572,
        "end_line": 572
      },
      {
        "method_name": "LUAI_TRY",
        "params": "(L,c,a)",
        "start_line": 609,
        "end_line": 609
      },
      {
        "method_name": "catch",
        "params": "(...)",
        "start_line": 610,
        "end_line": 610
      },
      {
        "method_name": "(_setjmp(",
        "params": "(c)-\u003eb) == 0)",
        "start_line": 616,
        "end_line": 616
      },
      {
        "method_name": "(setjmp(",
        "params": "(c)-\u003eb) == 0)",
        "start_line": 622,
        "end_line": 622
      },
      {
        "method_name": "lua_tmpnam",
        "params": "(b,e)",
        "start_line": 649,
        "end_line": 653
      },
      {
        "method_name": "lua_tmpnam",
        "params": "(b,e)",
        "start_line": 657,
        "end_line": 657
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lualib.h",
    "line": 53,
    "headers": [
      "lua.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lundump.c",
    "line": 227,
    "headers": [
      "string.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lmem.h",
      "lobject.h",
      "lstring.h",
      "lundump.h",
      "lzio.h"
    ],
    "methods": [
      {
        "method_name": "error",
        "params": "(LoadState* S, const char* why)",
        "start_line": 37,
        "end_line": 40
      },
      {
        "method_name": "LoadBlock",
        "params": "(LoadState* S, void* b, size_t size)",
        "start_line": 49,
        "end_line": 52
      },
      {
        "method_name": "LoadChar",
        "params": "(LoadState* S)",
        "start_line": 55,
        "end_line": 59
      },
      {
        "method_name": "LoadInt",
        "params": "(LoadState* S)",
        "start_line": 62,
        "end_line": 67
      },
      {
        "method_name": "LoadNumber",
        "params": "(LoadState* S)",
        "start_line": 70,
        "end_line": 74
      },
      {
        "method_name": "LoadString",
        "params": "(LoadState* S)",
        "start_line": 77,
        "end_line": 88
      },
      {
        "method_name": "LoadCode",
        "params": "(LoadState* S, Proto* f)",
        "start_line": 91,
        "end_line": 96
      },
      {
        "method_name": "LoadConstants",
        "params": "(LoadState* S, Proto* f)",
        "start_line": 101,
        "end_line": 135
      },
      {
        "method_name": "LoadDebug",
        "params": "(LoadState* S, Proto* f)",
        "start_line": 138,
        "end_line": 159
      },
      {
        "method_name": "LoadFunction",
        "params": "(LoadState* S, TString* p)",
        "start_line": 162,
        "end_line": 181
      },
      {
        "method_name": "LoadHeader",
        "params": "(LoadState* S)",
        "start_line": 184,
        "end_line": 190
      },
      {
        "method_name": "luaU_undump",
        "params": "(lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)",
        "start_line": 196,
        "end_line": 209
      },
      {
        "method_name": "luaU_header",
        "params": "(char* h)",
        "start_line": 215,
        "end_line": 227
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 23,
        "end_line": 28
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lundump.h",
    "line": 36,
    "headers": [
      "lobject.h",
      "lzio.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lvm.c",
    "line": 767,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "lua.h",
      "ldebug.h",
      "ldo.h",
      "lfunc.h",
      "lgc.h",
      "lobject.h",
      "lopcodes.h",
      "lstate.h",
      "lstring.h",
      "ltable.h",
      "ltm.h",
      "lvm.h"
    ],
    "methods": [
      {
        "method_name": "*luaV_tonumber",
        "params": "(const TValue *obj, TValue *n)",
        "start_line": 35,
        "end_line": 44
      },
      {
        "method_name": "luaV_tostring",
        "params": "(lua_State *L, StkId obj)",
        "start_line": 47,
        "end_line": 57
      },
      {
        "method_name": "traceexec",
        "params": "(lua_State *L, const Instruction *pc)",
        "start_line": 60,
        "end_line": 77
      },
      {
        "method_name": "callTMres",
        "params": "(lua_State *L, StkId res, const TValue *f,\n                        const TValue *p1, const TValue *p2)",
        "start_line": 81,
        "end_line": 92
      },
      {
        "method_name": "callTM",
        "params": "(lua_State *L, const TValue *f, const TValue *p1,\n                    const TValue *p2, const TValue *p3)",
        "start_line": 97,
        "end_line": 105
      },
      {
        "method_name": "luaV_gettable",
        "params": "(lua_State *L, const TValue *t, TValue *key, StkId val)",
        "start_line": 108,
        "end_line": 131
      },
      {
        "method_name": "luaV_settable",
        "params": "(lua_State *L, const TValue *t, TValue *key, StkId val)",
        "start_line": 134,
        "end_line": 162
      },
      {
        "method_name": "call_binTM",
        "params": "(lua_State *L, const TValue *p1, const TValue *p2,\n                       StkId res, TMS event)",
        "start_line": 166,
        "end_line": 173
      },
      {
        "method_name": "*get_compTM",
        "params": "(lua_State *L, Table *mt1, Table *mt2,\n                                  TMS event)",
        "start_line": 177,
        "end_line": 187
      },
      {
        "method_name": "call_orderTM",
        "params": "(lua_State *L, const TValue *p1, const TValue *p2,\n                         TMS event)",
        "start_line": 191,
        "end_line": 200
      },
      {
        "method_name": "l_strcmp",
        "params": "(const TString *ls, const TString *rs)",
        "start_line": 203,
        "end_line": 222
      },
      {
        "method_name": "luaV_lessthan",
        "params": "(lua_State *L, const TValue *l, const TValue *r)",
        "start_line": 225,
        "end_line": 236
      },
      {
        "method_name": "lessequal",
        "params": "(lua_State *L, const TValue *l, const TValue *r)",
        "start_line": 239,
        "end_line": 252
      },
      {
        "method_name": "luaV_equalval",
        "params": "(lua_State *L, const TValue *t1, const TValue *t2)",
        "start_line": 255,
        "end_line": 279
      },
      {
        "method_name": "luaV_concat",
        "params": "(lua_State *L, int total, int last)",
        "start_line": 282,
        "end_line": 314
      },
      {
        "method_name": "Arith",
        "params": "(lua_State *L, StkId ra, const TValue *rb,\n                   const TValue *rc, TMS op)",
        "start_line": 318,
        "end_line": 337
      },
      {
        "method_name": "runtime_check",
        "params": "(L, c)",
        "start_line": 345,
        "end_line": 345
      },
      {
        "method_name": "dojump",
        "params": "(L,pc,i)",
        "start_line": 358,
        "end_line": 358
      },
      {
        "method_name": "Protect",
        "params": "(x)",
        "start_line": 361,
        "end_line": 361
      },
      {
        "method_name": "arith_op",
        "params": "(op,tm)",
        "start_line": 364,
        "end_line": 373
      },
      {
        "method_name": "luaV_execute",
        "params": "(lua_State *L, int nexeccalls)",
        "start_line": 377,
        "end_line": 766
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lvm.h",
    "line": 36,
    "headers": [
      "ldo.h",
      "lobject.h",
      "ltm.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lzio.c",
    "line": 82,
    "headers": [
      "string.h",
      "lua.h",
      "llimits.h",
      "lmem.h",
      "lstate.h",
      "lzio.h"
    ],
    "methods": [
      {
        "method_name": "luaZ_fill",
        "params": "(ZIO *z)",
        "start_line": 21,
        "end_line": 32
      },
      {
        "method_name": "luaZ_lookahead",
        "params": "(ZIO *z)",
        "start_line": 35,
        "end_line": 45
      },
      {
        "method_name": "luaZ_init",
        "params": "(lua_State *L, ZIO *z, lua_Reader reader, void *data)",
        "start_line": 48,
        "end_line": 54
      },
      {
        "method_name": "luaZ_read",
        "params": "(ZIO *z, void *b, size_t n)",
        "start_line": 58,
        "end_line": 71
      },
      {
        "method_name": "*luaZ_openspace",
        "params": "(lua_State *L, Mbuffer *buff, size_t n)",
        "start_line": 74,
        "end_line": 80
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/lzio.h",
    "line": 67,
    "headers": [
      "lua.h",
      "lmem.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "Mbuffer",
        "start_line": 24,
        "end_line": 28
      },
      {
        "struct_name": "Zio",
        "start_line": 56,
        "end_line": 62
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/print.c",
    "line": 227,
    "headers": [
      "ctype.h",
      "stdio.h",
      "ldebug.h",
      "lobject.h",
      "lopcodes.h",
      "lundump.h"
    ],
    "methods": [
      {
        "method_name": "PrintString",
        "params": "(const TString* ts)",
        "start_line": 24,
        "end_line": 49
      },
      {
        "method_name": "PrintConstant",
        "params": "(const Proto* f, int i)",
        "start_line": 52,
        "end_line": 72
      },
      {
        "method_name": "PrintCode",
        "params": "(const Proto* f)",
        "start_line": 75,
        "end_line": 156
      },
      {
        "method_name": "PrintHeader",
        "params": "(const Proto* f)",
        "start_line": 162,
        "end_line": 179
      },
      {
        "method_name": "PrintConstants",
        "params": "(const Proto* f)",
        "start_line": 182,
        "end_line": 191
      },
      {
        "method_name": "PrintLocals",
        "params": "(const Proto* f)",
        "start_line": 194,
        "end_line": 202
      },
      {
        "method_name": "PrintUpvalues",
        "params": "(const Proto* f)",
        "start_line": 205,
        "end_line": 213
      },
      {
        "method_name": "PrintFunction",
        "params": "(const Proto* f, int full)",
        "start_line": 216,
        "end_line": 227
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/strbuf.c",
    "line": 251,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "stdarg.h",
      "string.h",
      "strbuf.h"
    ],
    "methods": [
      {
        "method_name": "die",
        "params": "(const char *fmt, ...)",
        "start_line": 33,
        "end_line": 42
      },
      {
        "method_name": "strbuf_init",
        "params": "(strbuf_t *s, int len)",
        "start_line": 45,
        "end_line": 66
      },
      {
        "method_name": "*strbuf_new",
        "params": "(int len)",
        "start_line": 69,
        "end_line": 82
      },
      {
        "method_name": "strbuf_set_increment",
        "params": "(strbuf_t *s, int increment)",
        "start_line": 85,
        "end_line": 92
      },
      {
        "method_name": "debug_stats",
        "params": "(strbuf_t *s)",
        "start_line": 95,
        "end_line": 100
      },
      {
        "method_name": "strbuf_free",
        "params": "(strbuf_t *s)",
        "start_line": 105,
        "end_line": 114
      },
      {
        "method_name": "*strbuf_free_to_string",
        "params": "(strbuf_t *s, int *len)",
        "start_line": 117,
        "end_line": 132
      },
      {
        "method_name": "calculate_new_size",
        "params": "(strbuf_t *s, int len)",
        "start_line": 135,
        "end_line": 159
      },
      {
        "method_name": "strbuf_resize",
        "params": "(strbuf_t *s, int len)",
        "start_line": 165,
        "end_line": 180
      },
      {
        "method_name": "strbuf_append_string",
        "params": "(strbuf_t *s, const char *str)",
        "start_line": 183,
        "end_line": 198
      },
      {
        "method_name": "strbuf_append_fmt",
        "params": "(strbuf_t *s, int len, const char *fmt, ...)",
        "start_line": 203,
        "end_line": 217
      },
      {
        "method_name": "strbuf_append_fmt_retry",
        "params": "(strbuf_t *s, const char *fmt, ...)",
        "start_line": 222,
        "end_line": 248
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/deps/lua/src/strbuf.h",
    "line": 154,
    "headers": [
      "stdlib.h",
      "stdarg.h"
    ],
    "methods": [
      {
        "method_name": "strbuf_reset",
        "params": "(strbuf_t *s)",
        "start_line": 79,
        "end_line": 81
      },
      {
        "method_name": "strbuf_allocated",
        "params": "(strbuf_t *s)",
        "start_line": 84,
        "end_line": 86
      },
      {
        "method_name": "strbuf_empty_length",
        "params": "(strbuf_t *s)",
        "start_line": 91,
        "end_line": 93
      },
      {
        "method_name": "strbuf_ensure_empty_length",
        "params": "(strbuf_t *s, int len)",
        "start_line": 96,
        "end_line": 99
      },
      {
        "method_name": "*strbuf_empty_ptr",
        "params": "(strbuf_t *s)",
        "start_line": 102,
        "end_line": 104
      },
      {
        "method_name": "strbuf_extend_length",
        "params": "(strbuf_t *s, int len)",
        "start_line": 107,
        "end_line": 109
      },
      {
        "method_name": "strbuf_length",
        "params": "(strbuf_t *s)",
        "start_line": 112,
        "end_line": 114
      },
      {
        "method_name": "strbuf_append_char",
        "params": "(strbuf_t *s, const char c)",
        "start_line": 117,
        "end_line": 120
      },
      {
        "method_name": "strbuf_append_char_unsafe",
        "params": "(strbuf_t *s, const char c)",
        "start_line": 123,
        "end_line": 125
      },
      {
        "method_name": "strbuf_append_mem",
        "params": "(strbuf_t *s, const char *c, int len)",
        "start_line": 128,
        "end_line": 132
      },
      {
        "method_name": "strbuf_append_mem_unsafe",
        "params": "(strbuf_t *s, const char *c, int len)",
        "start_line": 135,
        "end_line": 138
      },
      {
        "method_name": "strbuf_ensure_null",
        "params": "(strbuf_t *s)",
        "start_line": 141,
        "end_line": 143
      },
      {
        "method_name": "*strbuf_string",
        "params": "(strbuf_t *s, int *len)",
        "start_line": 146,
        "end_line": 151
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 34,
        "end_line": 42
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/acl.c",
    "line": 1990,
    "headers": [
      "server.h",
      "sha256.h",
      "fcntl.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "time_independent_strcmp",
        "params": "(char *a, char *b)",
        "start_line": 117,
        "end_line": 148
      },
      {
        "method_name": "ACLHashPassword",
        "params": "(unsigned char *cleartext, size_t len)",
        "start_line": 152,
        "end_line": 167
      },
      {
        "method_name": "ACLCheckPasswordHash",
        "params": "(unsigned char *hash, int hashlen)",
        "start_line": 171,
        "end_line": 186
      },
      {
        "method_name": "ACLStringHasSpaces",
        "params": "(const char *s, size_t len)",
        "start_line": 197,
        "end_line": 202
      },
      {
        "method_name": "ACLGetCommandCategoryFlagByName",
        "params": "(const char *name)",
        "start_line": 206,
        "end_line": 213
      },
      {
        "method_name": "ACLListMatchSds",
        "params": "(void *a, void *b)",
        "start_line": 217,
        "end_line": 219
      },
      {
        "method_name": "ACLListFreeSds",
        "params": "(void *item)",
        "start_line": 222,
        "end_line": 224
      },
      {
        "method_name": "*ACLListDupSds",
        "params": "(void *item)",
        "start_line": 227,
        "end_line": 229
      },
      {
        "method_name": "*ACLCreateUser",
        "params": "(const char *name, size_t namelen)",
        "start_line": 236,
        "end_line": 253
      },
      {
        "method_name": "*ACLCreateUnlinkedUser",
        "params": "(void)",
        "start_line": 259,
        "end_line": 270
      },
      {
        "method_name": "ACLFreeUser",
        "params": "(user *u)",
        "start_line": 274,
        "end_line": 280
      },
      {
        "method_name": "ACLFreeUserAndKillClients",
        "params": "(user *u)",
        "start_line": 285,
        "end_line": 304
      },
      {
        "method_name": "ACLCopyUser",
        "params": "(user *dst, user *src)",
        "start_line": 309,
        "end_line": 330
      },
      {
        "method_name": "ACLFreeUsersSet",
        "params": "(rax *users)",
        "start_line": 334,
        "end_line": 336
      },
      {
        "method_name": "ACLGetCommandBitCoordinates",
        "params": "(uint64_t id, uint64_t *word, uint64_t *bit)",
        "start_line": 344,
        "end_line": 349
      },
      {
        "method_name": "ACLGetUserCommandBit",
        "params": "(user *u, unsigned long id)",
        "start_line": 358,
        "end_line": 362
      },
      {
        "method_name": "ACLUserCanExecuteFutureCommands",
        "params": "(user *u)",
        "start_line": 367,
        "end_line": 369
      },
      {
        "method_name": "ACLSetUserCommandBit",
        "params": "(user *u, unsigned long id, int value)",
        "start_line": 376,
        "end_line": 385
      },
      {
        "method_name": "ACLSetUserCommandBitsForCategory",
        "params": "(user *u, const char *category, int value)",
        "start_line": 393,
        "end_line": 408
      },
      {
        "method_name": "ACLCountCategoryBitsForUser",
        "params": "(user *u, unsigned long *on, unsigned long *off,\n                                const char *category)",
        "start_line": 416,
        "end_line": 434
      },
      {
        "method_name": "ACLDescribeUserCommandRules",
        "params": "(user *u)",
        "start_line": 443,
        "end_line": 535
      },
      {
        "method_name": "ACLDescribeUser",
        "params": "(user *u)",
        "start_line": 543,
        "end_line": 587
      },
      {
        "method_name": "*ACLLookupCommand",
        "params": "(const char *name)",
        "start_line": 592,
        "end_line": 598
      },
      {
        "method_name": "ACLResetSubcommandsForCommand",
        "params": "(user *u, unsigned long id)",
        "start_line": 602,
        "end_line": 609
      },
      {
        "method_name": "ACLResetSubcommands",
        "params": "(user *u)",
        "start_line": 614,
        "end_line": 625
      },
      {
        "method_name": "ACLAddAllowedSubcommand",
        "params": "(user *u, unsigned long id, const char *sub)",
        "start_line": 630,
        "end_line": 657
      },
      {
        "method_name": "ACLSetUser",
        "params": "(user *u, const char *op, ssize_t oplen)",
        "start_line": 737,
        "end_line": 901
      },
      {
        "method_name": "*ACLSetUserStringError",
        "params": "(void)",
        "start_line": 905,
        "end_line": 927
      },
      {
        "method_name": "ACLInitDefaultUser",
        "params": "(void)",
        "start_line": 931,
        "end_line": 937
      },
      {
        "method_name": "ACLInit",
        "params": "(void)",
        "start_line": 940,
        "end_line": 946
      },
      {
        "method_name": "ACLCheckUserCredentials",
        "params": "(robj *username, robj *password)",
        "start_line": 954,
        "end_line": 988
      },
      {
        "method_name": "ACLAuthenticateUser",
        "params": "(client *c, robj *username, robj *password)",
        "start_line": 996,
        "end_line": 1006
      },
      {
        "method_name": "ACLGetCommandID",
        "params": "(const char *cmdname)",
        "start_line": 1014,
        "end_line": 1042
      },
      {
        "method_name": "*ACLGetUserByName",
        "params": "(const char *name, size_t namelen)",
        "start_line": 1045,
        "end_line": 1049
      },
      {
        "method_name": "ACLCheckCommandPerm",
        "params": "(client *c, int *keyidxptr)",
        "start_line": 1060,
        "end_line": 1131
      },
      {
        "method_name": "ACLAppendUserForLoading",
        "params": "(sds *argv, int argc, int *argc_err)",
        "start_line": 1155,
        "end_line": 1182
      },
      {
        "method_name": "ACLLoadConfiguredUsers",
        "params": "(void)",
        "start_line": 1187,
        "end_line": 1228
      },
      {
        "method_name": "ACLLoadFromFile",
        "params": "(const char *filename)",
        "start_line": 1253,
        "end_line": 1399
      },
      {
        "method_name": "ACLSaveToFile",
        "params": "(const char *filename)",
        "start_line": 1404,
        "end_line": 1463
      },
      {
        "method_name": "ACLLoadUsersAtStartup",
        "params": "(void)",
        "start_line": 1470,
        "end_line": 1496
      },
      {
        "method_name": "ACLLogMatchEntry",
        "params": "(ACLLogEntry *a, ACLLogEntry *b)",
        "start_line": 1521,
        "end_line": 1530
      },
      {
        "method_name": "ACLFreeLogEntry",
        "params": "(void *leptr)",
        "start_line": 1533,
        "end_line": 1539
      },
      {
        "method_name": "addACLLogEntry",
        "params": "(client *c, int reason, int keypos, sds username)",
        "start_line": 1553,
        "end_line": 1621
      },
      {
        "method_name": "aclCommand",
        "params": "(client *c)",
        "start_line": 1641,
        "end_line": 1934
      },
      {
        "method_name": "addReplyCommandCategories",
        "params": "(client *c, struct redisCommand *cmd)",
        "start_line": 1936,
        "end_line": 1946
      },
      {
        "method_name": "authCommand",
        "params": "(client *c)",
        "start_line": 1953,
        "end_line": 1989
      }
    ],
    "structs": [
      {
        "struct_name": "ACLCategoryItem",
        "start_line": 56,
        "end_line": 59
      },
      {
        "struct_name": "ACLUserFlag",
        "start_line": 84,
        "end_line": 87
      },
      {
        "struct_name": "ACLLogEntry",
        "start_line": 1508,
        "end_line": 1516
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/adlist.c",
    "line": 376,
    "headers": [
      "stdlib.h",
      "adlist.h",
      "zmalloc.h"
    ],
    "methods": [
      {
        "method_name": "*listCreate",
        "params": "(void)",
        "start_line": 42,
        "end_line": 53
      },
      {
        "method_name": "listEmpty",
        "params": "(list *list)",
        "start_line": 57,
        "end_line": 71
      },
      {
        "method_name": "listRelease",
        "params": "(list *list)",
        "start_line": 77,
        "end_line": 80
      },
      {
        "method_name": "*listAddNodeHead",
        "params": "(list *list, void *value)",
        "start_line": 89,
        "end_line": 106
      },
      {
        "method_name": "*listAddNodeTail",
        "params": "(list *list, void *value)",
        "start_line": 115,
        "end_line": 132
      },
      {
        "method_name": "*listInsertNode",
        "params": "(list *list, listNode *old_node, void *value, int after)",
        "start_line": 134,
        "end_line": 161
      },
      {
        "method_name": "listDelNode",
        "params": "(list *list, listNode *node)",
        "start_line": 168,
        "end_line": 180
      },
      {
        "method_name": "*listGetIterator",
        "params": "(list *list, int direction)",
        "start_line": 187,
        "end_line": 197
      },
      {
        "method_name": "listReleaseIterator",
        "params": "(listIter *iter)",
        "start_line": 200,
        "end_line": 202
      },
      {
        "method_name": "listRewind",
        "params": "(list *list, listIter *li)",
        "start_line": 205,
        "end_line": 208
      },
      {
        "method_name": "listRewindTail",
        "params": "(list *list, listIter *li)",
        "start_line": 210,
        "end_line": 213
      },
      {
        "method_name": "listNext",
        "params": "(iter)) != NULL)",
        "start_line": 224,
        "end_line": 226
      },
      {
        "method_name": "*listNext",
        "params": "(listIter *iter)",
        "start_line": 230,
        "end_line": 240
      },
      {
        "method_name": "*listDup",
        "params": "(list *orig)",
        "start_line": 251,
        "end_line": 279
      },
      {
        "method_name": "*listSearchKey",
        "params": "(list *list, void *key)",
        "start_line": 291,
        "end_line": 308
      },
      {
        "method_name": "*listIndex",
        "params": "(list *list, long index)",
        "start_line": 315,
        "end_line": 327
      },
      {
        "method_name": "listRotateTailToHead",
        "params": "(list *list)",
        "start_line": 330,
        "end_line": 342
      },
      {
        "method_name": "listRotateHeadToTail",
        "params": "(list *list)",
        "start_line": 345,
        "end_line": 357
      },
      {
        "method_name": "listJoin",
        "params": "(list *l, list *o)",
        "start_line": 361,
        "end_line": 376
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/adlist.h",
    "line": 96,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "listNode",
        "start_line": 36,
        "end_line": 40
      },
      {
        "struct_name": "listIter",
        "start_line": 42,
        "end_line": 45
      },
      {
        "struct_name": "list",
        "start_line": 47,
        "end_line": 54
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ae.c",
    "line": 555,
    "headers": [
      "stdio.h",
      "sys/time.h",
      "sys/types.h",
      "unistd.h",
      "stdlib.h",
      "poll.h",
      "string.h",
      "time.h",
      "errno.h",
      "ae.h",
      "zmalloc.h",
      "config.h",
      "ae_evport.c",
      "ae_epoll.c",
      "ae_kqueue.c",
      "ae_select.c"
    ],
    "methods": [
      {
        "method_name": "*aeCreateEventLoop",
        "params": "(int setsize)",
        "start_line": 63,
        "end_line": 94
      },
      {
        "method_name": "aeGetSetSize",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 97,
        "end_line": 99
      },
      {
        "method_name": "aeSetDontWait",
        "params": "(aeEventLoop *eventLoop, int noWait)",
        "start_line": 102,
        "end_line": 107
      },
      {
        "method_name": "aeResizeSetSize",
        "params": "(aeEventLoop *eventLoop, int setsize)",
        "start_line": 116,
        "end_line": 132
      },
      {
        "method_name": "aeDeleteEventLoop",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 134,
        "end_line": 147
      },
      {
        "method_name": "aeStop",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 149,
        "end_line": 151
      },
      {
        "method_name": "aeCreateFileEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask,\n        aeFileProc *proc, void *clientData)",
        "start_line": 155,
        "end_line": 171
      },
      {
        "method_name": "aeDeleteFileEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 174,
        "end_line": 193
      },
      {
        "method_name": "aeGetFileEvents",
        "params": "(aeEventLoop *eventLoop, int fd)",
        "start_line": 195,
        "end_line": 200
      },
      {
        "method_name": "aeGetTime",
        "params": "(long *seconds, long *milliseconds)",
        "start_line": 203,
        "end_line": 209
      },
      {
        "method_name": "aeAddMillisecondsToNow",
        "params": "(long long milliseconds, long *sec, long *ms)",
        "start_line": 211,
        "end_line": 223
      },
      {
        "method_name": "aeCreateTimeEvent",
        "params": "(aeEventLoop *eventLoop, long long milliseconds,\n        aeTimeProc *proc, void *clientData,\n        aeEventFinalizerProc *finalizerProc)",
        "start_line": 228,
        "end_line": 246
      },
      {
        "method_name": "aeDeleteTimeEvent",
        "params": "(aeEventLoop *eventLoop, long long id)",
        "start_line": 249,
        "end_line": 259
      },
      {
        "method_name": "*aeSearchNearestTimer",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 273,
        "end_line": 285
      },
      {
        "method_name": "processTimeEvents",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 288,
        "end_line": 369
      },
      {
        "method_name": "aeProcessEvents",
        "params": "(aeEventLoop *eventLoop, int flags)",
        "start_line": 387,
        "end_line": 512
      },
      {
        "method_name": "aeWait",
        "params": "(int fd, int mask, long long milliseconds)",
        "start_line": 516,
        "end_line": 534
      },
      {
        "method_name": "aeMain",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 536,
        "end_line": 543
      },
      {
        "method_name": "*aeGetApiName",
        "params": "(void)",
        "start_line": 545,
        "end_line": 547
      },
      {
        "method_name": "aeSetBeforeSleepProc",
        "params": "(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep)",
        "start_line": 549,
        "end_line": 551
      },
      {
        "method_name": "aeSetAfterSleepProc",
        "params": "(aeEventLoop *eventLoop, aeBeforeSleepProc *aftersleep)",
        "start_line": 553,
        "end_line": 555
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ae.h",
    "line": 137,
    "headers": [
      "time.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "aeFileEvent",
        "start_line": 72,
        "end_line": 77
      },
      {
        "struct_name": "aeTimeEvent",
        "start_line": 80,
        "end_line": 91
      },
      {
        "struct_name": "aeFiredEvent",
        "start_line": 94,
        "end_line": 97
      },
      {
        "struct_name": "aeEventLoop",
        "start_line": 100,
        "end_line": 113
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ae_epoll.c",
    "line": 135,
    "headers": [
      "sys/epoll.h"
    ],
    "methods": [
      {
        "method_name": "aeApiCreate",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 39,
        "end_line": 56
      },
      {
        "method_name": "aeApiResize",
        "params": "(aeEventLoop *eventLoop, int setsize)",
        "start_line": 58,
        "end_line": 63
      },
      {
        "method_name": "aeApiFree",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 65,
        "end_line": 71
      },
      {
        "method_name": "aeApiAddEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 73,
        "end_line": 88
      },
      {
        "method_name": "aeApiDelEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int delmask)",
        "start_line": 90,
        "end_line": 106
      },
      {
        "method_name": "aeApiPoll",
        "params": "(aeEventLoop *eventLoop, struct timeval *tvp)",
        "start_line": 108,
        "end_line": 131
      },
      {
        "method_name": "*aeApiName",
        "params": "(void)",
        "start_line": 133,
        "end_line": 135
      }
    ],
    "structs": [
      {
        "struct_name": "aeApiState",
        "start_line": 34,
        "end_line": 37
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ae_evport.c",
    "line": 320,
    "headers": [
      "assert.h",
      "errno.h",
      "port.h",
      "poll.h",
      "sys/types.h",
      "sys/time.h",
      "stdio.h"
    ],
    "methods": [
      {
        "method_name": "aeApiCreate",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 75,
        "end_line": 95
      },
      {
        "method_name": "aeApiResize",
        "params": "(aeEventLoop *eventLoop, int setsize)",
        "start_line": 97,
        "end_line": 100
      },
      {
        "method_name": "aeApiFree",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 102,
        "end_line": 107
      },
      {
        "method_name": "aeApiLookupPending",
        "params": "(aeApiState *state, int fd)",
        "start_line": 109,
        "end_line": 118
      },
      {
        "method_name": "aeApiAssociate",
        "params": "(const char *where, int portfd, int fd, int mask)",
        "start_line": 123,
        "end_line": 150
      },
      {
        "method_name": "aeApiAddEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 152,
        "end_line": 181
      },
      {
        "method_name": "aeApiDelEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 183,
        "end_line": 241
      },
      {
        "method_name": "aeApiPoll",
        "params": "(aeEventLoop *eventLoop, struct timeval *tvp)",
        "start_line": 243,
        "end_line": 316
      },
      {
        "method_name": "*aeApiName",
        "params": "(void)",
        "start_line": 318,
        "end_line": 320
      }
    ],
    "structs": [
      {
        "struct_name": "aeApiState",
        "start_line": 68,
        "end_line": 73
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ae_kqueue.c",
    "line": 138,
    "headers": [
      "sys/types.h",
      "sys/event.h",
      "sys/time.h"
    ],
    "methods": [
      {
        "method_name": "aeApiCreate",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 41,
        "end_line": 58
      },
      {
        "method_name": "aeApiResize",
        "params": "(aeEventLoop *eventLoop, int setsize)",
        "start_line": 60,
        "end_line": 65
      },
      {
        "method_name": "aeApiFree",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 67,
        "end_line": 73
      },
      {
        "method_name": "aeApiAddEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 75,
        "end_line": 88
      },
      {
        "method_name": "aeApiDelEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 90,
        "end_line": 102
      },
      {
        "method_name": "aeApiPoll",
        "params": "(aeEventLoop *eventLoop, struct timeval *tvp)",
        "start_line": 104,
        "end_line": 134
      },
      {
        "method_name": "*aeApiName",
        "params": "(void)",
        "start_line": 136,
        "end_line": 138
      }
    ],
    "structs": [
      {
        "struct_name": "aeApiState",
        "start_line": 36,
        "end_line": 39
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ae_select.c",
    "line": 106,
    "headers": [
      "sys/select.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "aeApiCreate",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 42,
        "end_line": 50
      },
      {
        "method_name": "aeApiResize",
        "params": "(aeEventLoop *eventLoop, int setsize)",
        "start_line": 52,
        "end_line": 56
      },
      {
        "method_name": "aeApiFree",
        "params": "(aeEventLoop *eventLoop)",
        "start_line": 58,
        "end_line": 60
      },
      {
        "method_name": "aeApiAddEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 62,
        "end_line": 68
      },
      {
        "method_name": "aeApiDelEvent",
        "params": "(aeEventLoop *eventLoop, int fd, int mask)",
        "start_line": 70,
        "end_line": 75
      },
      {
        "method_name": "aeApiPoll",
        "params": "(aeEventLoop *eventLoop, struct timeval *tvp)",
        "start_line": 77,
        "end_line": 102
      },
      {
        "method_name": "*aeApiName",
        "params": "(void)",
        "start_line": 104,
        "end_line": 106
      }
    ],
    "structs": [
      {
        "struct_name": "aeApiState",
        "start_line": 35,
        "end_line": 40
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/anet.c",
    "line": 672,
    "headers": [
      "fmacros.h",
      "sys/types.h",
      "sys/socket.h",
      "sys/stat.h",
      "sys/un.h",
      "sys/time.h",
      "netinet/in.h",
      "netinet/tcp.h",
      "arpa/inet.h",
      "unistd.h",
      "fcntl.h",
      "string.h",
      "netdb.h",
      "errno.h",
      "stdarg.h",
      "stdio.h",
      "anet.h"
    ],
    "methods": [
      {
        "method_name": "anetSetError",
        "params": "(char *err, const char *fmt, ...)",
        "start_line": 52,
        "end_line": 59
      },
      {
        "method_name": "anetSetBlock",
        "params": "(char *err, int fd, int non_block)",
        "start_line": 61,
        "end_line": 82
      },
      {
        "method_name": "anetNonBlock",
        "params": "(char *err, int fd)",
        "start_line": 84,
        "end_line": 86
      },
      {
        "method_name": "anetBlock",
        "params": "(char *err, int fd)",
        "start_line": 88,
        "end_line": 90
      },
      {
        "method_name": "anetKeepAlive",
        "params": "(char *err, int fd, int interval)",
        "start_line": 96,
        "end_line": 139
      },
      {
        "method_name": "anetSetTcpNoDelay",
        "params": "(char *err, int fd, int val)",
        "start_line": 142,
        "end_line": 149
      },
      {
        "method_name": "anetEnableTcpNoDelay",
        "params": "(char *err, int fd)",
        "start_line": 152,
        "end_line": 154
      },
      {
        "method_name": "anetDisableTcpNoDelay",
        "params": "(char *err, int fd)",
        "start_line": 157,
        "end_line": 159
      },
      {
        "method_name": "anetSetSendBuffer",
        "params": "(char *err, int fd, int buffsize)",
        "start_line": 163,
        "end_line": 170
      },
      {
        "method_name": "anetTcpKeepAlive",
        "params": "(char *err, int fd)",
        "start_line": 173,
        "end_line": 180
      },
      {
        "method_name": "anetSendTimeout",
        "params": "(char *err, int fd, long long ms)",
        "start_line": 184,
        "end_line": 194
      },
      {
        "method_name": "anetRecvTimeout",
        "params": "(char *err, int fd, long long ms)",
        "start_line": 198,
        "end_line": 208
      },
      {
        "method_name": "anetGenericResolve",
        "params": "(char *err, char *host, char *ipbuf, size_t ipbuf_len,\n                       int flags)",
        "start_line": 219,
        "end_line": 242
      },
      {
        "method_name": "anetResolve",
        "params": "(char *err, char *host, char *ipbuf, size_t ipbuf_len)",
        "start_line": 244,
        "end_line": 246
      },
      {
        "method_name": "anetResolveIP",
        "params": "(char *err, char *host, char *ipbuf, size_t ipbuf_len)",
        "start_line": 248,
        "end_line": 250
      },
      {
        "method_name": "anetSetReuseAddr",
        "params": "(char *err, int fd)",
        "start_line": 252,
        "end_line": 261
      },
      {
        "method_name": "anetCreateSocket",
        "params": "(char *err, int domain)",
        "start_line": 263,
        "end_line": 277
      },
      {
        "method_name": "anetTcpGenericConnect",
        "params": "(char *err, const char *addr, int port,\n                                 const char *source_addr, int flags)",
        "start_line": 284,
        "end_line": 360
      },
      {
        "method_name": "anetTcpConnect",
        "params": "(char *err, const char *addr, int port)",
        "start_line": 363,
        "end_line": 365
      },
      {
        "method_name": "anetTcpNonBlockConnect",
        "params": "(char *err, const char *addr, int port)",
        "start_line": 368,
        "end_line": 370
      },
      {
        "method_name": "anetTcpNonBlockBindConnect",
        "params": "(char *err, const char *addr, int port,\n                               const char *source_addr)",
        "start_line": 374,
        "end_line": 377
      },
      {
        "method_name": "anetTcpNonBlockBestEffortBindConnect",
        "params": "(char *err, const char *addr, int port,\n                                         const char *source_addr)",
        "start_line": 381,
        "end_line": 384
      },
      {
        "method_name": "anetUnixGenericConnect",
        "params": "(char *err, const char *path, int flags)",
        "start_line": 387,
        "end_line": 412
      },
      {
        "method_name": "anetUnixConnect",
        "params": "(char *err, const char *path)",
        "start_line": 415,
        "end_line": 417
      },
      {
        "method_name": "anetUnixNonBlockConnect",
        "params": "(char *err, const char *path)",
        "start_line": 420,
        "end_line": 422
      },
      {
        "method_name": "anetRead",
        "params": "(int fd, char *buf, int count)",
        "start_line": 427,
        "end_line": 437
      },
      {
        "method_name": "anetWrite",
        "params": "(int fd, char *buf, int count)",
        "start_line": 442,
        "end_line": 452
      },
      {
        "method_name": "anetListen",
        "params": "(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog)",
        "start_line": 454,
        "end_line": 467
      },
      {
        "method_name": "anetV6Only",
        "params": "(char *err, int s)",
        "start_line": 469,
        "end_line": 477
      },
      {
        "method_name": "_anetTcpServer",
        "params": "(char *err, int port, char *bindaddr, int af, int backlog)",
        "start_line": 480,
        "end_line": 515
      },
      {
        "method_name": "anetTcpServer",
        "params": "(char *err, int port, char *bindaddr, int backlog)",
        "start_line": 518,
        "end_line": 520
      },
      {
        "method_name": "anetTcp6Server",
        "params": "(char *err, int port, char *bindaddr, int backlog)",
        "start_line": 523,
        "end_line": 525
      },
      {
        "method_name": "anetUnixServer",
        "params": "(char *err, char *path, mode_t perm, int backlog)",
        "start_line": 528,
        "end_line": 543
      },
      {
        "method_name": "anetGenericAccept",
        "params": "(char *err, int s, struct sockaddr *sa, socklen_t *len)",
        "start_line": 545,
        "end_line": 560
      },
      {
        "method_name": "anetTcpAccept",
        "params": "(char *err, int s, char *ip, size_t ip_len, int *port)",
        "start_line": 562,
        "end_line": 579
      },
      {
        "method_name": "anetUnixAccept",
        "params": "(char *err, int s)",
        "start_line": 581,
        "end_line": 589
      },
      {
        "method_name": "anetPeerToString",
        "params": "(int fd, char *ip, size_t ip_len, int *port)",
        "start_line": 591,
        "end_line": 625
      },
      {
        "method_name": "anetFormatAddr",
        "params": "(char *buf, size_t buf_len, char *ip, int port)",
        "start_line": 630,
        "end_line": 633
      },
      {
        "method_name": "anetFormatPeer",
        "params": "(int fd, char *buf, size_t buf_len)",
        "start_line": 636,
        "end_line": 642
      },
      {
        "method_name": "anetSockName",
        "params": "(int fd, char *ip, size_t ip_len, int *port)",
        "start_line": 644,
        "end_line": 664
      },
      {
        "method_name": "anetFormatSock",
        "params": "(int fd, char *fmt, size_t fmt_len)",
        "start_line": 666,
        "end_line": 672
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/anet.h",
    "line": 81,
    "headers": [
      "sys/types.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/aof.c",
    "line": 1832,
    "headers": [
      "server.h",
      "bio.h",
      "rio.h",
      "signal.h",
      "fcntl.h",
      "sys/stat.h",
      "sys/types.h",
      "sys/time.h",
      "sys/resource.h",
      "sys/wait.h",
      "sys/param.h"
    ],
    "methods": [
      {
        "method_name": "aofRewriteBufferReset",
        "params": "(void)",
        "start_line": 70,
        "end_line": 76
      },
      {
        "method_name": "aofRewriteBufferSize",
        "params": "(void)",
        "start_line": 79,
        "end_line": 90
      },
      {
        "method_name": "aofChildWriteDiffData",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 95,
        "end_line": 122
      },
      {
        "method_name": "aofRewriteBufferAppend",
        "params": "(unsigned char *s, unsigned long len)",
        "start_line": 125,
        "end_line": 169
      },
      {
        "method_name": "aofRewriteBufferWrite",
        "params": "(int fd)",
        "start_line": 174,
        "end_line": 194
      },
      {
        "method_name": "aofFsyncInProgress",
        "params": "(void)",
        "start_line": 202,
        "end_line": 204
      },
      {
        "method_name": "aof_background_fsync",
        "params": "(int fd)",
        "start_line": 208,
        "end_line": 210
      },
      {
        "method_name": "killAppendOnlyChild",
        "params": "(void)",
        "start_line": 213,
        "end_line": 232
      },
      {
        "method_name": "stopAppendOnly",
        "params": "(void)",
        "start_line": 236,
        "end_line": 247
      },
      {
        "method_name": "startAppendOnly",
        "params": "(void)",
        "start_line": 251,
        "end_line": 291
      },
      {
        "method_name": "aofWrite",
        "params": "(int fd, const char *buf, size_t len)",
        "start_line": 300,
        "end_line": 317
      },
      {
        "method_name": "flushAppendOnlyFile",
        "params": "(int force)",
        "start_line": 338,
        "end_line": 520
      },
      {
        "method_name": "catAppendOnlyGenericCommand",
        "params": "(sds dst, int argc, robj **argv)",
        "start_line": 522,
        "end_line": 545
      },
      {
        "method_name": "catAppendOnlyExpireAtCommand",
        "params": "(sds buf, struct redisCommand *cmd, robj *key, robj *seconds)",
        "start_line": 554,
        "end_line": 582
      },
      {
        "method_name": "feedAppendOnlyFile",
        "params": "(struct redisCommand *cmd, int dictid, robj **argv, int argc)",
        "start_line": 584,
        "end_line": 653
      },
      {
        "method_name": "*createAOFClient",
        "params": "(void)",
        "start_line": 661,
        "end_line": 689
      },
      {
        "method_name": "freeFakeClientArgv",
        "params": "(struct client *c)",
        "start_line": 691,
        "end_line": 697
      },
      {
        "method_name": "freeFakeClient",
        "params": "(struct client *c)",
        "start_line": 699,
        "end_line": 705
      },
      {
        "method_name": "loadAppendOnlyFile",
        "params": "(char *filename)",
        "start_line": 710,
        "end_line": 928
      },
      {
        "method_name": "rioWriteBulkObject",
        "params": "(rio *r, robj *obj)",
        "start_line": 936,
        "end_line": 946
      },
      {
        "method_name": "rewriteListObject",
        "params": "(rio *r, robj *key, robj *o)",
        "start_line": 950,
        "end_line": 980
      },
      {
        "method_name": "rewriteSetObject",
        "params": "(rio *r, robj *key, robj *o)",
        "start_line": 984,
        "end_line": 1027
      },
      {
        "method_name": "rewriteSortedSetObject",
        "params": "(rio *r, robj *key, robj *o)",
        "start_line": 1031,
        "end_line": 1096
      },
      {
        "method_name": "rioWriteHashIteratorCursor",
        "params": "(rio *r, hashTypeIterator *hi, int what)",
        "start_line": 1104,
        "end_line": 1122
      },
      {
        "method_name": "rewriteHashObject",
        "params": "(rio *r, robj *key, robj *o)",
        "start_line": 1126,
        "end_line": 1150
      },
      {
        "method_name": "rioWriteBulkStreamID",
        "params": "(rio *r,streamID *id)",
        "start_line": 1154,
        "end_line": 1161
      },
      {
        "method_name": "rioWriteStreamPendingEntry",
        "params": "(rio *r, robj *key, const char *groupname, size_t groupname_len, streamConsumer *consumer, unsigned char *rawid, streamNACK *nack)",
        "start_line": 1167,
        "end_line": 1186
      },
      {
        "method_name": "rewriteStreamObject",
        "params": "(rio *r, robj *key, robj *o)",
        "start_line": 1190,
        "end_line": 1285
      },
      {
        "method_name": "rewriteModuleObject",
        "params": "(rio *r, robj *key, robj *o)",
        "start_line": 1290,
        "end_line": 1301
      },
      {
        "method_name": "aofReadDiffFromParent",
        "params": "(void)",
        "start_line": 1306,
        "end_line": 1316
      },
      {
        "method_name": "rewriteAppendOnlyFileRio",
        "params": "(rio *aof)",
        "start_line": 1318,
        "end_line": 1391
      },
      {
        "method_name": "rewriteAppendOnlyFile",
        "params": "(char *filename)",
        "start_line": 1400,
        "end_line": 1501
      },
      {
        "method_name": "aofChildPipeReadable",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 1510,
        "end_line": 1531
      },
      {
        "method_name": "aofCreatePipes",
        "params": "(void)",
        "start_line": 1538,
        "end_line": 1564
      },
      {
        "method_name": "aofClosePipes",
        "params": "(void)",
        "start_line": 1566,
        "end_line": 1575
      },
      {
        "method_name": "rewriteAppendOnlyFileBackground",
        "params": "(void)",
        "start_line": 1593,
        "end_line": 1636
      },
      {
        "method_name": "bgrewriteaofCommand",
        "params": "(client *c)",
        "start_line": 1638,
        "end_line": 1650
      },
      {
        "method_name": "aofRemoveTempFile",
        "params": "(pid_t childpid)",
        "start_line": 1652,
        "end_line": 1660
      },
      {
        "method_name": "aofUpdateCurrentSize",
        "params": "(void)",
        "start_line": 1666,
        "end_line": 1679
      },
      {
        "method_name": "backgroundRewriteDoneHandler",
        "params": "(int exitcode, int bysignal)",
        "start_line": 1683,
        "end_line": 1832
      }
    ],
    "structs": [
      {
        "struct_name": "aofrwblock",
        "start_line": 62,
        "end_line": 65
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/asciilogo.h",
    "line": 47,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/atomicvar.h",
    "line": 133,
    "headers": [
      "pthread.h"
    ],
    "methods": [
      {
        "method_name": "atomicGetIncr",
        "params": "(var,oldvalue_var,count)",
        "start_line": 75,
        "end_line": 77
      },
      {
        "method_name": "atomicGet",
        "params": "(var,dstvar)",
        "start_line": 79,
        "end_line": 81
      },
      {
        "method_name": "atomicGetIncr",
        "params": "(var,oldvalue_var,count)",
        "start_line": 89,
        "end_line": 91
      },
      {
        "method_name": "atomicGet",
        "params": "(var,dstvar)",
        "start_line": 93,
        "end_line": 95
      },
      {
        "method_name": "atomicSet",
        "params": "(var,value)",
        "start_line": 96,
        "end_line": 98
      },
      {
        "method_name": "atomicIncr",
        "params": "(var,count)",
        "start_line": 104,
        "end_line": 108
      },
      {
        "method_name": "atomicGetIncr",
        "params": "(var,oldvalue_var,count)",
        "start_line": 109,
        "end_line": 114
      },
      {
        "method_name": "atomicDecr",
        "params": "(var,count)",
        "start_line": 115,
        "end_line": 119
      },
      {
        "method_name": "atomicGet",
        "params": "(var,dstvar)",
        "start_line": 120,
        "end_line": 124
      },
      {
        "method_name": "atomicSet",
        "params": "(var,value)",
        "start_line": 125,
        "end_line": 129
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/bio.c",
    "line": 282,
    "headers": [
      "server.h",
      "bio.h"
    ],
    "methods": [
      {
        "method_name": "bioInit",
        "params": "(void)",
        "start_line": 96,
        "end_line": 129
      },
      {
        "method_name": "bioCreateBackgroundJob",
        "params": "(int type, void *arg1, void *arg2, void *arg3)",
        "start_line": 131,
        "end_line": 143
      },
      {
        "method_name": "*bioProcessBackgroundJobs",
        "params": "(void *arg)",
        "start_line": 145,
        "end_line": 230
      },
      {
        "method_name": "bioPendingJobsOfType",
        "params": "(int type)",
        "start_line": 233,
        "end_line": 239
      },
      {
        "method_name": "bioWaitStepOfType",
        "params": "(int type)",
        "start_line": 251,
        "end_line": 261
      },
      {
        "method_name": "bioKillThreads",
        "params": "(void)",
        "start_line": 267,
        "end_line": 282
      }
    ],
    "structs": [
      {
        "struct_name": "bio_job",
        "start_line": 79,
        "end_line": 84
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/bio.h",
    "line": 47,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/bitops.c",
    "line": 1153,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "redisPopcount",
        "params": "(void *s, long count)",
        "start_line": 40,
        "end_line": 92
      },
      {
        "method_name": "redisBitpos",
        "params": "(void *s, unsigned long count, int bit)",
        "start_line": 101,
        "end_line": 186
      },
      {
        "method_name": "setUnsignedBitfield",
        "params": "(unsigned char *p, uint64_t offset, uint64_t bits, uint64_t value)",
        "start_line": 209,
        "end_line": 222
      },
      {
        "method_name": "setSignedBitfield",
        "params": "(unsigned char *p, uint64_t offset, uint64_t bits, int64_t value)",
        "start_line": 224,
        "end_line": 227
      },
      {
        "method_name": "getUnsignedBitfield",
        "params": "(unsigned char *p, uint64_t offset, uint64_t bits)",
        "start_line": 229,
        "end_line": 241
      },
      {
        "method_name": "getSignedBitfield",
        "params": "(unsigned char *p, uint64_t offset, uint64_t bits)",
        "start_line": 243,
        "end_line": 263
      },
      {
        "method_name": "checkUnsignedBitfieldOverflow",
        "params": "(uint64_t value, int64_t incr, uint64_t bits, int owtype, uint64_t *limit)",
        "start_line": 288,
        "end_line": 323
      },
      {
        "method_name": "checkSignedBitfieldOverflow",
        "params": "(int64_t value, int64_t incr, uint64_t bits, int owtype, int64_t *limit)",
        "start_line": 325,
        "end_line": 377
      },
      {
        "method_name": "printBits",
        "params": "(unsigned char *p, unsigned long count)",
        "start_line": 381,
        "end_line": 391
      },
      {
        "method_name": "getBitOffsetFromArgument",
        "params": "(client *c, robj *o, size_t *offset, int hash, int bits)",
        "start_line": 413,
        "end_line": 440
      },
      {
        "method_name": "getBitfieldTypeFromArgument",
        "params": "(client *c, robj *o, int *sign, int *bits)",
        "start_line": 449,
        "end_line": 473
      },
      {
        "method_name": "*lookupStringForBitCommand",
        "params": "(client *c, size_t maxbit)",
        "start_line": 480,
        "end_line": 493
      },
      {
        "method_name": "*getObjectReadOnlyString",
        "params": "(robj *o, long *len, char *llbuf)",
        "start_line": 508,
        "end_line": 524
      },
      {
        "method_name": "setbitCommand",
        "params": "(client *c)",
        "start_line": 527,
        "end_line": 563
      },
      {
        "method_name": "getbitCommand",
        "params": "(client *c)",
        "start_line": 566,
        "end_line": 590
      },
      {
        "method_name": "bitopCommand",
        "params": "(client *c)",
        "start_line": 593,
        "end_line": 768
      },
      {
        "method_name": "bitcountCommand",
        "params": "(client *c)",
        "start_line": 771,
        "end_line": 817
      },
      {
        "method_name": "bitposCommand",
        "params": "(client *c)",
        "start_line": 820,
        "end_line": 895
      },
      {
        "method_name": "bitfieldGeneric",
        "params": "(client *c, int flags)",
        "start_line": 922,
        "end_line": 1145
      },
      {
        "method_name": "bitfieldCommand",
        "params": "(client *c)",
        "start_line": 1147,
        "end_line": 1149
      },
      {
        "method_name": "bitfieldroCommand",
        "params": "(client *c)",
        "start_line": 1151,
        "end_line": 1153
      }
    ],
    "structs": [
      {
        "struct_name": "bitfieldOp",
        "start_line": 910,
        "end_line": 917
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/blocked.c",
    "line": 667,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "blockClient",
        "params": "(client *c, int btype)",
        "start_line": 85,
        "end_line": 91
      },
      {
        "method_name": "processUnblockedClients",
        "params": "(void)",
        "start_line": 96,
        "end_line": 117
      },
      {
        "method_name": "queueClientForReprocessing",
        "params": "(client *c)",
        "start_line": 135,
        "end_line": 142
      },
      {
        "method_name": "unblockClient",
        "params": "(client *c)",
        "start_line": 146,
        "end_line": 167
      },
      {
        "method_name": "replyToBlockedClientTimedOut",
        "params": "(client *c)",
        "start_line": 172,
        "end_line": 184
      },
      {
        "method_name": "disconnectAllBlockedClients",
        "params": "(void)",
        "start_line": 193,
        "end_line": 209
      },
      {
        "method_name": "serveClientsBlockedOnListKey",
        "params": "(robj *o, readyList *rl)",
        "start_line": 214,
        "end_line": 269
      },
      {
        "method_name": "serveClientsBlockedOnSortedSetKey",
        "params": "(robj *o, readyList *rl)",
        "start_line": 274,
        "end_line": 315
      },
      {
        "method_name": "serveClientsBlockedOnStreamKey",
        "params": "(robj *o, readyList *rl)",
        "start_line": 320,
        "end_line": 409
      },
      {
        "method_name": "serveClientsBlockedOnKeyByModule",
        "params": "(readyList *rl)",
        "start_line": 417,
        "end_line": 451
      },
      {
        "method_name": "handleClientsBlockedOnKeys",
        "params": "(void)",
        "start_line": 474,
        "end_line": 527
      },
      {
        "method_name": "blockForKeys",
        "params": "(client *c, int btype, robj **keys, int numkeys, mstime_t timeout, robj *target, streamID *ids)",
        "start_line": 556,
        "end_line": 597
      },
      {
        "method_name": "unblockClientWaitingData",
        "params": "(client *c)",
        "start_line": 601,
        "end_line": 635
      },
      {
        "method_name": "signalKeyAsReady",
        "params": "(redisDb *db, robj *key)",
        "start_line": 644,
        "end_line": 665
      }
    ],
    "structs": [
      {
        "struct_name": "bkinfo",
        "start_line": 77,
        "end_line": 80
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/childinfo.c",
    "line": 87,
    "headers": [
      "server.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "openChildInfoPipe",
        "params": "(void)",
        "start_line": 36,
        "end_line": 46
      },
      {
        "method_name": "closeChildInfoPipe",
        "params": "(void)",
        "start_line": 49,
        "end_line": 58
      },
      {
        "method_name": "sendChildInfo",
        "params": "(int ptype)",
        "start_line": 62,
        "end_line": 70
      },
      {
        "method_name": "receiveChildInfo",
        "params": "(void)",
        "start_line": 73,
        "end_line": 87
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/cluster.c",
    "line": 5834,
    "headers": [
      "server.h",
      "cluster.h",
      "endianconv.h",
      "sys/types.h",
      "sys/socket.h",
      "arpa/inet.h",
      "fcntl.h",
      "unistd.h",
      "sys/stat.h",
      "sys/file.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "clusterLoadConfig",
        "params": "(char *filename)",
        "start_line": 90,
        "end_line": 312
      },
      {
        "method_name": "clusterSaveConfig",
        "params": "(int do_fsync)",
        "start_line": 326,
        "end_line": 371
      },
      {
        "method_name": "clusterSaveConfigOrDie",
        "params": "(int do_fsync)",
        "start_line": 373,
        "end_line": 378
      },
      {
        "method_name": "clusterLockConfig",
        "params": "(char *filename)",
        "start_line": 389,
        "end_line": 425
      },
      {
        "method_name": "clusterUpdateMyselfFlags",
        "params": "(void)",
        "start_line": 431,
        "end_line": 441
      },
      {
        "method_name": "clusterInit",
        "params": "(void)",
        "start_line": 443,
        "end_line": 534
      },
      {
        "method_name": "clusterReset",
        "params": "(int hard)",
        "start_line": 545,
        "end_line": 597
      },
      {
        "method_name": "*createClusterLink",
        "params": "(clusterNode *node)",
        "start_line": 603,
        "end_line": 611
      },
      {
        "method_name": "freeClusterLink",
        "params": "(clusterLink *link)",
        "start_line": 616,
        "end_line": 626
      },
      {
        "method_name": "clusterConnAcceptHandler",
        "params": "(connection *conn)",
        "start_line": 628,
        "end_line": 649
      },
      {
        "method_name": "clusterAcceptHandler",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 652,
        "end_line": 692
      },
      {
        "method_name": "getClusterConnectionsCount",
        "params": "(void)",
        "start_line": 696,
        "end_line": 702
      },
      {
        "method_name": "keyHashSlot",
        "params": "(char *key, int keylen)",
        "start_line": 714,
        "end_line": 733
      },
      {
        "method_name": "*createClusterNode",
        "params": "(char *nodename, int flags)",
        "start_line": 746,
        "end_line": 775
      },
      {
        "method_name": "clusterNodeAddFailureReport",
        "params": "(clusterNode *failing, clusterNode *sender)",
        "start_line": 787,
        "end_line": 810
      },
      {
        "method_name": "clusterNodeCleanupFailureReports",
        "params": "(clusterNode *node)",
        "start_line": 817,
        "end_line": 831
      },
      {
        "method_name": "clusterNodeDelFailureReport",
        "params": "(clusterNode *node, clusterNode *sender)",
        "start_line": 844,
        "end_line": 862
      },
      {
        "method_name": "clusterNodeFailureReportsCount",
        "params": "(clusterNode *node)",
        "start_line": 867,
        "end_line": 870
      },
      {
        "method_name": "clusterNodeRemoveSlave",
        "params": "(clusterNode *master, clusterNode *slave)",
        "start_line": 872,
        "end_line": 889
      },
      {
        "method_name": "clusterNodeAddSlave",
        "params": "(clusterNode *master, clusterNode *slave)",
        "start_line": 891,
        "end_line": 903
      },
      {
        "method_name": "clusterCountNonFailingSlaves",
        "params": "(clusterNode *n)",
        "start_line": 905,
        "end_line": 911
      },
      {
        "method_name": "freeClusterNode",
        "params": "(clusterNode *n)",
        "start_line": 914,
        "end_line": 936
      },
      {
        "method_name": "clusterAddNode",
        "params": "(clusterNode *node)",
        "start_line": 939,
        "end_line": 945
      },
      {
        "method_name": "clusterDelNode",
        "params": "(clusterNode *delnode)",
        "start_line": 958,
        "end_line": 985
      },
      {
        "method_name": "*clusterLookupNode",
        "params": "(const char *name)",
        "start_line": 988,
        "end_line": 996
      },
      {
        "method_name": "clusterRenameNode",
        "params": "(clusterNode *node, char *newname)",
        "start_line": 1002,
        "end_line": 1013
      },
      {
        "method_name": "clusterGetMaxEpoch",
        "params": "(void)",
        "start_line": 1021,
        "end_line": 1034
      },
      {
        "method_name": "clusterBumpConfigEpochWithoutConsensus",
        "params": "(void)",
        "start_line": 1065,
        "end_line": 1082
      },
      {
        "method_name": "clusterHandleConfigEpochCollision",
        "params": "(clusterNode *sender)",
        "start_line": 1130,
        "end_line": 1145
      },
      {
        "method_name": "clusterBlacklistCleanup",
        "params": "(void)",
        "start_line": 1178,
        "end_line": 1190
      },
      {
        "method_name": "clusterBlacklistAddNode",
        "params": "(clusterNode *node)",
        "start_line": 1193,
        "end_line": 1206
      },
      {
        "method_name": "clusterBlacklistExists",
        "params": "(char *nodeid)",
        "start_line": 1211,
        "end_line": 1219
      },
      {
        "method_name": "markNodeAsFailingIfNeeded",
        "params": "(clusterNode *node)",
        "start_line": 1246,
        "end_line": 1273
      },
      {
        "method_name": "clearNodeFailureIfNeeded",
        "params": "(clusterNode *node)",
        "start_line": 1278,
        "end_line": 1308
      },
      {
        "method_name": "clusterHandshakeInProgress",
        "params": "(char *ip, int port, int cport)",
        "start_line": 1313,
        "end_line": 1328
      },
      {
        "method_name": "clusterStartHandshake",
        "params": "(char *ip, int port, int cport)",
        "start_line": 1337,
        "end_line": 1388
      },
      {
        "method_name": "clusterProcessGossipSection",
        "params": "(clusterMsg *hdr, clusterLink *link)",
        "start_line": 1394,
        "end_line": 1503
      },
      {
        "method_name": "nodeIp2String",
        "params": "(char *buf, clusterLink *link, char *announced_ip)",
        "start_line": 1508,
        "end_line": 1515
      },
      {
        "method_name": "nodeUpdateAddressIfNeeded",
        "params": "(clusterNode *node, clusterLink *link,\n                              clusterMsg *hdr)",
        "start_line": 1531,
        "end_line": 1562
      },
      {
        "method_name": "clusterSetNodeAsMaster",
        "params": "(clusterNode *n)",
        "start_line": 1567,
        "end_line": 1581
      },
      {
        "method_name": "clusterUpdateSlotsConfigWith",
        "params": "(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char *slots)",
        "start_line": 1594,
        "end_line": 1688
      },
      {
        "method_name": "clusterProcessPacket",
        "params": "(clusterLink *link)",
        "start_line": 1699,
        "end_line": 2179
      },
      {
        "method_name": "handleLinkIOError",
        "params": "(clusterLink *link)",
        "start_line": 2187,
        "end_line": 2189
      },
      {
        "method_name": "clusterWriteHandler",
        "params": "(connection *conn)",
        "start_line": 2194,
        "end_line": 2208
      },
      {
        "method_name": "clusterLinkConnectHandler",
        "params": "(connection *conn)",
        "start_line": 2213,
        "end_line": 2253
      },
      {
        "method_name": "clusterReadHandler",
        "params": "(connection *conn)",
        "start_line": 2258,
        "end_line": 2317
      },
      {
        "method_name": "clusterSendMessage",
        "params": "(clusterLink *link, unsigned char *msg, size_t msglen)",
        "start_line": 2324,
        "end_line": 2335
      },
      {
        "method_name": "clusterBroadcastMessage",
        "params": "(void *buf, size_t len)",
        "start_line": 2343,
        "end_line": 2357
      },
      {
        "method_name": "clusterBuildMessageHdr",
        "params": "(clusterMsg *hdr, int type)",
        "start_line": 2361,
        "end_line": 2434
      },
      {
        "method_name": "clusterNodeIsInGossipSection",
        "params": "(clusterMsg *hdr, int count, clusterNode *n)",
        "start_line": 2439,
        "end_line": 2446
      },
      {
        "method_name": "clusterSetGossipEntry",
        "params": "(clusterMsg *hdr, int i, clusterNode *n)",
        "start_line": 2450,
        "end_line": 2461
      },
      {
        "method_name": "clusterSendPing",
        "params": "(clusterLink *link, int type)",
        "start_line": 2465,
        "end_line": 2591
      },
      {
        "method_name": "clusterBroadcastPong",
        "params": "(int target)",
        "start_line": 2609,
        "end_line": 2628
      },
      {
        "method_name": "clusterSendPublish",
        "params": "(clusterLink *link, robj *channel, robj *message)",
        "start_line": 2633,
        "end_line": 2673
      },
      {
        "method_name": "clusterSendFail",
        "params": "(char *nodename)",
        "start_line": 2680,
        "end_line": 2687
      },
      {
        "method_name": "clusterSendUpdate",
        "params": "(clusterLink *link, clusterNode *node)",
        "start_line": 2692,
        "end_line": 2702
      },
      {
        "method_name": "clusterSendModule",
        "params": "(clusterLink *link, uint64_t module_id, uint8_t type,\n                       unsigned char *payload, uint32_t len)",
        "start_line": 2708,
        "end_line": 2739
      },
      {
        "method_name": "clusterSendModuleMessageToTarget",
        "params": "(const char *target, uint64_t module_id, uint8_t type, unsigned char *payload, uint32_t len)",
        "start_line": 2747,
        "end_line": 2758
      },
      {
        "method_name": "clusterPropagatePublish",
        "params": "(robj *channel, robj *message)",
        "start_line": 2767,
        "end_line": 2769
      },
      {
        "method_name": "clusterRequestFailoverAuth",
        "params": "(void)",
        "start_line": 2781,
        "end_line": 2794
      },
      {
        "method_name": "clusterSendFailoverAuth",
        "params": "(clusterNode *node)",
        "start_line": 2797,
        "end_line": 2807
      },
      {
        "method_name": "clusterSendMFStart",
        "params": "(clusterNode *node)",
        "start_line": 2810,
        "end_line": 2820
      },
      {
        "method_name": "clusterSendFailoverAuthIfNeeded",
        "params": "(clusterNode *node, clusterMsg *request)",
        "start_line": 2823,
        "end_line": 2924
      },
      {
        "method_name": "clusterGetSlaveRank",
        "params": "(void)",
        "start_line": 2938,
        "end_line": 2953
      },
      {
        "method_name": "clusterLogCantFailover",
        "params": "(int reason)",
        "start_line": 2977,
        "end_line": 3017
      },
      {
        "method_name": "clusterFailoverReplaceYourMaster",
        "params": "(void)",
        "start_line": 3025,
        "end_line": 3053
      },
      {
        "method_name": "clusterHandleSlaveFailover",
        "params": "(void)",
        "start_line": 3063,
        "end_line": 3232
      },
      {
        "method_name": "clusterHandleSlaveMigration",
        "params": "(int max_slaves)",
        "start_line": 3261,
        "end_line": 3344
      },
      {
        "method_name": "resetManualFailover",
        "params": "(void)",
        "start_line": 3380,
        "end_line": 3389
      },
      {
        "method_name": "manualFailoverCheckTimeout",
        "params": "(void)",
        "start_line": 3392,
        "end_line": 3397
      },
      {
        "method_name": "clusterHandleManualFailover",
        "params": "(void)",
        "start_line": 3401,
        "end_line": 3419
      },
      {
        "method_name": "clusterCron",
        "params": "(void)",
        "start_line": 3426,
        "end_line": 3685
      },
      {
        "method_name": "clusterBeforeSleep",
        "params": "(void)",
        "start_line": 3692,
        "end_line": 3712
      },
      {
        "method_name": "clusterDoBeforeSleep",
        "params": "(int flags)",
        "start_line": 3714,
        "end_line": 3716
      },
      {
        "method_name": "bitmapTestBit",
        "params": "(unsigned char *bitmap, int pos)",
        "start_line": 3724,
        "end_line": 3728
      },
      {
        "method_name": "bitmapSetBit",
        "params": "(unsigned char *bitmap, int pos)",
        "start_line": 3731,
        "end_line": 3735
      },
      {
        "method_name": "bitmapClearBit",
        "params": "(unsigned char *bitmap, int pos)",
        "start_line": 3738,
        "end_line": 3742
      },
      {
        "method_name": "clusterMastersHaveSlaves",
        "params": "(void)",
        "start_line": 3747,
        "end_line": 3759
      },
      {
        "method_name": "clusterNodeSetSlotBit",
        "params": "(clusterNode *n, int slot)",
        "start_line": 3762,
        "end_line": 3784
      },
      {
        "method_name": "clusterNodeClearSlotBit",
        "params": "(clusterNode *n, int slot)",
        "start_line": 3787,
        "end_line": 3792
      },
      {
        "method_name": "clusterNodeGetSlotBit",
        "params": "(clusterNode *n, int slot)",
        "start_line": 3795,
        "end_line": 3797
      },
      {
        "method_name": "clusterAddSlot",
        "params": "(clusterNode *n, int slot)",
        "start_line": 3803,
        "end_line": 3808
      },
      {
        "method_name": "clusterDelSlot",
        "params": "(int slot)",
        "start_line": 3813,
        "end_line": 3820
      },
      {
        "method_name": "clusterDelNodeSlots",
        "params": "(clusterNode *node)",
        "start_line": 3824,
        "end_line": 3834
      },
      {
        "method_name": "clusterCloseAllSlots",
        "params": "(void)",
        "start_line": 3838,
        "end_line": 3843
      },
      {
        "method_name": "clusterUpdateState",
        "params": "(void)",
        "start_line": 3857,
        "end_line": 3951
      },
      {
        "method_name": "verifyClusterConfigWithData",
        "params": "(void)",
        "start_line": 3975,
        "end_line": 4022
      },
      {
        "method_name": "clusterSetMaster",
        "params": "(clusterNode *n)",
        "start_line": 4030,
        "end_line": 4046
      },
      {
        "method_name": "representClusterNodeFlags",
        "params": "(sds ci, uint16_t flags)",
        "start_line": 4070,
        "end_line": 4081
      },
      {
        "method_name": "clusterGenNodeDescription",
        "params": "(clusterNode *node)",
        "start_line": 4087,
        "end_line": 4150
      },
      {
        "method_name": "clusterGenNodesDescription",
        "params": "(int filter)",
        "start_line": 4164,
        "end_line": 4181
      },
      {
        "method_name": "*clusterGetMessageTypeString",
        "params": "(int type)",
        "start_line": 4187,
        "end_line": 4201
      },
      {
        "method_name": "getSlotOrReply",
        "params": "(client *c, robj *o)",
        "start_line": 4203,
        "end_line": 4213
      },
      {
        "method_name": "clusterReplyMultiBulkSlots",
        "params": "(client *c)",
        "start_line": 4215,
        "end_line": 4290
      },
      {
        "method_name": "clusterCommand",
        "params": "(client *c)",
        "start_line": 4292,
        "end_line": 4868
      },
      {
        "method_name": "createDumpPayload",
        "params": "(rio *payload, robj *o, robj *key)",
        "start_line": 4876,
        "end_line": 4903
      },
      {
        "method_name": "verifyDumpPayload",
        "params": "(unsigned char *p, size_t len)",
        "start_line": 4909,
        "end_line": 4926
      },
      {
        "method_name": "dumpCommand",
        "params": "(client *c)",
        "start_line": 4931,
        "end_line": 4947
      },
      {
        "method_name": "restoreCommand",
        "params": "(client *c)",
        "start_line": 4950,
        "end_line": 5033
      },
      {
        "method_name": "migrateGetSocket",
        "params": "(client *c, robj *host, robj *port, long timeout)",
        "start_line": 5061,
        "end_line": 5107
      },
      {
        "method_name": "migrateCloseSocket",
        "params": "(robj *host, robj *port)",
        "start_line": 5110,
        "end_line": 5127
      },
      {
        "method_name": "migrateCloseTimedoutSockets",
        "params": "(void)",
        "start_line": 5129,
        "end_line": 5143
      },
      {
        "method_name": "migrateCommand",
        "params": "(client *c)",
        "start_line": 5152,
        "end_line": 5487
      },
      {
        "method_name": "askingCommand",
        "params": "(client *c)",
        "start_line": 5497,
        "end_line": 5504
      },
      {
        "method_name": "readonlyCommand",
        "params": "(client *c)",
        "start_line": 5509,
        "end_line": 5516
      },
      {
        "method_name": "readwriteCommand",
        "params": "(client *c)",
        "start_line": 5519,
        "end_line": 5522
      },
      {
        "method_name": "*getNodeByQuery",
        "params": "(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *error_code)",
        "start_line": 5556,
        "end_line": 5743
      },
      {
        "method_name": "clusterRedirectClient",
        "params": "(client *c, clusterNode *n, int hashslot, int error_code)",
        "start_line": 5752,
        "end_line": 5776
      },
      {
        "method_name": "clusterRedirectBlockedClientIfNeeded",
        "params": "(client *c)",
        "start_line": 5789,
        "end_line": 5834
      }
    ],
    "structs": [
      {
        "struct_name": "redisNodeFlags",
        "start_line": 4052,
        "end_line": 4055
      },
      {
        "struct_name": "migrateCachedSocket",
        "start_line": 5044,
        "end_line": 5048
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/cluster.h",
    "line": 288,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "clusterLink",
        "start_line": 37,
        "end_line": 43
      },
      {
        "struct_name": "clusterNodeFailReport",
        "start_line": 107,
        "end_line": 110
      },
      {
        "struct_name": "clusterNode",
        "start_line": 112,
        "end_line": 138
      },
      {
        "struct_name": "clusterState",
        "start_line": 140,
        "end_line": 178
      },
      {
        "struct_name": "",
        "start_line": 185,
        "end_line": 194
      },
      {
        "struct_name": "",
        "start_line": 196,
        "end_line": 198
      },
      {
        "struct_name": "",
        "start_line": 200,
        "end_line": 204
      },
      {
        "struct_name": "",
        "start_line": 206,
        "end_line": 210
      },
      {
        "struct_name": "",
        "start_line": 212,
        "end_line": 217
      },
      {
        "struct_name": "",
        "start_line": 221,
        "end_line": 224
      },
      {
        "struct_name": "",
        "start_line": 227,
        "end_line": 229
      },
      {
        "struct_name": "",
        "start_line": 232,
        "end_line": 234
      },
      {
        "struct_name": "",
        "start_line": 237,
        "end_line": 239
      },
      {
        "struct_name": "",
        "start_line": 242,
        "end_line": 244
      },
      {
        "struct_name": "",
        "start_line": 249,
        "end_line": 272
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/config.c",
    "line": 2281,
    "headers": [
      "server.h",
      "cluster.h",
      "fcntl.h",
      "sys/stat.h"
    ],
    "methods": [
      {
        "method_name": "configEnumGetValue",
        "params": "(configEnum *ce, char *name)",
        "start_line": 217,
        "end_line": 223
      },
      {
        "method_name": "*configEnumGetName",
        "params": "(configEnum *ce, int val)",
        "start_line": 226,
        "end_line": 232
      },
      {
        "method_name": "*configEnumGetNameOrUnknown",
        "params": "(configEnum *ce, int val)",
        "start_line": 236,
        "end_line": 239
      },
      {
        "method_name": "*evictPolicyToString",
        "params": "(void)",
        "start_line": 242,
        "end_line": 244
      },
      {
        "method_name": "yesnotoi",
        "params": "(char *s)",
        "start_line": 250,
        "end_line": 254
      },
      {
        "method_name": "appendServerSaveParams",
        "params": "(time_t seconds, int changes)",
        "start_line": 256,
        "end_line": 261
      },
      {
        "method_name": "resetServerSaveParams",
        "params": "(void)",
        "start_line": 263,
        "end_line": 267
      },
      {
        "method_name": "queueLoadModule",
        "params": "(sds path, sds *argv, int argc)",
        "start_line": 269,
        "end_line": 281
      },
      {
        "method_name": "initConfigValues",
        "params": "()",
        "start_line": 283,
        "end_line": 287
      },
      {
        "method_name": "loadServerConfigFromString",
        "params": "(char *config)",
        "start_line": 289,
        "end_line": 531
      },
      {
        "method_name": "loadServerConfig",
        "params": "(char *filename, char *options)",
        "start_line": 540,
        "end_line": 568
      },
      {
        "method_name": "(!strcasecmp",
        "params": "(c-\u003eargv[2]-\u003eptr,_name))",
        "start_line": 575,
        "end_line": 581
      },
      {
        "method_name": "(!strcasecmp",
        "params": "(c-\u003eargv[2]-\u003eptr,_name))",
        "start_line": 581,
        "end_line": 588
      },
      {
        "method_name": "(!strcasecmp",
        "params": "(c-\u003eargv[2]-\u003eptr,_name))",
        "start_line": 588,
        "end_line": 594
      },
      {
        "method_name": "(!strcasecmp",
        "params": "(c-\u003eargv[2]-\u003eptr,_name))",
        "start_line": 594,
        "end_line": 597
      },
      {
        "method_name": "!strcasecmp",
        "params": "(c-\u003eargv[2]-\u003eptr,_name2))",
        "start_line": 598,
        "end_line": 600
      },
      {
        "method_name": "configSetCommand",
        "params": "(client *c)",
        "start_line": 602,
        "end_line": 1887
      },
      {
        "method_name": "isValidActiveDefrag",
        "params": "(int val, char **err)",
        "start_line": 1946,
        "end_line": 1960
      },
      {
        "method_name": "isValidDBfilename",
        "params": "(char *val, char **err)",
        "start_line": 1962,
        "end_line": 1968
      },
      {
        "method_name": "isValidAOFfilename",
        "params": "(char *val, char **err)",
        "start_line": 1970,
        "end_line": 1976
      },
      {
        "method_name": "updateHZ",
        "params": "(long long val, long long prev, char **err)",
        "start_line": 1978,
        "end_line": 1988
      },
      {
        "method_name": "updateJemallocBgThread",
        "params": "(int val, int prev, char **err)",
        "start_line": 1990,
        "end_line": 1995
      },
      {
        "method_name": "updateReplBacklogSize",
        "params": "(long long val, long long prev, char **err)",
        "start_line": 1997,
        "end_line": 2004
      },
      {
        "method_name": "updateMaxmemory",
        "params": "(long long val, long long prev, char **err)",
        "start_line": 2006,
        "end_line": 2017
      },
      {
        "method_name": "updateGoodSlaves",
        "params": "(long long val, long long prev, char **err)",
        "start_line": 2019,
        "end_line": 2025
      },
      {
        "method_name": "updateAppendonly",
        "params": "(int val, int prev, char **err)",
        "start_line": 2027,
        "end_line": 2038
      },
      {
        "method_name": "updateMaxclients",
        "params": "(long long val, long long prev, char **err)",
        "start_line": 2040,
        "end_line": 2066
      },
      {
        "method_name": "updateTlsCfg",
        "params": "(char *val, char *prev, char **err)",
        "start_line": 2069,
        "end_line": 2078
      },
      {
        "method_name": "updateTlsCfgBool",
        "params": "(int val, int prev, char **err)",
        "start_line": 2079,
        "end_line": 2083
      },
      {
        "method_name": "configCommand",
        "params": "(client *c)",
        "start_line": 2241,
        "end_line": 2281
      }
    ],
    "structs": [
      {
        "struct_name": "configEnum",
        "start_line": 41,
        "end_line": 44
      },
      {
        "struct_name": "boolConfigData",
        "start_line": 122,
        "end_line": 127
      },
      {
        "struct_name": "stringConfigData",
        "start_line": 129,
        "end_line": 136
      },
      {
        "struct_name": "enumConfigData",
        "start_line": 138,
        "end_line": 144
      },
      {
        "struct_name": "numericConfigData",
        "start_line": 159,
        "end_line": 179
      },
      {
        "struct_name": "typeInterface",
        "start_line": 188,
        "end_line": 200
      },
      {
        "struct_name": "standardConfig",
        "start_line": 202,
        "end_line": 208
      }
    ],
    "enums": [
      {
        "enum_name": "numericType",
        "start_line": 146,
        "end_line": 157
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/config.h",
    "line": 256,
    "headers": [
      "AvailabilityMacros.h",
      "linux/version.h",
      "features.h",
      "sys/feature_tests.h",
      "sys/types.h",
      "pthread_np.h",
      "pthread.h",
      "pthread.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/connection.c",
    "line": 413,
    "headers": [
      "server.h",
      "connhelpers.h"
    ],
    "methods": [
      {
        "method_name": "*connCreateSocket",
        "params": "()",
        "start_line": 77,
        "end_line": 83
      },
      {
        "method_name": "*connCreateAcceptedSocket",
        "params": "(int fd)",
        "start_line": 91,
        "end_line": 96
      },
      {
        "method_name": "connSocketConnect",
        "params": "(connection *conn, const char *addr, int port, const char *src_addr,\n        ConnectionCallbackFunc connect_handler)",
        "start_line": 99,
        "end_line": 115
      },
      {
        "method_name": "connHasWriteHandler",
        "params": "(connection *conn)",
        "start_line": 118,
        "end_line": 120
      },
      {
        "method_name": "connHasReadHandler",
        "params": "(connection *conn)",
        "start_line": 123,
        "end_line": 125
      },
      {
        "method_name": "connSetPrivateData",
        "params": "(connection *conn, void *data)",
        "start_line": 128,
        "end_line": 130
      },
      {
        "method_name": "*connGetPrivateData",
        "params": "(connection *conn)",
        "start_line": 133,
        "end_line": 135
      },
      {
        "method_name": "connSocketClose",
        "params": "(connection *conn)",
        "start_line": 144,
        "end_line": 161
      },
      {
        "method_name": "connSocketWrite",
        "params": "(connection *conn, const void *data, size_t data_len)",
        "start_line": 163,
        "end_line": 171
      },
      {
        "method_name": "connSocketRead",
        "params": "(connection *conn, void *buf, size_t buf_len)",
        "start_line": 173,
        "end_line": 183
      },
      {
        "method_name": "connSocketAccept",
        "params": "(connection *conn, ConnectionCallbackFunc accept_handler)",
        "start_line": 185,
        "end_line": 196
      },
      {
        "method_name": "connSocketSetWriteHandler",
        "params": "(connection *conn, ConnectionCallbackFunc func, int barrier)",
        "start_line": 206,
        "end_line": 220
      },
      {
        "method_name": "connSocketSetReadHandler",
        "params": "(connection *conn, ConnectionCallbackFunc func)",
        "start_line": 225,
        "end_line": 235
      },
      {
        "method_name": "*connSocketGetLastError",
        "params": "(connection *conn)",
        "start_line": 237,
        "end_line": 239
      },
      {
        "method_name": "connSocketEventHandler",
        "params": "(struct aeEventLoop *el, int fd, void *clientData, int mask)",
        "start_line": 242,
        "end_line": 292
      },
      {
        "method_name": "connSocketBlockingConnect",
        "params": "(connection *conn, const char *addr, int port, long long timeout)",
        "start_line": 294,
        "end_line": 310
      },
      {
        "method_name": "connSocketSyncWrite",
        "params": "(connection *conn, char *ptr, ssize_t size, long long timeout)",
        "start_line": 316,
        "end_line": 318
      },
      {
        "method_name": "connSocketSyncRead",
        "params": "(connection *conn, char *ptr, ssize_t size, long long timeout)",
        "start_line": 320,
        "end_line": 322
      },
      {
        "method_name": "connSocketSyncReadLine",
        "params": "(connection *conn, char *ptr, ssize_t size, long long timeout)",
        "start_line": 324,
        "end_line": 326
      },
      {
        "method_name": "connGetSocketError",
        "params": "(connection *conn)",
        "start_line": 346,
        "end_line": 353
      },
      {
        "method_name": "connPeerToString",
        "params": "(connection *conn, char *ip, size_t ip_len, int *port)",
        "start_line": 355,
        "end_line": 357
      },
      {
        "method_name": "connFormatPeer",
        "params": "(connection *conn, char *buf, size_t buf_len)",
        "start_line": 359,
        "end_line": 361
      },
      {
        "method_name": "connSockName",
        "params": "(connection *conn, char *ip, size_t ip_len, int *port)",
        "start_line": 363,
        "end_line": 365
      },
      {
        "method_name": "connBlock",
        "params": "(connection *conn)",
        "start_line": 367,
        "end_line": 370
      },
      {
        "method_name": "connNonBlock",
        "params": "(connection *conn)",
        "start_line": 372,
        "end_line": 375
      },
      {
        "method_name": "connEnableTcpNoDelay",
        "params": "(connection *conn)",
        "start_line": 377,
        "end_line": 380
      },
      {
        "method_name": "connDisableTcpNoDelay",
        "params": "(connection *conn)",
        "start_line": 382,
        "end_line": 385
      },
      {
        "method_name": "connKeepAlive",
        "params": "(connection *conn, int interval)",
        "start_line": 387,
        "end_line": 390
      },
      {
        "method_name": "connSendTimeout",
        "params": "(connection *conn, long long ms)",
        "start_line": 392,
        "end_line": 394
      },
      {
        "method_name": "connRecvTimeout",
        "params": "(connection *conn, long long ms)",
        "start_line": 396,
        "end_line": 398
      },
      {
        "method_name": "connGetState",
        "params": "(connection *conn)",
        "start_line": 400,
        "end_line": 402
      },
      {
        "method_name": "*connGetInfo",
        "params": "(connection *conn, char *buf, size_t buf_len)",
        "start_line": 409,
        "end_line": 412
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/connection.h",
    "line": 227,
    "headers": [],
    "methods": [
      {
        "method_name": "connAccept",
        "params": "(connection *conn, ConnectionCallbackFunc accept_handler)",
        "start_line": 100,
        "end_line": 102
      },
      {
        "method_name": "connConnect",
        "params": "(connection *conn, const char *addr, int port, const char *src_addr,\n        ConnectionCallbackFunc connect_handler)",
        "start_line": 114,
        "end_line": 116
      },
      {
        "method_name": "connBlockingConnect",
        "params": "(connection *conn, const char *addr, int port, long long timeout)",
        "start_line": 124,
        "end_line": 126
      },
      {
        "method_name": "connWrite",
        "params": "(connection *conn, const void *data, size_t data_len)",
        "start_line": 135,
        "end_line": 137
      },
      {
        "method_name": "connRead",
        "params": "(connection *conn, void *buf, size_t buf_len)",
        "start_line": 147,
        "end_line": 149
      },
      {
        "method_name": "connSetWriteHandler",
        "params": "(connection *conn, ConnectionCallbackFunc func)",
        "start_line": 154,
        "end_line": 156
      },
      {
        "method_name": "connSetReadHandler",
        "params": "(connection *conn, ConnectionCallbackFunc func)",
        "start_line": 161,
        "end_line": 163
      },
      {
        "method_name": "connSetWriteHandlerWithBarrier",
        "params": "(connection *conn, ConnectionCallbackFunc func, int barrier)",
        "start_line": 170,
        "end_line": 172
      },
      {
        "method_name": "connClose",
        "params": "(connection *conn)",
        "start_line": 174,
        "end_line": 176
      },
      {
        "method_name": "*connGetLastError",
        "params": "(connection *conn)",
        "start_line": 181,
        "end_line": 183
      },
      {
        "method_name": "connSyncWrite",
        "params": "(connection *conn, char *ptr, ssize_t size, long long timeout)",
        "start_line": 185,
        "end_line": 187
      },
      {
        "method_name": "connSyncRead",
        "params": "(connection *conn, char *ptr, ssize_t size, long long timeout)",
        "start_line": 189,
        "end_line": 191
      },
      {
        "method_name": "connSyncReadLine",
        "params": "(connection *conn, char *ptr, ssize_t size, long long timeout)",
        "start_line": 193,
        "end_line": 195
      }
    ],
    "structs": [
      {
        "struct_name": "ConnectionType",
        "start_line": 53,
        "end_line": 67
      },
      {
        "struct_name": "connection",
        "start_line": 69,
        "end_line": 80
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 39,
        "end_line": 46
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/connhelpers.h",
    "line": 88,
    "headers": [
      "connection.h"
    ],
    "methods": [
      {
        "method_name": "connIncrRefs",
        "params": "(connection *conn)",
        "start_line": 52,
        "end_line": 54
      },
      {
        "method_name": "connDecrRefs",
        "params": "(connection *conn)",
        "start_line": 64,
        "end_line": 66
      },
      {
        "method_name": "connHasRefs",
        "params": "(connection *conn)",
        "start_line": 68,
        "end_line": 70
      },
      {
        "method_name": "callHandler",
        "params": "(connection *conn, ConnectionCallbackFunc handler)",
        "start_line": 77,
        "end_line": 86
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/crc16.c",
    "line": 88,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "crc16",
        "params": "(const char *buf, int len)",
        "start_line": 82,
        "end_line": 88
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/crc16_slottable.h",
    "line": 835,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/crc64.c",
    "line": 160,
    "headers": [
      "crc64.h",
      "crcspeed.h",
      "stdio.h"
    ],
    "methods": [
      {
        "method_name": "crc_reflect",
        "params": "(uint_fast64_t data, size_t data_len)",
        "start_line": 69,
        "end_line": 78
      },
      {
        "method_name": "_crc64",
        "params": "(uint_fast64_t crc, const void *in_data, const uint64_t len)",
        "start_line": 88,
        "end_line": 111
      },
      {
        "method_name": "crc64_init",
        "params": "(void)",
        "start_line": 116,
        "end_line": 118
      },
      {
        "method_name": "crc64",
        "params": "(uint64_t crc, const unsigned char *s, uint64_t l)",
        "start_line": 121,
        "end_line": 123
      },
      {
        "method_name": "crc64Test",
        "params": "(int argc, char *argv[])",
        "start_line": 130,
        "end_line": 151
      },
      {
        "method_name": "main",
        "params": "(int argc, char *argv[])",
        "start_line": 156,
        "end_line": 158
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/crc64.h",
    "line": 13,
    "headers": [
      "stdint.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/crcspeed.c",
    "line": 281,
    "headers": [
      "crcspeed.h"
    ],
    "methods": [
      {
        "method_name": "crcspeed64little_init",
        "params": "(crcfn64 crcfn, uint64_t table[8][256])",
        "start_line": 33,
        "end_line": 49
      },
      {
        "method_name": "crcspeed16little_init",
        "params": "(crcfn16 crcfn, uint16_t table[8][256])",
        "start_line": 51,
        "end_line": 67
      },
      {
        "method_name": "rev8",
        "params": "(uint64_t a)",
        "start_line": 70,
        "end_line": 82
      },
      {
        "method_name": "crcspeed64big_init",
        "params": "(crcfn64 fn, uint64_t big_table[8][256])",
        "start_line": 86,
        "end_line": 94
      },
      {
        "method_name": "crcspeed16big_init",
        "params": "(crcfn16 fn, uint16_t big_table[8][256])",
        "start_line": 96,
        "end_line": 104
      },
      {
        "method_name": "crcspeed64little",
        "params": "(uint64_t little_table[8][256], uint64_t crc,\n                          void *buf, size_t len)",
        "start_line": 112,
        "end_line": 143
      },
      {
        "method_name": "crcspeed16little",
        "params": "(uint16_t little_table[8][256], uint16_t crc,\n                          void *buf, size_t len)",
        "start_line": 146,
        "end_line": 177
      },
      {
        "method_name": "crcspeed64big",
        "params": "(uint64_t big_table[8][256], uint64_t crc, void *buf,\n                       size_t len)",
        "start_line": 183,
        "end_line": 212
      },
      {
        "method_name": "crcspeed16big",
        "params": "(uint16_t big_table[8][256], uint16_t crc_in, void *buf,\n                       size_t len)",
        "start_line": 216,
        "end_line": 246
      },
      {
        "method_name": "crcspeed64native",
        "params": "(uint64_t table[8][256], uint64_t crc, void *buf,\n                          size_t len)",
        "start_line": 253,
        "end_line": 258
      },
      {
        "method_name": "crcspeed16native",
        "params": "(uint16_t table[8][256], uint16_t crc, void *buf,\n                          size_t len)",
        "start_line": 261,
        "end_line": 266
      },
      {
        "method_name": "crcspeed64native_init",
        "params": "(crcfn64 fn, uint64_t table[8][256])",
        "start_line": 269,
        "end_line": 274
      },
      {
        "method_name": "crcspeed16native_init",
        "params": "(crcfn16 fn, uint16_t table[8][256])",
        "start_line": 276,
        "end_line": 281
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/crcspeed.h",
    "line": 60,
    "headers": [
      "inttypes.h",
      "stdio.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/db.c",
    "line": 1743,
    "headers": [
      "server.h",
      "cluster.h",
      "atomicvar.h",
      "signal.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "updateLFU",
        "params": "(robj *val)",
        "start_line": 46,
        "end_line": 50
      },
      {
        "method_name": "*lookupKey",
        "params": "(redisDb *db, robj *key, int flags)",
        "start_line": 55,
        "end_line": 74
      },
      {
        "method_name": "*lookupKeyReadWithFlags",
        "params": "(redisDb *db, robj *key, int flags)",
        "start_line": 98,
        "end_line": 141
      },
      {
        "method_name": "*lookupKeyRead",
        "params": "(redisDb *db, robj *key)",
        "start_line": 145,
        "end_line": 147
      },
      {
        "method_name": "*lookupKeyWriteWithFlags",
        "params": "(redisDb *db, robj *key, int flags)",
        "start_line": 154,
        "end_line": 157
      },
      {
        "method_name": "*lookupKeyWrite",
        "params": "(redisDb *db, robj *key)",
        "start_line": 159,
        "end_line": 161
      },
      {
        "method_name": "*lookupKeyReadOrReply",
        "params": "(client *c, robj *key, robj *reply)",
        "start_line": 163,
        "end_line": 167
      },
      {
        "method_name": "*lookupKeyWriteOrReply",
        "params": "(client *c, robj *key, robj *reply)",
        "start_line": 169,
        "end_line": 173
      },
      {
        "method_name": "dbAdd",
        "params": "(redisDb *db, robj *key, robj *val)",
        "start_line": 179,
        "end_line": 189
      },
      {
        "method_name": "dbAddRDBLoad",
        "params": "(redisDb *db, sds key, robj *val)",
        "start_line": 202,
        "end_line": 207
      },
      {
        "method_name": "dbOverwrite",
        "params": "(redisDb *db, robj *key, robj *val)",
        "start_line": 214,
        "end_line": 231
      },
      {
        "method_name": "genericSetKey",
        "params": "(client *c, redisDb *db, robj *key, robj *val, int keepttl, int signal)",
        "start_line": 244,
        "end_line": 253
      },
      {
        "method_name": "setKey",
        "params": "(client *c, redisDb *db, robj *key, robj *val)",
        "start_line": 256,
        "end_line": 258
      },
      {
        "method_name": "dbExists",
        "params": "(redisDb *db, robj *key)",
        "start_line": 262,
        "end_line": 264
      },
      {
        "method_name": "*dbRandomKey",
        "params": "(redisDb *db)",
        "start_line": 270,
        "end_line": 303
      },
      {
        "method_name": "dbSyncDelete",
        "params": "(redisDb *db, robj *key)",
        "start_line": 306,
        "end_line": 316
      },
      {
        "method_name": "dbDelete",
        "params": "(redisDb *db, robj *key)",
        "start_line": 320,
        "end_line": 323
      },
      {
        "method_name": "*dbUnshareStringValue",
        "params": "(redisDb *db, robj *key, robj *o)",
        "start_line": 352,
        "end_line": 361
      },
      {
        "method_name": "void(callback)",
        "params": "(void*))",
        "start_line": 380,
        "end_line": 441
      },
      {
        "method_name": "void(callback)",
        "params": "(void*))",
        "start_line": 443,
        "end_line": 445
      },
      {
        "method_name": "selectDb",
        "params": "(client *c, int id)",
        "start_line": 447,
        "end_line": 452
      },
      {
        "method_name": "dbTotalServerKeyCount",
        "params": "()",
        "start_line": 454,
        "end_line": 461
      },
      {
        "method_name": "signalModifiedKey",
        "params": "(client *c, redisDb *db, robj *key)",
        "start_line": 474,
        "end_line": 477
      },
      {
        "method_name": "signalFlushedDb",
        "params": "(int dbid)",
        "start_line": 479,
        "end_line": 482
      },
      {
        "method_name": "getFlushCommandFlags",
        "params": "(client *c, int *flags)",
        "start_line": 496,
        "end_line": 508
      },
      {
        "method_name": "flushAllDataAndResetRDB",
        "params": "(int flags)",
        "start_line": 511,
        "end_line": 531
      },
      {
        "method_name": "flushdbCommand",
        "params": "(client *c)",
        "start_line": 536,
        "end_line": 549
      },
      {
        "method_name": "flushallCommand",
        "params": "(client *c)",
        "start_line": 554,
        "end_line": 559
      },
      {
        "method_name": "delGenericCommand",
        "params": "(client *c, int lazy)",
        "start_line": 562,
        "end_line": 578
      },
      {
        "method_name": "delCommand",
        "params": "(client *c)",
        "start_line": 580,
        "end_line": 582
      },
      {
        "method_name": "unlinkCommand",
        "params": "(client *c)",
        "start_line": 584,
        "end_line": 586
      },
      {
        "method_name": "existsCommand",
        "params": "(client *c)",
        "start_line": 590,
        "end_line": 598
      },
      {
        "method_name": "selectCommand",
        "params": "(client *c)",
        "start_line": 600,
        "end_line": 616
      },
      {
        "method_name": "randomkeyCommand",
        "params": "(client *c)",
        "start_line": 618,
        "end_line": 628
      },
      {
        "method_name": "keysCommand",
        "params": "(client *c)",
        "start_line": 630,
        "end_line": 655
      },
      {
        "method_name": "scanCallback",
        "params": "(void *privdata, const dictEntry *de)",
        "start_line": 659,
        "end_line": 686
      },
      {
        "method_name": "parseScanCursorOrReply",
        "params": "(client *c, robj *o, unsigned long *cursor)",
        "start_line": 692,
        "end_line": 705
      },
      {
        "method_name": "scanGenericCommand",
        "params": "(client *c, robj *o, unsigned long cursor)",
        "start_line": 718,
        "end_line": 905
      },
      {
        "method_name": "scanCommand",
        "params": "(client *c)",
        "start_line": 908,
        "end_line": 912
      },
      {
        "method_name": "dbsizeCommand",
        "params": "(client *c)",
        "start_line": 914,
        "end_line": 916
      },
      {
        "method_name": "lastsaveCommand",
        "params": "(client *c)",
        "start_line": 918,
        "end_line": 920
      },
      {
        "method_name": "getObjectTypeName",
        "params": "(robj *o)",
        "start_line": 922,
        "end_line": 942
      },
      {
        "method_name": "typeCommand",
        "params": "(client *c)",
        "start_line": 944,
        "end_line": 948
      },
      {
        "method_name": "shutdownCommand",
        "params": "(client *c)",
        "start_line": 950,
        "end_line": 968
      },
      {
        "method_name": "renameGenericCommand",
        "params": "(client *c, int nx)",
        "start_line": 970,
        "end_line": 1010
      },
      {
        "method_name": "renameCommand",
        "params": "(client *c)",
        "start_line": 1012,
        "end_line": 1014
      },
      {
        "method_name": "renamenxCommand",
        "params": "(client *c)",
        "start_line": 1016,
        "end_line": 1018
      },
      {
        "method_name": "moveCommand",
        "params": "(client *c)",
        "start_line": 1020,
        "end_line": 1080
      },
      {
        "method_name": "scanDatabaseForReadyLists",
        "params": "(redisDb *db)",
        "start_line": 1086,
        "end_line": 1098
      },
      {
        "method_name": "dbSwapDatabases",
        "params": "(long id1, long id2)",
        "start_line": 1108,
        "end_line": 1140
      },
      {
        "method_name": "swapdbCommand",
        "params": "(client *c)",
        "start_line": 1143,
        "end_line": 1169
      },
      {
        "method_name": "removeExpire",
        "params": "(redisDb *db, robj *key)",
        "start_line": 1175,
        "end_line": 1180
      },
      {
        "method_name": "setExpire",
        "params": "(client *c, redisDb *db, robj *key, long long when)",
        "start_line": 1186,
        "end_line": 1198
      },
      {
        "method_name": "getExpire",
        "params": "(redisDb *db, robj *key)",
        "start_line": 1202,
        "end_line": 1213
      },
      {
        "method_name": "propagateExpire",
        "params": "(redisDb *db, robj *key, int lazy)",
        "start_line": 1223,
        "end_line": 1237
      },
      {
        "method_name": "keyIsExpired",
        "params": "(redisDb *db, robj *key)",
        "start_line": 1240,
        "end_line": 1275
      },
      {
        "method_name": "expireIfNeeded",
        "params": "(redisDb *db, robj *key)",
        "start_line": 1296,
        "end_line": 1318
      },
      {
        "method_name": "*getKeysUsingCommandTable",
        "params": "(struct redisCommand *cmd,robj **argv, int argc, int *numkeys)",
        "start_line": 1328,
        "end_line": 1365
      },
      {
        "method_name": "*getKeysFromCommand",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1378,
        "end_line": 1386
      },
      {
        "method_name": "getKeysFreeResult",
        "params": "(int *result)",
        "start_line": 1389,
        "end_line": 1392
      },
      {
        "method_name": "*zunionInterGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1397,
        "end_line": 1423
      },
      {
        "method_name": "*evalGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1428,
        "end_line": 1450
      },
      {
        "method_name": "*sortGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1459,
        "end_line": 1499
      },
      {
        "method_name": "*migrateGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1501,
        "end_line": 1529
      },
      {
        "method_name": "*georadiusGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1535,
        "end_line": 1569
      },
      {
        "method_name": "*lcsGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1573,
        "end_line": 1595
      },
      {
        "method_name": "*memoryGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1599,
        "end_line": 1611
      },
      {
        "method_name": "*xreadGetKeys",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 1615,
        "end_line": 1658
      },
      {
        "method_name": "slotToKeyUpdateKey",
        "params": "(sds key, int add)",
        "start_line": 1664,
        "end_line": 1681
      },
      {
        "method_name": "slotToKeyAdd",
        "params": "(sds key)",
        "start_line": 1683,
        "end_line": 1685
      },
      {
        "method_name": "slotToKeyDel",
        "params": "(sds key)",
        "start_line": 1687,
        "end_line": 1689
      },
      {
        "method_name": "slotToKeyFlush",
        "params": "(void)",
        "start_line": 1691,
        "end_line": 1696
      },
      {
        "method_name": "getKeysInSlot",
        "params": "(unsigned int hashslot, robj **keys, unsigned int count)",
        "start_line": 1701,
        "end_line": 1716
      },
      {
        "method_name": "delKeysInSlot",
        "params": "(unsigned int hashslot)",
        "start_line": 1720,
        "end_line": 1739
      },
      {
        "method_name": "countKeysInSlot",
        "params": "(unsigned int hashslot)",
        "start_line": 1741,
        "end_line": 1743
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/debug.c",
    "line": 1685,
    "headers": [
      "server.h",
      "sha1.h",
      "crc64.h",
      "arpa/inet.h",
      "signal.h",
      "dlfcn.h",
      "execinfo.h",
      "ucontext.h",
      "bio.h",
      "unistd.h",
      "sys/time.h"
    ],
    "methods": [
      {
        "method_name": "xorDigest",
        "params": "(unsigned char *digest, void *ptr, size_t len)",
        "start_line": 64,
        "end_line": 75
      },
      {
        "method_name": "xorStringObjectDigest",
        "params": "(unsigned char *digest, robj *o)",
        "start_line": 77,
        "end_line": 81
      },
      {
        "method_name": "mixDigest",
        "params": "(unsigned char *digest, void *ptr, size_t len)",
        "start_line": 97,
        "end_line": 105
      },
      {
        "method_name": "mixStringObjectDigest",
        "params": "(unsigned char *digest, robj *o)",
        "start_line": 107,
        "end_line": 111
      },
      {
        "method_name": "xorObjectDigest",
        "params": "(redisDb *db, robj *keyobj, unsigned char *digest, robj *o)",
        "start_line": 121,
        "end_line": 250
      },
      {
        "method_name": "computeDatasetDigest",
        "params": "(unsigned char *final)",
        "start_line": 258,
        "end_line": 298
      },
      {
        "method_name": "mallctl_int",
        "params": "(client *c, robj **argv, int argc)",
        "start_line": 301,
        "end_line": 340
      },
      {
        "method_name": "mallctl_string",
        "params": "(client *c, robj **argv, int argc)",
        "start_line": 342,
        "end_line": 367
      },
      {
        "method_name": "debugCommand",
        "params": "(client *c)",
        "start_line": 370,
        "end_line": 806
      },
      {
        "method_name": "_serverAssert",
        "params": "(const char *estr, const char *file, int line)",
        "start_line": 810,
        "end_line": 821
      },
      {
        "method_name": "_serverAssertPrintClientInfo",
        "params": "(const client *c)",
        "start_line": 823,
        "end_line": 846
      },
      {
        "method_name": "serverLogObjectDebugInfo",
        "params": "(const robj *o)",
        "start_line": 848,
        "end_line": 872
      },
      {
        "method_name": "_serverAssertPrintObject",
        "params": "(const robj *o)",
        "start_line": 874,
        "end_line": 878
      },
      {
        "method_name": "_serverAssertWithInfo",
        "params": "(const client *c, const robj *o, const char *estr, const char *file, int line)",
        "start_line": 880,
        "end_line": 884
      },
      {
        "method_name": "_serverPanic",
        "params": "(const char *file, int line, const char *msg, ...)",
        "start_line": 886,
        "end_line": 902
      },
      {
        "method_name": "bugReportStart",
        "params": "(void)",
        "start_line": 904,
        "end_line": 910
      },
      {
        "method_name": "*getMcontextEip",
        "params": "(ucontext_t *uc)",
        "start_line": 913,
        "end_line": 962
      },
      {
        "method_name": "logStackContent",
        "params": "(void **sp)",
        "start_line": 964,
        "end_line": 975
      },
      {
        "method_name": "logRegisters",
        "params": "(ucontext_t *uc)",
        "start_line": 977,
        "end_line": 1298
      },
      {
        "method_name": "openDirectLogFiledes",
        "params": "(void)",
        "start_line": 1306,
        "end_line": 1312
      },
      {
        "method_name": "closeDirectLogFiledes",
        "params": "(int fd)",
        "start_line": 1315,
        "end_line": 1318
      },
      {
        "method_name": "logStackTrace",
        "params": "(ucontext_t *uc)",
        "start_line": 1322,
        "end_line": 1345
      },
      {
        "method_name": "logCurrentClient",
        "params": "(void)",
        "start_line": 1350,
        "end_line": 1384
      },
      {
        "method_name": "memtest_test_linux_anonymous_maps",
        "params": "(void)",
        "start_line": 1391,
        "end_line": 1450
      },
      {
        "method_name": "dumpX86Calls",
        "params": "(void *addr, size_t len)",
        "start_line": 1456,
        "end_line": 1477
      },
      {
        "method_name": "sigsegvHandler",
        "params": "(int sig, siginfo_t *info, void *secret)",
        "start_line": 1479,
        "end_line": 1586
      },
      {
        "method_name": "serverLogHexDump",
        "params": "(int level, char *descr, void *value, size_t len)",
        "start_line": 1591,
        "end_line": 1611
      },
      {
        "method_name": "watchdogSignalHandler",
        "params": "(int sig, siginfo_t *info, void *secret)",
        "start_line": 1616,
        "end_line": 1632
      },
      {
        "method_name": "watchdogScheduleSignal",
        "params": "(int period)",
        "start_line": 1637,
        "end_line": 1647
      },
      {
        "method_name": "enableWatchdog",
        "params": "(int period)",
        "start_line": 1650,
        "end_line": 1670
      },
      {
        "method_name": "disableWatchdog",
        "params": "(void)",
        "start_line": 1673,
        "end_line": 1685
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/debugmacro.h",
    "line": 41,
    "headers": [
      "stdio.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/defrag.c",
    "line": 1187,
    "headers": [
      "server.h",
      "time.h",
      "assert.h",
      "stddef.h"
    ],
    "methods": [
      {
        "method_name": "activeDefragAlloc",
        "params": "(void *ptr)",
        "start_line": 57,
        "end_line": 73
      },
      {
        "method_name": "activeDefragSds",
        "params": "(sds sdsptr)",
        "start_line": 80,
        "end_line": 89
      },
      {
        "method_name": "*activeDefragStringOb",
        "params": "(robj* ob, long *defragged)",
        "start_line": 96,
        "end_line": 130
      },
      {
        "method_name": "dictIterDefragEntry",
        "params": "(dictIterator *iter)",
        "start_line": 134,
        "end_line": 161
      },
      {
        "method_name": "dictDefragTables",
        "params": "(dict* d)",
        "start_line": 166,
        "end_line": 180
      },
      {
        "method_name": "zslUpdateNode",
        "params": "(zskiplist *zsl, zskiplistNode *oldnode, zskiplistNode *newnode, zskiplistNode **update)",
        "start_line": 183,
        "end_line": 197
      },
      {
        "method_name": "*zslDefrag",
        "params": "(zskiplist *zsl, double score, sds oldele, sds newele)",
        "start_line": 206,
        "end_line": 239
      },
      {
        "method_name": "activeDefragZsetEntry",
        "params": "(zset *zs, dictEntry *de)",
        "start_line": 243,
        "end_line": 256
      },
      {
        "method_name": "activeDefragSdsDict",
        "params": "(dict* d, int val_type)",
        "start_line": 264,
        "end_line": 291
      },
      {
        "method_name": "activeDefragList",
        "params": "(list *l, int val_type)",
        "start_line": 294,
        "end_line": 325
      },
      {
        "method_name": "activeDefragSdsListAndDict",
        "params": "(list *l, dict *d, int dict_val_type)",
        "start_line": 328,
        "end_line": 379
      },
      {
        "method_name": "replaceSateliteDictKeyPtrAndOrDefragDictEntry",
        "params": "(dict *d, sds oldkey, sds newkey, uint64_t hash, long *defragged)",
        "start_line": 388,
        "end_line": 402
      },
      {
        "method_name": "activeDefragQuickListNode",
        "params": "(quicklist *ql, quicklistNode **node_ref)",
        "start_line": 404,
        "end_line": 423
      },
      {
        "method_name": "activeDefragQuickListNodes",
        "params": "(quicklist *ql)",
        "start_line": 425,
        "end_line": 433
      },
      {
        "method_name": "defragLater",
        "params": "(redisDb *db, dictEntry *kde)",
        "start_line": 438,
        "end_line": 441
      },
      {
        "method_name": "scanLaterList",
        "params": "(robj *ob, unsigned long *cursor, long long endtime, long long *defragged)",
        "start_line": 444,
        "end_line": 485
      },
      {
        "method_name": "scanLaterZsetCallback",
        "params": "(void *privdata, const dictEntry *_de)",
        "start_line": 492,
        "end_line": 497
      },
      {
        "method_name": "scanLaterZset",
        "params": "(robj *ob, unsigned long *cursor)",
        "start_line": 499,
        "end_line": 507
      },
      {
        "method_name": "scanLaterSetCallback",
        "params": "(void *privdata, const dictEntry *_de)",
        "start_line": 509,
        "end_line": 516
      },
      {
        "method_name": "scanLaterSet",
        "params": "(robj *ob, unsigned long *cursor)",
        "start_line": 518,
        "end_line": 525
      },
      {
        "method_name": "scanLaterHashCallback",
        "params": "(void *privdata, const dictEntry *_de)",
        "start_line": 527,
        "end_line": 537
      },
      {
        "method_name": "scanLaterHash",
        "params": "(robj *ob, unsigned long *cursor)",
        "start_line": 539,
        "end_line": 546
      },
      {
        "method_name": "defragQuicklist",
        "params": "(redisDb *db, dictEntry *kde)",
        "start_line": 548,
        "end_line": 560
      },
      {
        "method_name": "defragZsetSkiplist",
        "params": "(redisDb *db, dictEntry *kde)",
        "start_line": 562,
        "end_line": 593
      },
      {
        "method_name": "defragHash",
        "params": "(redisDb *db, dictEntry *kde)",
        "start_line": 595,
        "end_line": 611
      },
      {
        "method_name": "defragSet",
        "params": "(redisDb *db, dictEntry *kde)",
        "start_line": 613,
        "end_line": 629
      },
      {
        "method_name": "defragRaxNode",
        "params": "(raxNode **noderef)",
        "start_line": 633,
        "end_line": 640
      },
      {
        "method_name": "scanLaterStraemListpacks",
        "params": "(robj *ob, unsigned long *cursor, long long endtime, long long *defragged)",
        "start_line": 643,
        "end_line": 691
      },
      {
        "method_name": "defragRadixTree",
        "params": "(rax **raxref, int defrag_data, raxDefragFunction *element_cb, void *element_cb_data)",
        "start_line": 701,
        "end_line": 723
      },
      {
        "method_name": "defragStreamConsumerPendingEntry",
        "params": "(raxIterator *ri, void *privdata, long *defragged)",
        "start_line": 730,
        "end_line": 744
      },
      {
        "method_name": "defragStreamConsumer",
        "params": "(raxIterator *ri, void *privdata, long *defragged)",
        "start_line": 746,
        "end_line": 762
      },
      {
        "method_name": "defragStreamConsumerGroup",
        "params": "(raxIterator *ri, void *privdata, long *defragged)",
        "start_line": 764,
        "end_line": 772
      },
      {
        "method_name": "defragStream",
        "params": "(redisDb *db, dictEntry *kde)",
        "start_line": 774,
        "end_line": 795
      },
      {
        "method_name": "defragKey",
        "params": "(redisDb *db, dictEntry *de)",
        "start_line": 800,
        "end_line": 874
      },
      {
        "method_name": "defragScanCallback",
        "params": "(void *privdata, const dictEntry *de)",
        "start_line": 877,
        "end_line": 885
      },
      {
        "method_name": "defragDictBucketCallback",
        "params": "(void *privdata, dictEntry **bucketref)",
        "start_line": 889,
        "end_line": 898
      },
      {
        "method_name": "getAllocatorFragmentation",
        "params": "(size_t *out_frag_bytes)",
        "start_line": 906,
        "end_line": 919
      },
      {
        "method_name": "defragOtherGlobals",
        "params": "()",
        "start_line": 923,
        "end_line": 932
      },
      {
        "method_name": "defragLaterItem",
        "params": "(dictEntry *de, unsigned long *cursor, long long endtime)",
        "start_line": 936,
        "end_line": 956
      },
      {
        "method_name": "defragLaterStep",
        "params": "(redisDb *db, long long endtime)",
        "start_line": 963,
        "end_line": 1023
      },
      {
        "method_name": "computeDefragCycles",
        "params": "()",
        "start_line": 1029,
        "end_line": 1057
      },
      {
        "method_name": "activeDefragCycle",
        "params": "(void)",
        "start_line": 1062,
        "end_line": 1179
      },
      {
        "method_name": "activeDefragCycle",
        "params": "(void)",
        "start_line": 1183,
        "end_line": 1185
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 487,
        "end_line": 490
      },
      {
        "struct_name": "",
        "start_line": 725,
        "end_line": 728
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/dict.c",
    "line": 1257,
    "headers": [
      "fmacros.h",
      "stdio.h",
      "stdlib.h",
      "stdint.h",
      "string.h",
      "stdarg.h",
      "limits.h",
      "sys/time.h",
      "dict.h",
      "zmalloc.h",
      "redisassert.h",
      "sds.h"
    ],
    "methods": [
      {
        "method_name": "dictSetHashFunctionSeed",
        "params": "(uint8_t *seed)",
        "start_line": 76,
        "end_line": 78
      },
      {
        "method_name": "*dictGetHashFunctionSeed",
        "params": "(void)",
        "start_line": 80,
        "end_line": 82
      },
      {
        "method_name": "dictGenHashFunction",
        "params": "(const void *key, int len)",
        "start_line": 90,
        "end_line": 92
      },
      {
        "method_name": "dictGenCaseHashFunction",
        "params": "(const unsigned char *buf, int len)",
        "start_line": 94,
        "end_line": 96
      },
      {
        "method_name": "_dictReset",
        "params": "(dictht *ht)",
        "start_line": 103,
        "end_line": 108
      },
      {
        "method_name": "*dictCreate",
        "params": "(dictType *type,\n        void *privDataPtr)",
        "start_line": 113,
        "end_line": 118
      },
      {
        "method_name": "_dictInit",
        "params": "(dict *d, dictType *type,\n        void *privDataPtr)",
        "start_line": 123,
        "end_line": 131
      },
      {
        "method_name": "dictResize",
        "params": "(dict *d)",
        "start_line": 136,
        "end_line": 144
      },
      {
        "method_name": "dictExpand",
        "params": "(dict *d, unsigned long size)",
        "start_line": 148,
        "end_line": 177
      },
      {
        "method_name": "dictRehash",
        "params": "(dict *d, int n)",
        "start_line": 188,
        "end_line": 231
      },
      {
        "method_name": "timeInMilliseconds",
        "params": "(void)",
        "start_line": 233,
        "end_line": 238
      },
      {
        "method_name": "dictRehashMilliseconds",
        "params": "(dict *d, int ms)",
        "start_line": 241,
        "end_line": 250
      },
      {
        "method_name": "_dictRehashStep",
        "params": "(dict *d)",
        "start_line": 260,
        "end_line": 262
      },
      {
        "method_name": "dictAdd",
        "params": "(dict *d, void *key, void *val)",
        "start_line": 266,
        "end_line": 272
      },
      {
        "method_name": "*dictAddRaw",
        "params": "(dict *d, void *key, dictEntry **existing)",
        "start_line": 293,
        "end_line": 318
      },
      {
        "method_name": "dictReplace",
        "params": "(dict *d, void *key, void *val)",
        "start_line": 326,
        "end_line": 346
      },
      {
        "method_name": "*dictAddOrFind",
        "params": "(dict *d, void *key)",
        "start_line": 355,
        "end_line": 359
      },
      {
        "method_name": "*dictGenericDelete",
        "params": "(dict *d, const void *key, int nofree)",
        "start_line": 364,
        "end_line": 399
      },
      {
        "method_name": "dictDelete",
        "params": "(dict *ht, const void *key)",
        "start_line": 403,
        "end_line": 405
      },
      {
        "method_name": "*dictUnlink",
        "params": "(dict *ht, const void *key)",
        "start_line": 428,
        "end_line": 430
      },
      {
        "method_name": "dictFreeUnlinkedEntry",
        "params": "(dict *d, dictEntry *he)",
        "start_line": 434,
        "end_line": 439
      },
      {
        "method_name": "void(callback)",
        "params": "(void *))",
        "start_line": 442,
        "end_line": 466
      },
      {
        "method_name": "dictRelease",
        "params": "(dict *d)",
        "start_line": 470,
        "end_line": 474
      },
      {
        "method_name": "*dictFind",
        "params": "(dict *d, const void *key)",
        "start_line": 477,
        "end_line": 495
      },
      {
        "method_name": "*dictFetchValue",
        "params": "(dict *d, const void *key)",
        "start_line": 497,
        "end_line": 502
      },
      {
        "method_name": "dictFingerprint",
        "params": "(dict *d)",
        "start_line": 510,
        "end_line": 540
      },
      {
        "method_name": "*dictGetIterator",
        "params": "(dict *d)",
        "start_line": 543,
        "end_line": 553
      },
      {
        "method_name": "*dictGetSafeIterator",
        "params": "(dict *d)",
        "start_line": 555,
        "end_line": 560
      },
      {
        "method_name": "*dictNext",
        "params": "(dictIterator *iter)",
        "start_line": 563,
        "end_line": 595
      },
      {
        "method_name": "dictReleaseIterator",
        "params": "(dictIterator *iter)",
        "start_line": 598,
        "end_line": 606
      },
      {
        "method_name": "*dictGetRandomKey",
        "params": "(dict *d)",
        "start_line": 611,
        "end_line": 649
      },
      {
        "method_name": "dictGetSomeKeys",
        "params": "(dict *d, dictEntry **des, unsigned int count)",
        "start_line": 673,
        "end_line": 740
      },
      {
        "method_name": "*dictGetFairRandomKey",
        "params": "(dict *d)",
        "start_line": 754,
        "end_line": 764
      },
      {
        "method_name": "rev",
        "params": "(unsigned long v)",
        "start_line": 768,
        "end_line": 776
      },
      {
        "method_name": "dictScan",
        "params": "(dict *d,\n                       unsigned long v,\n                       dictScanFunction *fn,\n                       dictScanBucketFunction* bucketfn,\n                       void *privdata)",
        "start_line": 867,
        "end_line": 948
      },
      {
        "method_name": "_dictExpandIfNeeded",
        "params": "(dict *d)",
        "start_line": 954,
        "end_line": 972
      },
      {
        "method_name": "_dictNextPower",
        "params": "(unsigned long size)",
        "start_line": 976,
        "end_line": 985
      },
      {
        "method_name": "_dictKeyIndex",
        "params": "(dict *d, const void *key, uint64_t hash, dictEntry **existing)",
        "start_line": 995,
        "end_line": 1017
      },
      {
        "method_name": "void(callback)",
        "params": "(void*))",
        "start_line": 1019,
        "end_line": 1024
      },
      {
        "method_name": "dictEnableResize",
        "params": "(void)",
        "start_line": 1026,
        "end_line": 1028
      },
      {
        "method_name": "dictDisableResize",
        "params": "(void)",
        "start_line": 1030,
        "end_line": 1032
      },
      {
        "method_name": "dictGetHash",
        "params": "(dict *d, const void *key)",
        "start_line": 1034,
        "end_line": 1036
      },
      {
        "method_name": "**dictFindEntryRefByPtrAndHash",
        "params": "(dict *d, const void *oldptr, uint64_t hash)",
        "start_line": 1043,
        "end_line": 1061
      },
      {
        "method_name": "_dictGetStatsHt",
        "params": "(char *buf, size_t bufsize, dictht *ht, int tableid)",
        "start_line": 1066,
        "end_line": 1125
      },
      {
        "method_name": "dictGetStats",
        "params": "(char *buf, size_t bufsize, dict *d)",
        "start_line": 1127,
        "end_line": 1140
      },
      {
        "method_name": "hashCallback",
        "params": "(const void *key)",
        "start_line": 1148,
        "end_line": 1150
      },
      {
        "method_name": "compareCallback",
        "params": "(void *privdata, const void *key1, const void *key2)",
        "start_line": 1152,
        "end_line": 1160
      },
      {
        "method_name": "freeCallback",
        "params": "(void *privdata, void *val)",
        "start_line": 1162,
        "end_line": 1166
      },
      {
        "method_name": "end_benchmark",
        "params": "(msg)",
        "start_line": 1178,
        "end_line": 1181
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 1184,
        "end_line": 1256
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/dict.h",
    "line": 190,
    "headers": [
      "stdint.h"
    ],
    "methods": [
      {
        "method_name": "dictSetVal",
        "params": "(d, entry, _val_)",
        "start_line": 108,
        "end_line": 113
      },
      {
        "method_name": "dictSetKey",
        "params": "(d, entry, _key_)",
        "start_line": 128,
        "end_line": 133
      }
    ],
    "structs": [
      {
        "struct_name": "dictEntry",
        "start_line": 47,
        "end_line": 56
      },
      {
        "struct_name": "dictType",
        "start_line": 58,
        "end_line": 65
      },
      {
        "struct_name": "dictht",
        "start_line": 69,
        "end_line": 74
      },
      {
        "struct_name": "dict",
        "start_line": 76,
        "end_line": 82
      },
      {
        "struct_name": "dictIterator",
        "start_line": 88,
        "end_line": 95
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/endianconv.c",
    "line": 128,
    "headers": [
      "stdint.h",
      "stdio.h"
    ],
    "methods": [
      {
        "method_name": "memrev16",
        "params": "(void *p)",
        "start_line": 49,
        "end_line": 55
      },
      {
        "method_name": "memrev32",
        "params": "(void *p)",
        "start_line": 59,
        "end_line": 68
      },
      {
        "method_name": "memrev64",
        "params": "(void *p)",
        "start_line": 72,
        "end_line": 87
      },
      {
        "method_name": "intrev16",
        "params": "(uint16_t v)",
        "start_line": 89,
        "end_line": 92
      },
      {
        "method_name": "intrev32",
        "params": "(uint32_t v)",
        "start_line": 94,
        "end_line": 97
      },
      {
        "method_name": "intrev64",
        "params": "(uint64_t v)",
        "start_line": 99,
        "end_line": 102
      },
      {
        "method_name": "endianconvTest",
        "params": "(int argc, char *argv[])",
        "start_line": 108,
        "end_line": 127
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/endianconv.h",
    "line": 78,
    "headers": [
      "config.h",
      "stdint.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/evict.c",
    "line": 640,
    "headers": [
      "server.h",
      "bio.h",
      "atomicvar.h"
    ],
    "methods": [
      {
        "method_name": "getLRUClock",
        "params": "(void)",
        "start_line": 70,
        "end_line": 72
      },
      {
        "method_name": "LRU_CLOCK",
        "params": "(void)",
        "start_line": 78,
        "end_line": 86
      },
      {
        "method_name": "estimateObjectIdleTime",
        "params": "(robj *o)",
        "start_line": 90,
        "end_line": 98
      },
      {
        "method_name": "evictionPoolAlloc",
        "params": "(void)",
        "start_line": 139,
        "end_line": 151
      },
      {
        "method_name": "evictionPoolPopulate",
        "params": "(int dbid, dict *sampledict, dict *keydict, struct evictionPoolEntry *pool)",
        "start_line": 162,
        "end_line": 257
      },
      {
        "method_name": "LFUGetTimeInMinutes",
        "params": "(void)",
        "start_line": 299,
        "end_line": 301
      },
      {
        "method_name": "LFUTimeElapsed",
        "params": "(unsigned long ldt)",
        "start_line": 307,
        "end_line": 311
      },
      {
        "method_name": "LFULogIncr",
        "params": "(uint8_t counter)",
        "start_line": 315,
        "end_line": 323
      },
      {
        "method_name": "LFUDecrAndReturn",
        "params": "(robj *o)",
        "start_line": 335,
        "end_line": 342
      },
      {
        "method_name": "freeMemoryGetNotCountedMemory",
        "params": "(void)",
        "start_line": 352,
        "end_line": 370
      },
      {
        "method_name": "getMaxmemoryState",
        "params": "(size_t *total, size_t *logical, size_t *tofree, float *level)",
        "start_line": 396,
        "end_line": 435
      },
      {
        "method_name": "freeMemoryIfNeeded",
        "params": "(void)",
        "start_line": 446,
        "end_line": 628
      },
      {
        "method_name": "freeMemoryIfNeededAndSafe",
        "params": "(void)",
        "start_line": 637,
        "end_line": 640
      }
    ],
    "structs": [
      {
        "struct_name": "evictionPoolEntry",
        "start_line": 54,
        "end_line": 59
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/expire.c",
    "line": 611,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "activeExpireCycleTryExpire",
        "params": "(redisDb *db, dictEntry *de, long long now)",
        "start_line": 54,
        "end_line": 74
      },
      {
        "method_name": "activeExpireCycle",
        "params": "(int type)",
        "start_line": 123,
        "end_line": 328
      },
      {
        "method_name": "expireSlaveKeys",
        "params": "(void)",
        "start_line": 369,
        "end_line": 424
      },
      {
        "method_name": "rememberSlaveKeyWithExpire",
        "params": "(redisDb *db, robj *key)",
        "start_line": 428,
        "end_line": 455
      },
      {
        "method_name": "getSlaveKeyWithExpireCount",
        "params": "(void)",
        "start_line": 458,
        "end_line": 461
      },
      {
        "method_name": "flushSlaveKeysWithExpireList",
        "params": "(void)",
        "start_line": 471,
        "end_line": 476
      },
      {
        "method_name": "expireGenericCommand",
        "params": "(client *c, long long basetime, int unit)",
        "start_line": 489,
        "end_line": 534
      },
      {
        "method_name": "expireCommand",
        "params": "(client *c)",
        "start_line": 537,
        "end_line": 539
      },
      {
        "method_name": "expireatCommand",
        "params": "(client *c)",
        "start_line": 542,
        "end_line": 544
      },
      {
        "method_name": "pexpireCommand",
        "params": "(client *c)",
        "start_line": 547,
        "end_line": 549
      },
      {
        "method_name": "pexpireatCommand",
        "params": "(client *c)",
        "start_line": 552,
        "end_line": 554
      },
      {
        "method_name": "ttlGenericCommand",
        "params": "(client *c, int output_ms)",
        "start_line": 557,
        "end_line": 577
      },
      {
        "method_name": "ttlCommand",
        "params": "(client *c)",
        "start_line": 580,
        "end_line": 582
      },
      {
        "method_name": "pttlCommand",
        "params": "(client *c)",
        "start_line": 585,
        "end_line": 587
      },
      {
        "method_name": "persistCommand",
        "params": "(client *c)",
        "start_line": 590,
        "end_line": 602
      },
      {
        "method_name": "touchCommand",
        "params": "(client *c)",
        "start_line": 605,
        "end_line": 610
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/fmacros.h",
    "line": 61,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/geo.c",
    "line": 826,
    "headers": [
      "geo.h",
      "geohash_helper.h",
      "debugmacro.h"
    ],
    "methods": [
      {
        "method_name": "*geoArrayCreate",
        "params": "(void)",
        "start_line": 53,
        "end_line": 60
      },
      {
        "method_name": "*geoArrayAppend",
        "params": "(geoArray *ga)",
        "start_line": 64,
        "end_line": 72
      },
      {
        "method_name": "geoArrayFree",
        "params": "(geoArray *ga)",
        "start_line": 75,
        "end_line": 80
      },
      {
        "method_name": "decodeGeohash",
        "params": "(double bits, double *xy)",
        "start_line": 85,
        "end_line": 88
      },
      {
        "method_name": "extractLongLatOrReply",
        "params": "(client *c, robj **argv, double *xy)",
        "start_line": 93,
        "end_line": 108
      },
      {
        "method_name": "longLatFromMember",
        "params": "(robj *zobj, robj *member, double *xy)",
        "start_line": 113,
        "end_line": 119
      },
      {
        "method_name": "extractUnitOrReply",
        "params": "(client *c, robj *unit)",
        "start_line": 127,
        "end_line": 143
      },
      {
        "method_name": "extractDistanceOrReply",
        "params": "(client *c, robj **argv,\n                                     double *conversion)",
        "start_line": 153,
        "end_line": 172
      },
      {
        "method_name": "addReplyDoubleDistance",
        "params": "(client *c, double d)",
        "start_line": 179,
        "end_line": 183
      },
      {
        "method_name": "geoAppendIfWithinRadius",
        "params": "(geoArray *ga, double lon, double lat, double radius, double score, sds member)",
        "start_line": 191,
        "end_line": 211
      },
      {
        "method_name": "geoGetPointsInRange",
        "params": "(robj *zobj, double min, double max, double lon, double lat, double radius, geoArray *ga)",
        "start_line": 225,
        "end_line": 284
      },
      {
        "method_name": "scoresOfGeoHashBox",
        "params": "(GeoHashBits hash, GeoHashFix52Bits *min, GeoHashFix52Bits *max)",
        "start_line": 289,
        "end_line": 313
      },
      {
        "method_name": "membersOfGeoHashBox",
        "params": "(robj *zobj, GeoHashBits hash, geoArray *ga, double lon, double lat, double radius)",
        "start_line": 318,
        "end_line": 323
      },
      {
        "method_name": "membersOfAllNeighbors",
        "params": "(robj *zobj, GeoHashRadius n, double lon, double lat, double radius, geoArray *ga)",
        "start_line": 326,
        "end_line": 381
      },
      {
        "method_name": "sort_gp_asc",
        "params": "(const void *a, const void *b)",
        "start_line": 384,
        "end_line": 394
      },
      {
        "method_name": "sort_gp_desc",
        "params": "(const void *a, const void *b)",
        "start_line": 396,
        "end_line": 398
      },
      {
        "method_name": "geoaddCommand",
        "params": "(client *c)",
        "start_line": 405,
        "end_line": 449
      },
      {
        "method_name": "georadiusGeneric",
        "params": "(client *c, int flags)",
        "start_line": 462,
        "end_line": 673
      },
      {
        "method_name": "georadiusCommand",
        "params": "(client *c)",
        "start_line": 676,
        "end_line": 678
      },
      {
        "method_name": "georadiusbymemberCommand",
        "params": "(client *c)",
        "start_line": 681,
        "end_line": 683
      },
      {
        "method_name": "georadiusroCommand",
        "params": "(client *c)",
        "start_line": 686,
        "end_line": 688
      },
      {
        "method_name": "georadiusbymemberroCommand",
        "params": "(client *c)",
        "start_line": 691,
        "end_line": 693
      },
      {
        "method_name": "geohashCommand",
        "params": "(client *c)",
        "start_line": 699,
        "end_line": 755
      },
      {
        "method_name": "geoposCommand",
        "params": "(client *c)",
        "start_line": 761,
        "end_line": 787
      },
      {
        "method_name": "geodistCommand",
        "params": "(client *c)",
        "start_line": 794,
        "end_line": 826
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/geo.h",
    "line": 22,
    "headers": [
      "server.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "geoPoint",
        "start_line": 8,
        "end_line": 14
      },
      {
        "struct_name": "geoArray",
        "start_line": 16,
        "end_line": 20
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/geohash.c",
    "line": 299,
    "headers": [
      "geohash.h"
    ],
    "methods": [
      {
        "method_name": "interleave64",
        "params": "(uint32_t xlo, uint32_t ylo)",
        "start_line": 52,
        "end_line": 77
      },
      {
        "method_name": "deinterleave64",
        "params": "(uint64_t interleaved)",
        "start_line": 82,
        "end_line": 110
      },
      {
        "method_name": "geohashGetCoordRange",
        "params": "(GeoHashRange *long_range, GeoHashRange *lat_range)",
        "start_line": 112,
        "end_line": 119
      },
      {
        "method_name": "geohashEncode",
        "params": "(const GeoHashRange *long_range, const GeoHashRange *lat_range,\n                  double longitude, double latitude, uint8_t step,\n                  GeoHashBits *hash)",
        "start_line": 123,
        "end_line": 151
      },
      {
        "method_name": "geohashEncodeType",
        "params": "(double longitude, double latitude, uint8_t step, GeoHashBits *hash)",
        "start_line": 153,
        "end_line": 157
      },
      {
        "method_name": "geohashEncodeWGS84",
        "params": "(double longitude, double latitude, uint8_t step,\n                       GeoHashBits *hash)",
        "start_line": 160,
        "end_line": 162
      },
      {
        "method_name": "geohashDecode",
        "params": "(const GeoHashRange long_range, const GeoHashRange lat_range,\n                   const GeoHashBits hash, GeoHashArea *area)",
        "start_line": 165,
        "end_line": 194
      },
      {
        "method_name": "geohashDecodeType",
        "params": "(const GeoHashBits hash, GeoHashArea *area)",
        "start_line": 196,
        "end_line": 200
      },
      {
        "method_name": "geohashDecodeWGS84",
        "params": "(const GeoHashBits hash, GeoHashArea *area)",
        "start_line": 202,
        "end_line": 204
      },
      {
        "method_name": "geohashDecodeAreaToLongLat",
        "params": "(const GeoHashArea *area, double *xy)",
        "start_line": 206,
        "end_line": 215
      },
      {
        "method_name": "geohashDecodeToLongLatType",
        "params": "(const GeoHashBits hash, double *xy)",
        "start_line": 217,
        "end_line": 222
      },
      {
        "method_name": "geohashDecodeToLongLatWGS84",
        "params": "(const GeoHashBits hash, double *xy)",
        "start_line": 224,
        "end_line": 226
      },
      {
        "method_name": "geohash_move_x",
        "params": "(GeoHashBits *hash, int8_t d)",
        "start_line": 228,
        "end_line": 246
      },
      {
        "method_name": "geohash_move_y",
        "params": "(GeoHashBits *hash, int8_t d)",
        "start_line": 248,
        "end_line": 264
      },
      {
        "method_name": "geohashNeighbors",
        "params": "(const GeoHashBits *hash, GeoHashNeighbors *neighbors)",
        "start_line": 266,
        "end_line": 299
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/geohash.h",
    "line": 118,
    "headers": [
      "stddef.h",
      "stdint.h",
      "stdint.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 66,
        "end_line": 69
      },
      {
        "struct_name": "",
        "start_line": 71,
        "end_line": 74
      },
      {
        "struct_name": "",
        "start_line": 76,
        "end_line": 80
      },
      {
        "struct_name": "",
        "start_line": 82,
        "end_line": 91
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 55,
        "end_line": 64
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/geohash_helper.c",
    "line": 235,
    "headers": [
      "fmacros.h",
      "geohash_helper.h",
      "debugmacro.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "deg_rad",
        "params": "(double ang)",
        "start_line": 57,
        "end_line": 57
      },
      {
        "method_name": "rad_deg",
        "params": "(double ang)",
        "start_line": 58,
        "end_line": 58
      },
      {
        "method_name": "geohashEstimateStepsByRadius",
        "params": "(double range_meters, double lat)",
        "start_line": 62,
        "end_line": 83
      },
      {
        "method_name": "geohashBoundingBox",
        "params": "(double longitude, double latitude, double radius_meters,\n                       double *bounds)",
        "start_line": 104,
        "end_line": 112
      },
      {
        "method_name": "geohashGetAreasByRadius",
        "params": "(double longitude, double latitude, double radius_meters)",
        "start_line": 116,
        "end_line": 197
      },
      {
        "method_name": "geohashGetAreasByRadiusWGS84",
        "params": "(double longitude, double latitude,\n                                           double radius_meters)",
        "start_line": 200,
        "end_line": 202
      },
      {
        "method_name": "geohashAlign52Bits",
        "params": "(const GeoHashBits hash)",
        "start_line": 204,
        "end_line": 208
      },
      {
        "method_name": "geohashGetDistance",
        "params": "(double lon1d, double lat1d, double lon2d, double lat2d)",
        "start_line": 211,
        "end_line": 221
      },
      {
        "method_name": "geohashGetDistanceIfInRadius",
        "params": "(double x1, double y1,\n                                 double x2, double y2, double radius,\n                                 double *distance)",
        "start_line": 225,
        "end_line": 229
      },
      {
        "method_name": "geohashGetDistanceIfInRadiusWGS84",
        "params": "(double x1, double y1, double x2,\n                                      double y2, double radius,\n                                      double *distance)",
        "start_line": 233,
        "end_line": 235
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/geohash_helper.h",
    "line": 70,
    "headers": [
      "geohash.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 44,
        "end_line": 48
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/gopher.c",
    "line": 97,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "addReplyGopherItem",
        "params": "(client *c, const char *type, const char *descr,\n                        const char *selector, const char *hostname, int port)",
        "start_line": 37,
        "end_line": 45
      },
      {
        "method_name": "processGopherRequest",
        "params": "(client *c)",
        "start_line": 51,
        "end_line": 97
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/help.h",
    "line": 1328,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "commandHelp",
        "start_line": 24,
        "end_line": 30
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/hyperloglog.c",
    "line": 1596,
    "headers": [
      "server.h",
      "stdint.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "HLL_DENSE_GET_REGISTER",
        "params": "(target,p,regnum)",
        "start_line": 339,
        "end_line": 347
      },
      {
        "method_name": "HLL_DENSE_SET_REGISTER",
        "params": "(p,regnum,val)",
        "start_line": 351,
        "end_line": 361
      },
      {
        "method_name": "HLL_SPARSE_VAL_SET",
        "params": "(p,val,len)",
        "start_line": 378,
        "end_line": 380
      },
      {
        "method_name": "HLL_SPARSE_ZERO_SET",
        "params": "(p,len)",
        "start_line": 381,
        "end_line": 383
      },
      {
        "method_name": "HLL_SPARSE_XZERO_SET",
        "params": "(p,len)",
        "start_line": 384,
        "end_line": 388
      },
      {
        "method_name": "MurmurHash64A",
        "params": "(const void * key, int len, unsigned int seed)",
        "start_line": 396,
        "end_line": 446
      },
      {
        "method_name": "hllPatLen",
        "params": "(unsigned char *ele, size_t elesize, long *regp)",
        "start_line": 451,
        "end_line": 479
      },
      {
        "method_name": "hllDenseSet",
        "params": "(uint8_t *registers, long index, uint8_t count)",
        "start_line": 493,
        "end_line": 503
      },
      {
        "method_name": "hllDenseAdd",
        "params": "(uint8_t *registers, unsigned char *ele, size_t elesize)",
        "start_line": 511,
        "end_line": 516
      },
      {
        "method_name": "hllDenseRegHisto",
        "params": "(uint8_t *registers, int* reghisto)",
        "start_line": 519,
        "end_line": 574
      },
      {
        "method_name": "hllSparseToDense",
        "params": "(robj *o)",
        "start_line": 584,
        "end_line": 637
      },
      {
        "method_name": "hllSparseSet",
        "params": "(robj *o, long index, uint8_t count)",
        "start_line": 654,
        "end_line": 895
      },
      {
        "method_name": "hllSparseAdd",
        "params": "(robj *o, unsigned char *ele, size_t elesize)",
        "start_line": 903,
        "end_line": 908
      },
      {
        "method_name": "hllSparseRegHisto",
        "params": "(uint8_t *sparse, int sparselen, int *invalid, int* reghisto)",
        "start_line": 911,
        "end_line": 935
      },
      {
        "method_name": "hllRawRegHisto",
        "params": "(uint8_t *registers, int* reghisto)",
        "start_line": 945,
        "end_line": 966
      },
      {
        "method_name": "hllSigma",
        "params": "(double x)",
        "start_line": 971,
        "end_line": 983
      },
      {
        "method_name": "hllTau",
        "params": "(double x)",
        "start_line": 988,
        "end_line": 1000
      },
      {
        "method_name": "hllCount",
        "params": "(struct hllhdr *hdr, int *invalid)",
        "start_line": 1013,
        "end_line": 1048
      },
      {
        "method_name": "hllAdd",
        "params": "(robj *o, unsigned char *ele, size_t elesize)",
        "start_line": 1051,
        "end_line": 1058
      },
      {
        "method_name": "hllMerge",
        "params": "(uint8_t *max, robj *hll)",
        "start_line": 1068,
        "end_line": 1108
      },
      {
        "method_name": "*createHLLObject",
        "params": "(void)",
        "start_line": 1114,
        "end_line": 1144
      },
      {
        "method_name": "isHLLObjectOrReply",
        "params": "(client *c, robj *o)",
        "start_line": 1149,
        "end_line": 1178
      },
      {
        "method_name": "pfaddCommand",
        "params": "(client *c)",
        "start_line": 1181,
        "end_line": 1218
      },
      {
        "method_name": "pfcountCommand",
        "params": "(client *c)",
        "start_line": 1221,
        "end_line": 1308
      },
      {
        "method_name": "pfmergeCommand",
        "params": "(client *c)",
        "start_line": 1311,
        "end_line": 1382
      },
      {
        "method_name": "pfselftestCommand",
        "params": "(client *c)",
        "start_line": 1390,
        "end_line": 1490
      },
      {
        "method_name": "pfdebugCommand",
        "params": "(client *c)",
        "start_line": 1494,
        "end_line": 1595
      }
    ],
    "structs": [
      {
        "struct_name": "hllhdr",
        "start_line": 182,
        "end_line": 188
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/intset.c",
    "line": 492,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "intset.h",
      "zmalloc.h",
      "endianconv.h",
      "sys/time.h",
      "time.h"
    ],
    "methods": [
      {
        "method_name": "_intsetValueEncoding",
        "params": "(int64_t v)",
        "start_line": 45,
        "end_line": 52
      },
      {
        "method_name": "_intsetGetEncoded",
        "params": "(intset *is, int pos, uint8_t enc)",
        "start_line": 55,
        "end_line": 73
      },
      {
        "method_name": "_intsetGet",
        "params": "(intset *is, int pos)",
        "start_line": 76,
        "end_line": 78
      },
      {
        "method_name": "_intsetSet",
        "params": "(intset *is, int pos, int64_t value)",
        "start_line": 81,
        "end_line": 94
      },
      {
        "method_name": "*intsetNew",
        "params": "(void)",
        "start_line": 97,
        "end_line": 102
      },
      {
        "method_name": "*intsetResize",
        "params": "(intset *is, uint32_t len)",
        "start_line": 105,
        "end_line": 109
      },
      {
        "method_name": "intsetSearch",
        "params": "(intset *is, int64_t value, uint32_t *pos)",
        "start_line": 115,
        "end_line": 154
      },
      {
        "method_name": "*intsetUpgradeAndAdd",
        "params": "(intset *is, int64_t value)",
        "start_line": 157,
        "end_line": 180
      },
      {
        "method_name": "intsetMoveTail",
        "params": "(intset *is, uint32_t from, uint32_t to)",
        "start_line": 182,
        "end_line": 201
      },
      {
        "method_name": "*intsetAdd",
        "params": "(intset *is, int64_t value, uint8_t *success)",
        "start_line": 204,
        "end_line": 231
      },
      {
        "method_name": "*intsetRemove",
        "params": "(intset *is, int64_t value, int *success)",
        "start_line": 234,
        "end_line": 251
      },
      {
        "method_name": "intsetFind",
        "params": "(intset *is, int64_t value)",
        "start_line": 254,
        "end_line": 257
      },
      {
        "method_name": "intsetRandom",
        "params": "(intset *is)",
        "start_line": 260,
        "end_line": 262
      },
      {
        "method_name": "intsetGet",
        "params": "(intset *is, uint32_t pos, int64_t *value)",
        "start_line": 266,
        "end_line": 272
      },
      {
        "method_name": "intsetLen",
        "params": "(const intset *is)",
        "start_line": 275,
        "end_line": 277
      },
      {
        "method_name": "intsetBlobLen",
        "params": "(intset *is)",
        "start_line": 280,
        "end_line": 282
      },
      {
        "method_name": "intsetRepr",
        "params": "(intset *is)",
        "start_line": 289,
        "end_line": 294
      },
      {
        "method_name": "error",
        "params": "(char *err)",
        "start_line": 296,
        "end_line": 299
      },
      {
        "method_name": "ok",
        "params": "(void)",
        "start_line": 302,
        "end_line": 304
      },
      {
        "method_name": "usec",
        "params": "(void)",
        "start_line": 306,
        "end_line": 310
      },
      {
        "method_name": "_assert",
        "params": "(char *estr, char *file, int line)",
        "start_line": 313,
        "end_line": 316
      },
      {
        "method_name": "*createSet",
        "params": "(int bits, int size)",
        "start_line": 318,
        "end_line": 332
      },
      {
        "method_name": "checkConsistency",
        "params": "(intset *is)",
        "start_line": 334,
        "end_line": 349
      },
      {
        "method_name": "intsetTest",
        "params": "(int argc, char **argv)",
        "start_line": 352,
        "end_line": 491
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/intset.h",
    "line": 54,
    "headers": [
      "stdint.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "intset",
        "start_line": 35,
        "end_line": 39
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/latency.c",
    "line": 637,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "dictStringKeyCompare",
        "params": "(void *privdata, const void *key1, const void *key2)",
        "start_line": 39,
        "end_line": 42
      },
      {
        "method_name": "dictStringHash",
        "params": "(const void *key)",
        "start_line": 44,
        "end_line": 46
      },
      {
        "method_name": "THPIsEnabled",
        "params": "(void)",
        "start_line": 64,
        "end_line": 75
      },
      {
        "method_name": "THPGetAnonHugePagesSize",
        "params": "(void)",
        "start_line": 81,
        "end_line": 83
      },
      {
        "method_name": "latencyMonitorInit",
        "params": "(void)",
        "start_line": 90,
        "end_line": 92
      },
      {
        "method_name": "latencyAddSample",
        "params": "(const char *event, mstime_t latency)",
        "start_line": 98,
        "end_line": 128
      },
      {
        "method_name": "latencyResetEvent",
        "params": "(char *event_to_reset)",
        "start_line": 135,
        "end_line": 151
      },
      {
        "method_name": "analyzeLatencyForEvent",
        "params": "(char *event, struct latencyStats *ls)",
        "start_line": 160,
        "end_line": 214
      },
      {
        "method_name": "createLatencyReport",
        "params": "(void)",
        "start_line": 217,
        "end_line": 472
      },
      {
        "method_name": "latencyCommandReplyWithSamples",
        "params": "(client *c, struct latencyTimeSeries *ts)",
        "start_line": 478,
        "end_line": 492
      },
      {
        "method_name": "latencyCommandReplyWithLatestEvents",
        "params": "(client *c)",
        "start_line": 496,
        "end_line": 514
      },
      {
        "method_name": "latencyCommandGenSparkeline",
        "params": "(char *event, struct latencyTimeSeries *ts)",
        "start_line": 517,
        "end_line": 559
      },
      {
        "method_name": "latencyCommand",
        "params": "(client *c)",
        "start_line": 569,
        "end_line": 636
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/latency.h",
    "line": 93,
    "headers": [],
    "methods": [
      {
        "method_name": "if",
        "params": "(server.latency_monitor_threshold)",
        "start_line": 71,
        "end_line": 73
      },
      {
        "method_name": "if",
        "params": "(server.latency_monitor_threshold)",
        "start_line": 79,
        "end_line": 81
      }
    ],
    "structs": [
      {
        "struct_name": "latencySample",
        "start_line": 41,
        "end_line": 44
      },
      {
        "struct_name": "latencyTimeSeries",
        "start_line": 47,
        "end_line": 51
      },
      {
        "struct_name": "latencyStats",
        "start_line": 54,
        "end_line": 62
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lazyfree.c",
    "line": 152,
    "headers": [
      "server.h",
      "bio.h",
      "atomicvar.h",
      "cluster.h"
    ],
    "methods": [
      {
        "method_name": "lazyfreeGetPendingObjectsCount",
        "params": "(void)",
        "start_line": 10,
        "end_line": 14
      },
      {
        "method_name": "lazyfreeGetFreeEffort",
        "params": "(robj *obj)",
        "start_line": 31,
        "end_line": 47
      },
      {
        "method_name": "dbAsyncDelete",
        "params": "(redisDb *db, robj *key)",
        "start_line": 54,
        "end_line": 91
      },
      {
        "method_name": "freeObjAsync",
        "params": "(robj *o)",
        "start_line": 94,
        "end_line": 102
      },
      {
        "method_name": "emptyDbAsync",
        "params": "(redisDb *db)",
        "start_line": 107,
        "end_line": 113
      },
      {
        "method_name": "slotToKeyFlushAsync",
        "params": "(void)",
        "start_line": 117,
        "end_line": 125
      },
      {
        "method_name": "lazyfreeFreeObjectFromBioThread",
        "params": "(robj *o)",
        "start_line": 129,
        "end_line": 132
      },
      {
        "method_name": "lazyfreeFreeDatabaseFromBioThread",
        "params": "(dict *ht1, dict *ht2)",
        "start_line": 139,
        "end_line": 144
      },
      {
        "method_name": "lazyfreeFreeSlotsMapFromBioThread",
        "params": "(rax *rt)",
        "start_line": 148,
        "end_line": 152
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/listpack.c",
    "line": 803,
    "headers": [
      "stdint.h",
      "limits.h",
      "sys/types.h",
      "stdlib.h",
      "string.h",
      "stdio.h",
      "listpack.h",
      "listpack_malloc.h"
    ],
    "methods": [
      {
        "method_name": "lpSetTotalBytes",
        "params": "(p,v)",
        "start_line": 105,
        "end_line": 110
      },
      {
        "method_name": "lpSetNumElements",
        "params": "(p,v)",
        "start_line": 112,
        "end_line": 115
      },
      {
        "method_name": "lpStringToInt64",
        "params": "(const char *s, unsigned long slen, int64_t *value)",
        "start_line": 141,
        "end_line": 202
      },
      {
        "method_name": "*lpNew",
        "params": "(void)",
        "start_line": 206,
        "end_line": 213
      },
      {
        "method_name": "lpFree",
        "params": "(unsigned char *lp)",
        "start_line": 216,
        "end_line": 218
      },
      {
        "method_name": "lpEncodeGetType",
        "params": "(unsigned char *ele, uint32_t size, unsigned char *intenc, uint64_t *enclen)",
        "start_line": 231,
        "end_line": 289
      },
      {
        "method_name": "lpEncodeBacklen",
        "params": "(unsigned char *buf, uint64_t l)",
        "start_line": 296,
        "end_line": 331
      },
      {
        "method_name": "lpDecodeBacklen",
        "params": "(unsigned char *p)",
        "start_line": 335,
        "end_line": 346
      },
      {
        "method_name": "lpEncodeString",
        "params": "(unsigned char *buf, unsigned char *s, uint32_t len)",
        "start_line": 352,
        "end_line": 368
      },
      {
        "method_name": "lpCurrentEncodedSize",
        "params": "(unsigned char *p)",
        "start_line": 372,
        "end_line": 384
      },
      {
        "method_name": "*lpSkip",
        "params": "(unsigned char *p)",
        "start_line": 390,
        "end_line": 395
      },
      {
        "method_name": "*lpNext",
        "params": "(unsigned char *lp, unsigned char *p)",
        "start_line": 400,
        "end_line": 405
      },
      {
        "method_name": "*lpPrev",
        "params": "(unsigned char *lp, unsigned char *p)",
        "start_line": 410,
        "end_line": 416
      },
      {
        "method_name": "*lpFirst",
        "params": "(unsigned char *lp)",
        "start_line": 420,
        "end_line": 424
      },
      {
        "method_name": "*lpLast",
        "params": "(unsigned char *lp)",
        "start_line": 428,
        "end_line": 431
      },
      {
        "method_name": "lpLength",
        "params": "(unsigned char *lp)",
        "start_line": 438,
        "end_line": 455
      },
      {
        "method_name": "*lpGet",
        "params": "(unsigned char *p, int64_t *count, unsigned char *intbuf)",
        "start_line": 491,
        "end_line": 569
      },
      {
        "method_name": "*lpInsert",
        "params": "(unsigned char *lp, unsigned char *ele, uint32_t size, unsigned char *p, int where, unsigned char **newp)",
        "start_line": 595,
        "end_line": 731
      },
      {
        "method_name": "*lpAppend",
        "params": "(unsigned char *lp, unsigned char *ele, uint32_t size)",
        "start_line": 736,
        "end_line": 740
      },
      {
        "method_name": "*lpDelete",
        "params": "(unsigned char *lp, unsigned char *p, unsigned char **newp)",
        "start_line": 746,
        "end_line": 748
      },
      {
        "method_name": "lpBytes",
        "params": "(unsigned char *lp)",
        "start_line": 751,
        "end_line": 753
      },
      {
        "method_name": "*lpSeek",
        "params": "(unsigned char *lp, long index)",
        "start_line": 760,
        "end_line": 802
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/listpack.h",
    "line": 61,
    "headers": [
      "stdint.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/listpack_malloc.h",
    "line": 45,
    "headers": [
      "zmalloc.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/localtime.c",
    "line": 123,
    "headers": [
      "time.h",
      "stdio.h"
    ],
    "methods": [
      {
        "method_name": "is_leap_year",
        "params": "(time_t year)",
        "start_line": 52,
        "end_line": 57
      },
      {
        "method_name": "nolocks_localtime",
        "params": "(struct tm *tmp, time_t t, time_t tz, int dst)",
        "start_line": 59,
        "end_line": 104
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 109,
        "end_line": 122
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lolwut.c",
    "line": 188,
    "headers": [
      "server.h",
      "lolwut.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "lolwutUnstableCommand",
        "params": "(client *c)",
        "start_line": 45,
        "end_line": 51
      },
      {
        "method_name": "lolwutCommand",
        "params": "(client *c)",
        "start_line": 54,
        "end_line": 85
      },
      {
        "method_name": "*lwCreateCanvas",
        "params": "(int width, int height, int bgcolor)",
        "start_line": 93,
        "end_line": 100
      },
      {
        "method_name": "lwFreeCanvas",
        "params": "(lwCanvas *canvas)",
        "start_line": 103,
        "end_line": 106
      },
      {
        "method_name": "lwDrawPixel",
        "params": "(lwCanvas *canvas, int x, int y, int color)",
        "start_line": 112,
        "end_line": 116
      },
      {
        "method_name": "lwGetPixel",
        "params": "(lwCanvas *canvas, int x, int y)",
        "start_line": 119,
        "end_line": 123
      },
      {
        "method_name": "lwDrawLine",
        "params": "(lwCanvas *canvas, int x1, int y1, int x2, int y2, int color)",
        "start_line": 126,
        "end_line": 146
      },
      {
        "method_name": "lwDrawSquare",
        "params": "(lwCanvas *canvas, int x, int y, float size, float angle, int color)",
        "start_line": 167,
        "end_line": 188
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lolwut.h",
    "line": 55,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "lwCanvas",
        "start_line": 41,
        "end_line": 45
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lolwut5.c",
    "line": 177,
    "headers": [
      "server.h",
      "lolwut.h",
      "math.h",
      "stdio.h"
    ],
    "methods": [
      {
        "method_name": "lwTranslatePixelsGroup",
        "params": "(int byte, char *output)",
        "start_line": 54,
        "end_line": 62
      },
      {
        "method_name": "*lwDrawSchotter",
        "params": "(int console_cols, int squares_per_row, int squares_per_col)",
        "start_line": 71,
        "end_line": 102
      },
      {
        "method_name": "renderCanvas",
        "params": "(lwCanvas *canvas)",
        "start_line": 109,
        "end_line": 131
      },
      {
        "method_name": "lolwut5Command",
        "params": "(client *c)",
        "start_line": 140,
        "end_line": 177
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lolwut6.c",
    "line": 201,
    "headers": [
      "server.h",
      "lolwut.h"
    ],
    "methods": [
      {
        "method_name": "renderCanvas",
        "params": "(lwCanvas *canvas)",
        "start_line": 47,
        "end_line": 69
      },
      {
        "method_name": "generateSkyscraper",
        "params": "(lwCanvas *canvas, struct skyscraper *si)",
        "start_line": 82,
        "end_line": 120
      },
      {
        "method_name": "generateSkyline",
        "params": "(lwCanvas *canvas)",
        "start_line": 123,
        "end_line": 160
      },
      {
        "method_name": "lolwut6Command",
        "params": "(client *c)",
        "start_line": 169,
        "end_line": 201
      }
    ],
    "structs": [
      {
        "struct_name": "skyscraper",
        "start_line": 74,
        "end_line": 80
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lzf.h",
    "line": 100,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lzfP.h",
    "line": 189,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lzf_c.c",
    "line": 291,
    "headers": [
      "lzfP.h"
    ],
    "methods": [
      {
        "method_name": "lzf_compress",
        "params": "(const void *const in_data, unsigned int in_len,\n\t      void *out_data, unsigned int out_len\n#if LZF_STATE_ARG\n              , LZF_STATE htab\n#endif\n              )",
        "start_line": 105,
        "end_line": 290
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/lzf_d.c",
    "line": 191,
    "headers": [
      "lzfP.h"
    ],
    "methods": [
      {
        "method_name": "lzf_decompress",
        "params": "(const void *const in_data,  unsigned int in_len,\n                void             *out_data, unsigned int out_len)",
        "start_line": 62,
        "end_line": 188
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/memtest.c",
    "line": 360,
    "headers": [
      "stdint.h",
      "stdlib.h",
      "stdio.h",
      "string.h",
      "assert.h",
      "limits.h",
      "errno.h",
      "termios.h",
      "sys/ioctl.h",
      "stropts.h"
    ],
    "methods": [
      {
        "method_name": "memtest_progress_start",
        "params": "(char *title, int pass)",
        "start_line": 63,
        "end_line": 76
      },
      {
        "method_name": "memtest_progress_end",
        "params": "(void)",
        "start_line": 78,
        "end_line": 80
      },
      {
        "method_name": "memtest_progress_step",
        "params": "(size_t curr, size_t size, char c)",
        "start_line": 82,
        "end_line": 88
      },
      {
        "method_name": "memtest_addressing",
        "params": "(unsigned long *l, size_t bytes, int interactive)",
        "start_line": 93,
        "end_line": 121
      },
      {
        "method_name": "xorshift64star_next",
        "params": "()",
        "start_line": 131,
        "end_line": 136
      },
      {
        "method_name": "memtest_fill_random",
        "params": "(unsigned long *l, size_t bytes, int interactive)",
        "start_line": 138,
        "end_line": 159
      },
      {
        "method_name": "memtest_fill_value",
        "params": "(unsigned long *l, size_t bytes, unsigned long v1,\n                        unsigned long v2, char sym, int interactive)",
        "start_line": 165,
        "end_line": 192
      },
      {
        "method_name": "memtest_compare",
        "params": "(unsigned long *l, size_t bytes, int interactive)",
        "start_line": 194,
        "end_line": 216
      },
      {
        "method_name": "memtest_compare_times",
        "params": "(unsigned long *m, size_t bytes, int pass, int times,\n                          int interactive)",
        "start_line": 220,
        "end_line": 230
      },
      {
        "method_name": "memtest_test",
        "params": "(unsigned long *m, size_t bytes, int passes, int interactive)",
        "start_line": 237,
        "end_line": 264
      },
      {
        "method_name": "memtest_preserving_test",
        "params": "(unsigned long *m, size_t bytes, int passes)",
        "start_line": 280,
        "end_line": 333
      },
      {
        "method_name": "memtest_alloc_and_test",
        "params": "(size_t megabytes, int passes)",
        "start_line": 336,
        "end_line": 347
      },
      {
        "method_name": "memtest",
        "params": "(size_t megabytes, int passes)",
        "start_line": 349,
        "end_line": 360
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/module.c",
    "line": 7921,
    "headers": [
      "server.h",
      "cluster.h",
      "rdb.h",
      "dlfcn.h",
      "sys/stat.h",
      "sys/wait.h"
    ],
    "methods": [
      {
        "method_name": "*RM_Alloc",
        "params": "(size_t bytes)",
        "start_line": 395,
        "end_line": 397
      },
      {
        "method_name": "*RM_Calloc",
        "params": "(size_t nmemb, size_t size)",
        "start_line": 403,
        "end_line": 405
      },
      {
        "method_name": "RM_Realloc",
        "params": "(void *ptr, size_t bytes)",
        "start_line": 408,
        "end_line": 410
      },
      {
        "method_name": "RM_Free",
        "params": "(void *ptr)",
        "start_line": 415,
        "end_line": 417
      },
      {
        "method_name": "*RM_Strdup",
        "params": "(const char *str)",
        "start_line": 420,
        "end_line": 422
      },
      {
        "method_name": "poolAllocRelease",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 429,
        "end_line": 438
      },
      {
        "method_name": "*RM_PoolAlloc",
        "params": "(RedisModuleCtx *ctx, size_t bytes)",
        "start_line": 452,
        "end_line": 480
      },
      {
        "method_name": "moduleCreateEmptyKey",
        "params": "(RedisModuleKey *key, int type)",
        "start_line": 498,
        "end_line": 522
      },
      {
        "method_name": "moduleDelKeyIfEmpty",
        "params": "(RedisModuleKey *key)",
        "start_line": 534,
        "end_line": 555
      },
      {
        "method_name": "RM_GetApi",
        "params": "(const char *funcname, void **targetPtrPtr)",
        "start_line": 573,
        "end_line": 578
      },
      {
        "method_name": "moduleHandlePropagationAfterCommandCallback",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 582,
        "end_line": 613
      },
      {
        "method_name": "moduleFreeContext",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 616,
        "end_line": 631
      },
      {
        "method_name": "RedisModuleCommandDispatcher",
        "params": "(client *c)",
        "start_line": 635,
        "end_line": 660
      },
      {
        "method_name": "*moduleGetCommandKeysViaAPI",
        "params": "(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)",
        "start_line": 671,
        "end_line": 683
      },
      {
        "method_name": "RM_IsKeysPositionRequest",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 688,
        "end_line": 690
      },
      {
        "method_name": "(RedisModule_IsKeysPositionRequest",
        "params": "(ctx))",
        "start_line": 698,
        "end_line": 701
      },
      {
        "method_name": "RM_KeyAtPos",
        "params": "(RedisModuleCtx *ctx, int pos)",
        "start_line": 706,
        "end_line": 711
      },
      {
        "method_name": "commandFlagsFromString",
        "params": "(char *s)",
        "start_line": 717,
        "end_line": 743
      },
      {
        "method_name": "RM_CreateCommand",
        "params": "(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc, const char *strflags, int firstkey, int lastkey, int keystep)",
        "start_line": 803,
        "end_line": 844
      },
      {
        "method_name": "RM_SetModuleAttribs",
        "params": "(RedisModuleCtx *ctx, const char *name, int ver, int apiver)",
        "start_line": 850,
        "end_line": 867
      },
      {
        "method_name": "RM_IsModuleNameBusy",
        "params": "(const char *name)",
        "start_line": 871,
        "end_line": 876
      },
      {
        "method_name": "RM_Milliseconds",
        "params": "(void)",
        "start_line": 879,
        "end_line": 881
      },
      {
        "method_name": "RM_SetModuleOptions",
        "params": "(RedisModuleCtx *ctx, int options)",
        "start_line": 892,
        "end_line": 894
      },
      {
        "method_name": "RM_SignalModifiedKey",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *keyname)",
        "start_line": 898,
        "end_line": 901
      },
      {
        "method_name": "RM_AutoMemory",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 911,
        "end_line": 913
      },
      {
        "method_name": "autoMemoryAdd",
        "params": "(RedisModuleCtx *ctx, int type, void *ptr)",
        "start_line": 916,
        "end_line": 926
      },
      {
        "method_name": "autoMemoryFreed",
        "params": "(RedisModuleCtx *ctx, int type, void *ptr)",
        "start_line": 933,
        "end_line": 961
      },
      {
        "method_name": "autoMemoryCollect",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 964,
        "end_line": 986
      },
      {
        "method_name": "*RM_CreateString",
        "params": "(RedisModuleCtx *ctx, const char *ptr, size_t len)",
        "start_line": 1002,
        "end_line": 1006
      },
      {
        "method_name": "*RM_CreateStringPrintf",
        "params": "(RedisModuleCtx *ctx, const char *fmt, ...)",
        "start_line": 1016,
        "end_line": 1028
      },
      {
        "method_name": "*RM_CreateStringFromLongLong",
        "params": "(RedisModuleCtx *ctx, long long ll)",
        "start_line": 1039,
        "end_line": 1043
      },
      {
        "method_name": "*RM_CreateStringFromDouble",
        "params": "(RedisModuleCtx *ctx, double d)",
        "start_line": 1050,
        "end_line": 1054
      },
      {
        "method_name": "*RM_CreateStringFromLongDouble",
        "params": "(RedisModuleCtx *ctx, long double ld, int humanfriendly)",
        "start_line": 1064,
        "end_line": 1069
      },
      {
        "method_name": "*RM_CreateStringFromString",
        "params": "(RedisModuleCtx *ctx, const RedisModuleString *str)",
        "start_line": 1079,
        "end_line": 1083
      },
      {
        "method_name": "RM_FreeString",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *str)",
        "start_line": 1097,
        "end_line": 1100
      },
      {
        "method_name": "RM_RetainString",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *str)",
        "start_line": 1126,
        "end_line": 1139
      },
      {
        "method_name": "*RM_StringPtrLen",
        "params": "(const RedisModuleString *str, size_t *len)",
        "start_line": 1144,
        "end_line": 1152
      },
      {
        "method_name": "RM_StringToLongLong",
        "params": "(const RedisModuleString *str, long long *ll)",
        "start_line": 1162,
        "end_line": 1165
      },
      {
        "method_name": "RM_StringToDouble",
        "params": "(const RedisModuleString *str, double *d)",
        "start_line": 1170,
        "end_line": 1173
      },
      {
        "method_name": "RM_StringToLongDouble",
        "params": "(const RedisModuleString *str, long double *ld)",
        "start_line": 1178,
        "end_line": 1181
      },
      {
        "method_name": "RM_StringCompare",
        "params": "(RedisModuleString *a, RedisModuleString *b)",
        "start_line": 1186,
        "end_line": 1188
      },
      {
        "method_name": "*moduleAssertUnsharedString",
        "params": "(RedisModuleString *str)",
        "start_line": 1192,
        "end_line": 1211
      },
      {
        "method_name": "RM_StringAppendBuffer",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *str, const char *buf, size_t len)",
        "start_line": 1216,
        "end_line": 1222
      },
      {
        "method_name": "RM_WrongArity",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1241,
        "end_line": 1246
      },
      {
        "method_name": "*moduleGetReplyClient",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1262,
        "end_line": 1275
      },
      {
        "method_name": "RM_ReplyWithLongLong",
        "params": "(RedisModuleCtx *ctx, long long ll)",
        "start_line": 1279,
        "end_line": 1284
      },
      {
        "method_name": "replyWithStatus",
        "params": "(RedisModuleCtx *ctx, const char *msg, char *prefix)",
        "start_line": 1289,
        "end_line": 1296
      },
      {
        "method_name": "RM_ReplyWithError",
        "params": "(RedisModuleCtx *ctx, const char *err)",
        "start_line": 1312,
        "end_line": 1314
      },
      {
        "method_name": "RM_ReplyWithSimpleString",
        "params": "(RedisModuleCtx *ctx, const char *msg)",
        "start_line": 1321,
        "end_line": 1323
      },
      {
        "method_name": "RM_ReplyWithArray",
        "params": "(RedisModuleCtx *ctx, long len)",
        "start_line": 1336,
        "end_line": 1349
      },
      {
        "method_name": "RM_ReplyWithNullArray",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1355,
        "end_line": 1360
      },
      {
        "method_name": "RM_ReplyWithEmptyArray",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1365,
        "end_line": 1370
      },
      {
        "method_name": "RM_ReplySetArrayLength",
        "params": "(RedisModuleCtx *ctx, long len)",
        "start_line": 1398,
        "end_line": 1417
      },
      {
        "method_name": "RM_ReplyWithStringBuffer",
        "params": "(RedisModuleCtx *ctx, const char *buf, size_t len)",
        "start_line": 1422,
        "end_line": 1427
      },
      {
        "method_name": "RM_ReplyWithCString",
        "params": "(RedisModuleCtx *ctx, const char *buf)",
        "start_line": 1433,
        "end_line": 1438
      },
      {
        "method_name": "RM_ReplyWithString",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *str)",
        "start_line": 1443,
        "end_line": 1448
      },
      {
        "method_name": "RM_ReplyWithEmptyString",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1453,
        "end_line": 1458
      },
      {
        "method_name": "RM_ReplyWithVerbatimString",
        "params": "(RedisModuleCtx *ctx, const char *buf, size_t len)",
        "start_line": 1464,
        "end_line": 1469
      },
      {
        "method_name": "RM_ReplyWithNull",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1474,
        "end_line": 1479
      },
      {
        "method_name": "RM_ReplyWithCallReply",
        "params": "(RedisModuleCtx *ctx, RedisModuleCallReply *reply)",
        "start_line": 1487,
        "end_line": 1493
      },
      {
        "method_name": "RM_ReplyWithDouble",
        "params": "(RedisModuleCtx *ctx, double d)",
        "start_line": 1501,
        "end_line": 1506
      },
      {
        "method_name": "RM_ReplyWithLongDouble",
        "params": "(RedisModuleCtx *ctx, long double ld)",
        "start_line": 1516,
        "end_line": 1521
      },
      {
        "method_name": "moduleReplicateMultiIfNeeded",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1530,
        "end_line": 1549
      },
      {
        "method_name": "RM_Replicate",
        "params": "(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...)",
        "start_line": 1588,
        "end_line": 1626
      },
      {
        "method_name": "RM_ReplicateVerbatim",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1639,
        "end_line": 1645
      },
      {
        "method_name": "(RedisModule_IsAOFClient(RedisModule_GetClientId",
        "params": "(ctx))",
        "start_line": 1666,
        "end_line": 1668
      },
      {
        "method_name": "RM_GetClientId",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1670,
        "end_line": 1673
      },
      {
        "method_name": "modulePopulateClientInfoStructure",
        "params": "(void *ci, client *client, int structver)",
        "start_line": 1681,
        "end_line": 1704
      },
      {
        "method_name": "modulePopulateReplicationInfoStructure",
        "params": "(void *ri, int structver)",
        "start_line": 1711,
        "end_line": 1725
      },
      {
        "method_name": "if",
        "params": "(retval == REDISMODULE_OK)",
        "start_line": 1765,
        "end_line": 1767
      },
      {
        "method_name": "RM_GetClientInfoById",
        "params": "(void *ci, uint64_t id)",
        "start_line": 1769,
        "end_line": 1777
      },
      {
        "method_name": "RM_PublishMessage",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *channel, RedisModuleString *message)",
        "start_line": 1780,
        "end_line": 1786
      },
      {
        "method_name": "RM_GetSelectedDb",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1789,
        "end_line": 1791
      },
      {
        "method_name": "RM_GetContextFlags",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 1852,
        "end_line": 1927
      },
      {
        "method_name": "RM_AvoidReplicaTraffic",
        "params": "()",
        "start_line": 1949,
        "end_line": 1951
      },
      {
        "method_name": "RM_SelectDb",
        "params": "(RedisModuleCtx *ctx, int newid)",
        "start_line": 1963,
        "end_line": 1966
      },
      {
        "method_name": "moduleInitKey",
        "params": "(RedisModuleKey *kp, RedisModuleCtx *ctx, robj *keyname, robj *value, int mode)",
        "start_line": 1969,
        "end_line": 1978
      },
      {
        "method_name": "*RM_OpenKey",
        "params": "(RedisModuleCtx *ctx, robj *keyname, int mode)",
        "start_line": 1994,
        "end_line": 2013
      },
      {
        "method_name": "moduleCloseKey",
        "params": "(RedisModuleKey *key)",
        "start_line": 2016,
        "end_line": 2023
      },
      {
        "method_name": "RM_CloseKey",
        "params": "(RedisModuleKey *key)",
        "start_line": 2026,
        "end_line": 2031
      },
      {
        "method_name": "RM_KeyType",
        "params": "(RedisModuleKey *key)",
        "start_line": 2035,
        "end_line": 2049
      },
      {
        "method_name": "RM_ValueLength",
        "params": "(RedisModuleKey *key)",
        "start_line": 2056,
        "end_line": 2067
      },
      {
        "method_name": "RM_DeleteKey",
        "params": "(RedisModuleKey *key)",
        "start_line": 2073,
        "end_line": 2080
      },
      {
        "method_name": "RM_UnlinkKey",
        "params": "(RedisModuleKey *key)",
        "start_line": 2087,
        "end_line": 2094
      },
      {
        "method_name": "RM_GetExpire",
        "params": "(RedisModuleKey *key)",
        "start_line": 2099,
        "end_line": 2104
      },
      {
        "method_name": "RM_SetExpire",
        "params": "(RedisModuleKey *key, mstime_t expire)",
        "start_line": 2115,
        "end_line": 2125
      },
      {
        "method_name": "RM_ResetDataset",
        "params": "(int restart_aof, int async)",
        "start_line": 2131,
        "end_line": 2135
      },
      {
        "method_name": "RM_DbSize",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 2138,
        "end_line": 2140
      },
      {
        "method_name": "*RM_RandomKey",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 2143,
        "end_line": 2147
      },
      {
        "method_name": "RM_StringSet",
        "params": "(RedisModuleKey *key, RedisModuleString *str)",
        "start_line": 2157,
        "end_line": 2163
      },
      {
        "method_name": "*RM_StringDMA",
        "params": "(RedisModuleKey *key, size_t *len, int mode)",
        "start_line": 2194,
        "end_line": 2214
      },
      {
        "method_name": "RM_StringTruncate",
        "params": "(RedisModuleKey *key, size_t newlen)",
        "start_line": 2228,
        "end_line": 2257
      },
      {
        "method_name": "RM_ListPush",
        "params": "(RedisModuleKey *key, int where, RedisModuleString *ele)",
        "start_line": 2267,
        "end_line": 2274
      },
      {
        "method_name": "*RM_ListPop",
        "params": "(RedisModuleKey *key, int where)",
        "start_line": 2283,
        "end_line": 2294
      },
      {
        "method_name": "RM_ZsetAddFlagsToCoreFlags",
        "params": "(int flags)",
        "start_line": 2302,
        "end_line": 2307
      },
      {
        "method_name": "RM_ZsetAddFlagsFromCoreFlags",
        "params": "(int flags)",
        "start_line": 2310,
        "end_line": 2316
      },
      {
        "method_name": "RM_ZsetAdd",
        "params": "(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr)",
        "start_line": 2346,
        "end_line": 2358
      },
      {
        "method_name": "RM_ZsetIncrby",
        "params": "(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr, double *newscore)",
        "start_line": 2373,
        "end_line": 2391
      },
      {
        "method_name": "RM_ZsetRem",
        "params": "(RedisModuleKey *key, RedisModuleString *ele, int *deleted)",
        "start_line": 2411,
        "end_line": 2420
      },
      {
        "method_name": "RM_ZsetScore",
        "params": "(RedisModuleKey *key, RedisModuleString *ele, double *score)",
        "start_line": 2430,
        "end_line": 2435
      },
      {
        "method_name": "zsetKeyReset",
        "params": "(RedisModuleKey *key)",
        "start_line": 2441,
        "end_line": 2445
      },
      {
        "method_name": "RM_ZsetRangeStop",
        "params": "(RedisModuleKey *key)",
        "start_line": 2448,
        "end_line": 2456
      },
      {
        "method_name": "RM_ZsetRangeEndReached",
        "params": "(RedisModuleKey *key)",
        "start_line": 2459,
        "end_line": 2461
      },
      {
        "method_name": "zsetInitScoreRange",
        "params": "(RedisModuleKey *key, double min, double max, int minex, int maxex, int first)",
        "start_line": 2469,
        "end_line": 2497
      },
      {
        "method_name": "RM_ZsetFirstInScoreRange",
        "params": "(RedisModuleKey *key, double min, double max, int minex, int maxex)",
        "start_line": 2514,
        "end_line": 2516
      },
      {
        "method_name": "RM_ZsetLastInScoreRange",
        "params": "(RedisModuleKey *key, double min, double max, int minex, int maxex)",
        "start_line": 2520,
        "end_line": 2522
      },
      {
        "method_name": "zsetInitLexRange",
        "params": "(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max, int first)",
        "start_line": 2533,
        "end_line": 2562
      },
      {
        "method_name": "RM_ZsetFirstInLexRange",
        "params": "(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max)",
        "start_line": 2576,
        "end_line": 2578
      },
      {
        "method_name": "RM_ZsetLastInLexRange",
        "params": "(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max)",
        "start_line": 2582,
        "end_line": 2584
      },
      {
        "method_name": "*RM_ZsetRangeCurrentElement",
        "params": "(RedisModuleKey *key, double *score)",
        "start_line": 2589,
        "end_line": 2611
      },
      {
        "method_name": "RM_ZsetRangeNext",
        "params": "(RedisModuleKey *key)",
        "start_line": 2616,
        "end_line": 2674
      },
      {
        "method_name": "RM_ZsetRangePrev",
        "params": "(RedisModuleKey *key)",
        "start_line": 2679,
        "end_line": 2737
      },
      {
        "method_name": "RM_HashSet",
        "params": "(RedisModuleKey *key, int flags, ...)",
        "start_line": 2795,
        "end_line": 2855
      },
      {
        "method_name": "RM_HashGet",
        "params": "(RedisModuleKey *key, int flags, ...)",
        "start_line": 2898,
        "end_line": 2944
      },
      {
        "method_name": "*moduleCreateCallReplyFromProto",
        "params": "(RedisModuleCtx *ctx, sds proto)",
        "start_line": 2954,
        "end_line": 2971
      },
      {
        "method_name": "moduleParseCallReply",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 2981,
        "end_line": 2992
      },
      {
        "method_name": "moduleParseCallReply_Int",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 2994,
        "end_line": 3001
      },
      {
        "method_name": "moduleParseCallReply_BulkString",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3003,
        "end_line": 3018
      },
      {
        "method_name": "moduleParseCallReply_SimpleString",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3020,
        "end_line": 3029
      },
      {
        "method_name": "moduleParseCallReply_Array",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3031,
        "end_line": 3058
      },
      {
        "method_name": "RM_FreeCallReply_Rec",
        "params": "(RedisModuleCallReply *reply, int freenested)",
        "start_line": 3062,
        "end_line": 3085
      },
      {
        "method_name": "RM_FreeCallReply",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3090,
        "end_line": 3095
      },
      {
        "method_name": "RM_CallReplyType",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3098,
        "end_line": 3101
      },
      {
        "method_name": "RM_CallReplyLength",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3104,
        "end_line": 3114
      },
      {
        "method_name": "*RM_CallReplyArrayElement",
        "params": "(RedisModuleCallReply *reply, size_t idx)",
        "start_line": 3118,
        "end_line": 3123
      },
      {
        "method_name": "RM_CallReplyInteger",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3126,
        "end_line": 3130
      },
      {
        "method_name": "*RM_CallReplyStringPtr",
        "params": "(RedisModuleCallReply *reply, size_t *len)",
        "start_line": 3133,
        "end_line": 3139
      },
      {
        "method_name": "*RM_CreateStringFromCallReply",
        "params": "(RedisModuleCallReply *reply)",
        "start_line": 3143,
        "end_line": 3156
      },
      {
        "method_name": "**moduleCreateArgvFromUserFormat",
        "params": "(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap)",
        "start_line": 3171,
        "end_line": 3236
      },
      {
        "method_name": "*RM_Call",
        "params": "(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...)",
        "start_line": 3252,
        "end_line": 3355
      },
      {
        "method_name": "*RM_CallReplyProto",
        "params": "(RedisModuleCallReply *reply, size_t *len)",
        "start_line": 3359,
        "end_line": 3362
      },
      {
        "method_name": "moduleTypeEncodeId",
        "params": "(const char *name, int encver)",
        "start_line": 3402,
        "end_line": 3418
      },
      {
        "method_name": "*moduleTypeLookupModuleByName",
        "params": "(const char *name)",
        "start_line": 3423,
        "end_line": 3443
      },
      {
        "method_name": "*moduleTypeLookupModuleByID",
        "params": "(uint64_t id)",
        "start_line": 3450,
        "end_line": 3490
      },
      {
        "method_name": "moduleTypeNameByID",
        "params": "(char *name, uint64_t moduleid)",
        "start_line": 3496,
        "end_line": 3506
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 3573,
        "end_line": 3576
      },
      {
        "method_name": "*RM_CreateDataType",
        "params": "(RedisModuleCtx *ctx, const char *name, int encver, void *typemethods_ptr)",
        "start_line": 3578,
        "end_line": 3618
      },
      {
        "method_name": "RM_ModuleTypeSetValue",
        "params": "(RedisModuleKey *key, moduleType *mt, void *value)",
        "start_line": 3624,
        "end_line": 3632
      },
      {
        "method_name": "*RM_ModuleTypeGetType",
        "params": "(RedisModuleKey *key)",
        "start_line": 3639,
        "end_line": 3645
      },
      {
        "method_name": "*RM_ModuleTypeGetValue",
        "params": "(RedisModuleKey *key)",
        "start_line": 3653,
        "end_line": 3659
      },
      {
        "method_name": "moduleRDBLoadError",
        "params": "(RedisModuleIO *io)",
        "start_line": 3668,
        "end_line": 3682
      },
      {
        "method_name": "moduleAllDatatypesHandleErrors",
        "params": "()",
        "start_line": 3687,
        "end_line": 3702
      },
      {
        "method_name": "RM_IsIOError",
        "params": "(RedisModuleIO *io)",
        "start_line": 3707,
        "end_line": 3709
      },
      {
        "method_name": "RM_SaveUnsigned",
        "params": "(RedisModuleIO *io, uint64_t value)",
        "start_line": 3714,
        "end_line": 3728
      },
      {
        "method_name": "RM_LoadUnsigned",
        "params": "(RedisModuleIO *io)",
        "start_line": 3733,
        "end_line": 3747
      },
      {
        "method_name": "RM_SaveSigned",
        "params": "(RedisModuleIO *io, int64_t value)",
        "start_line": 3750,
        "end_line": 3754
      },
      {
        "method_name": "RM_LoadSigned",
        "params": "(RedisModuleIO *io)",
        "start_line": 3757,
        "end_line": 3761
      },
      {
        "method_name": "RM_SaveString",
        "params": "(RedisModuleIO *io, RedisModuleString *s)",
        "start_line": 3769,
        "end_line": 3783
      },
      {
        "method_name": "RM_SaveStringBuffer",
        "params": "(RedisModuleIO *io, const char *str, size_t len)",
        "start_line": 3787,
        "end_line": 3801
      },
      {
        "method_name": "*moduleLoadString",
        "params": "(RedisModuleIO *io, int plain, size_t *lenptr)",
        "start_line": 3804,
        "end_line": 3818
      },
      {
        "method_name": "*RM_LoadString",
        "params": "(RedisModuleIO *io)",
        "start_line": 3829,
        "end_line": 3831
      },
      {
        "method_name": "*RM_LoadStringBuffer",
        "params": "(RedisModuleIO *io, size_t *lenptr)",
        "start_line": 3840,
        "end_line": 3842
      },
      {
        "method_name": "RM_SaveDouble",
        "params": "(RedisModuleIO *io, double value)",
        "start_line": 3847,
        "end_line": 3861
      },
      {
        "method_name": "RM_LoadDouble",
        "params": "(RedisModuleIO *io)",
        "start_line": 3865,
        "end_line": 3879
      },
      {
        "method_name": "RM_SaveFloat",
        "params": "(RedisModuleIO *io, float value)",
        "start_line": 3884,
        "end_line": 3898
      },
      {
        "method_name": "RM_LoadFloat",
        "params": "(RedisModuleIO *io)",
        "start_line": 3902,
        "end_line": 3916
      },
      {
        "method_name": "RM_SaveLongDouble",
        "params": "(RedisModuleIO *io, long double value)",
        "start_line": 3921,
        "end_line": 3928
      },
      {
        "method_name": "RM_LoadLongDouble",
        "params": "(RedisModuleIO *io)",
        "start_line": 3932,
        "end_line": 3941
      },
      {
        "method_name": "rdbSaveModulesAux",
        "params": "(rio *rdb, int when)",
        "start_line": 3945,
        "end_line": 3971
      },
      {
        "method_name": "RM_DigestAddStringBuffer",
        "params": "(RedisModuleDigest *md, unsigned char *ele, size_t len)",
        "start_line": 4015,
        "end_line": 4017
      },
      {
        "method_name": "RM_DigestAddLongLong",
        "params": "(RedisModuleDigest *md, long long ll)",
        "start_line": 4021,
        "end_line": 4025
      },
      {
        "method_name": "RM_DigestEndSequence",
        "params": "(RedisModuleDigest *md)",
        "start_line": 4028,
        "end_line": 4031
      },
      {
        "method_name": "*RM_LoadDataTypeFromString",
        "params": "(const RedisModuleString *str, const moduleType *mt)",
        "start_line": 4048,
        "end_line": 4066
      },
      {
        "method_name": "*RM_SaveDataTypeToString",
        "params": "(RedisModuleCtx *ctx, void *data, const moduleType *mt)",
        "start_line": 4076,
        "end_line": 4094
      },
      {
        "method_name": "RM_EmitAOF",
        "params": "(RedisModuleIO *io, const char *cmdname, const char *fmt, ...)",
        "start_line": 4105,
        "end_line": 4149
      },
      {
        "method_name": "*RM_GetContextFromIO",
        "params": "(RedisModuleIO *io)",
        "start_line": 4155,
        "end_line": 4163
      },
      {
        "method_name": "*RM_GetKeyNameFromIO",
        "params": "(RedisModuleIO *io)",
        "start_line": 4169,
        "end_line": 4171
      },
      {
        "method_name": "*RM_GetKeyNameFromModuleKey",
        "params": "(RedisModuleKey *key)",
        "start_line": 4174,
        "end_line": 4176
      },
      {
        "method_name": "RM_LogRaw",
        "params": "(RedisModule *module, const char *levelstr, const char *fmt, va_list ap)",
        "start_line": 4188,
        "end_line": 4204
      },
      {
        "method_name": "RM_Log",
        "params": "(RedisModuleCtx *ctx, const char *levelstr, const char *fmt, ...)",
        "start_line": 4224,
        "end_line": 4229
      },
      {
        "method_name": "RM_LogIOError",
        "params": "(RedisModuleIO *io, const char *levelstr, const char *fmt, ...)",
        "start_line": 4236,
        "end_line": 4241
      },
      {
        "method_name": "RM__Assert",
        "params": "(const char *estr, const char *file, int line)",
        "start_line": 4248,
        "end_line": 4250
      },
      {
        "method_name": "RM_LatencyAddSample",
        "params": "(const char *event, mstime_t latency)",
        "start_line": 4255,
        "end_line": 4258
      },
      {
        "method_name": "moduleBlockedClientPipeReadable",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 4268,
        "end_line": 4273
      },
      {
        "method_name": "unblockClientFromModule",
        "params": "(client *c)",
        "start_line": 4287,
        "end_line": 4327
      },
      {
        "method_name": "(*free_privdata)",
        "params": "(RedisModuleCtx*,void*), long long timeout_ms, RedisModuleString **keys, int numkeys, void *privdata)",
        "start_line": 4348,
        "end_line": 4389
      },
      {
        "method_name": "moduleTryServeClientBlockedOnKey",
        "params": "(client *c, robj *key)",
        "start_line": 4398,
        "end_line": 4418
      },
      {
        "method_name": "(*free_privdata)",
        "params": "(RedisModuleCtx*,void*), long long timeout_ms)",
        "start_line": 4440,
        "end_line": 4442
      },
      {
        "method_name": "(*free_privdata)",
        "params": "(RedisModuleCtx*,void*), long long timeout_ms, RedisModuleString **keys, int numkeys, void *privdata)",
        "start_line": 4502,
        "end_line": 4504
      },
      {
        "method_name": "RM_SignalKeyAsReady",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *key)",
        "start_line": 4510,
        "end_line": 4512
      },
      {
        "method_name": "moduleUnblockClientByHandle",
        "params": "(RedisModuleBlockedClient *bc, void *privdata)",
        "start_line": 4515,
        "end_line": 4525
      },
      {
        "method_name": "moduleUnblockClient",
        "params": "(client *c)",
        "start_line": 4529,
        "end_line": 4532
      },
      {
        "method_name": "moduleClientIsBlockedOnKeys",
        "params": "(client *c)",
        "start_line": 4536,
        "end_line": 4539
      },
      {
        "method_name": "RM_UnblockClient",
        "params": "(RedisModuleBlockedClient *bc, void *privdata)",
        "start_line": 4561,
        "end_line": 4571
      },
      {
        "method_name": "RM_AbortBlock",
        "params": "(RedisModuleBlockedClient *bc)",
        "start_line": 4575,
        "end_line": 4579
      },
      {
        "method_name": "RM_SetDisconnectCallback",
        "params": "(RedisModuleBlockedClient *bc, RedisModuleDisconnectFunc callback)",
        "start_line": 4597,
        "end_line": 4599
      },
      {
        "method_name": "moduleHandleBlockedClients",
        "params": "(void)",
        "start_line": 4609,
        "end_line": 4691
      },
      {
        "method_name": "moduleBlockedClientTimedOut",
        "params": "(client *c)",
        "start_line": 4697,
        "end_line": 4710
      },
      {
        "method_name": "RM_IsBlockedReplyRequest",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4714,
        "end_line": 4716
      },
      {
        "method_name": "RM_IsBlockedTimeoutRequest",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4720,
        "end_line": 4722
      },
      {
        "method_name": "*RM_GetBlockedClientPrivateData",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4725,
        "end_line": 4727
      },
      {
        "method_name": "*RM_GetBlockedClientReadyKey",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4731,
        "end_line": 4733
      },
      {
        "method_name": "*RM_GetBlockedClientHandle",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4739,
        "end_line": 4741
      },
      {
        "method_name": "RM_BlockedClientDisconnected",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4746,
        "end_line": 4748
      },
      {
        "method_name": "*RM_GetThreadSafeContext",
        "params": "(RedisModuleBlockedClient *bc)",
        "start_line": 4773,
        "end_line": 4792
      },
      {
        "method_name": "RM_FreeThreadSafeContext",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4795,
        "end_line": 4798
      },
      {
        "method_name": "RM_ThreadSafeContextLock",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4803,
        "end_line": 4806
      },
      {
        "method_name": "RM_ThreadSafeContextUnlock",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 4809,
        "end_line": 4812
      },
      {
        "method_name": "moduleAcquireGIL",
        "params": "(void)",
        "start_line": 4814,
        "end_line": 4816
      },
      {
        "method_name": "moduleReleaseGIL",
        "params": "(void)",
        "start_line": 4818,
        "end_line": 4820
      },
      {
        "method_name": "RM_SubscribeToKeyspaceEvents",
        "params": "(RedisModuleCtx *ctx, int types, RedisModuleNotificationFunc callback)",
        "start_line": 4877,
        "end_line": 4886
      },
      {
        "method_name": "RM_GetNotifyKeyspaceEvents",
        "params": "()",
        "start_line": 4890,
        "end_line": 4892
      },
      {
        "method_name": "RM_NotifyKeyspaceEvent",
        "params": "(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key)",
        "start_line": 4895,
        "end_line": 4900
      },
      {
        "method_name": "moduleNotifyKeyspaceEvent",
        "params": "(int type, const char *event, robj *key, int dbid)",
        "start_line": 4905,
        "end_line": 4935
      },
      {
        "method_name": "moduleUnsubscribeNotifications",
        "params": "(RedisModule *module)",
        "start_line": 4938,
        "end_line": 4949
      },
      {
        "method_name": "moduleCallClusterReceivers",
        "params": "(const char *sender_id, uint64_t module_id, uint8_t type, const unsigned char *payload, uint32_t len)",
        "start_line": 4980,
        "end_line": 4994
      },
      {
        "method_name": "RM_RegisterClusterMessageReceiver",
        "params": "(RedisModuleCtx *ctx, uint8_t type, RedisModuleClusterMessageReceiver callback)",
        "start_line": 5001,
        "end_line": 5036
      },
      {
        "method_name": "RM_SendClusterMessage",
        "params": "(RedisModuleCtx *ctx, char *target_id, uint8_t type, unsigned char *msg, uint32_t len)",
        "start_line": 5045,
        "end_line": 5052
      },
      {
        "method_name": "for",
        "params": "(j = 0; j \u003c count; j++)",
        "start_line": 5070,
        "end_line": 5073
      },
      {
        "method_name": "**RM_GetClusterNodesList",
        "params": "(RedisModuleCtx *ctx, size_t *numnodes)",
        "start_line": 5076,
        "end_line": 5097
      },
      {
        "method_name": "RM_FreeClusterNodesList",
        "params": "(char **ids)",
        "start_line": 5100,
        "end_line": 5104
      },
      {
        "method_name": "*RM_GetMyClusterID",
        "params": "(void)",
        "start_line": 5108,
        "end_line": 5111
      },
      {
        "method_name": "RM_GetClusterSize",
        "params": "(void)",
        "start_line": 5117,
        "end_line": 5120
      },
      {
        "method_name": "RM_GetClusterNodeInfo",
        "params": "(RedisModuleCtx *ctx, const char *id, char *ip, char *master_id, int *port, int *flags)",
        "start_line": 5144,
        "end_line": 5179
      },
      {
        "method_name": "RM_SetClusterFlags",
        "params": "(RedisModuleCtx *ctx, uint64_t flags)",
        "start_line": 5199,
        "end_line": 5205
      },
      {
        "method_name": "moduleTimerHandler",
        "params": "(struct aeEventLoop *eventLoop, long long id, void *clientData)",
        "start_line": 5241,
        "end_line": 5278
      },
      {
        "method_name": "RM_CreateTimer",
        "params": "(RedisModuleCtx *ctx, mstime_t period, RedisModuleTimerProc callback, void *data)",
        "start_line": 5283,
        "end_line": 5325
      },
      {
        "method_name": "RM_StopTimer",
        "params": "(RedisModuleCtx *ctx, RedisModuleTimerID id, void **data)",
        "start_line": 5331,
        "end_line": 5339
      },
      {
        "method_name": "RM_GetTimerInfo",
        "params": "(RedisModuleCtx *ctx, RedisModuleTimerID id, uint64_t *remaining, void **data)",
        "start_line": 5347,
        "end_line": 5358
      },
      {
        "method_name": "moduleNotifyUserChanged",
        "params": "(client *c)",
        "start_line": 5372,
        "end_line": 5383
      },
      {
        "method_name": "revokeClientAuthentication",
        "params": "(client *c)",
        "start_line": 5385,
        "end_line": 5396
      },
      {
        "method_name": "moduleFreeAuthenticatedClients",
        "params": "(RedisModule *module)",
        "start_line": 5401,
        "end_line": 5414
      },
      {
        "method_name": "*RM_CreateModuleUser",
        "params": "(const char *name)",
        "start_line": 5436,
        "end_line": 5444
      },
      {
        "method_name": "RM_FreeModuleUser",
        "params": "(RedisModuleUser *user)",
        "start_line": 5448,
        "end_line": 5452
      },
      {
        "method_name": "RM_SetModuleUserACL",
        "params": "(RedisModuleUser *user, const char* acl)",
        "start_line": 5461,
        "end_line": 5463
      },
      {
        "method_name": "authenticateClientWithUser",
        "params": "(RedisModuleCtx *ctx, user *user, RedisModuleUserChangedFunc callback, void *privdata, uint64_t *client_id)",
        "start_line": 5485,
        "end_line": 5506
      },
      {
        "method_name": "RM_AuthenticateClientWithUser",
        "params": "(RedisModuleCtx *ctx, RedisModuleUser *module_user, RedisModuleUserChangedFunc callback, void *privdata, uint64_t *client_id)",
        "start_line": 5514,
        "end_line": 5516
      },
      {
        "method_name": "RM_AuthenticateClientWithACLUser",
        "params": "(RedisModuleCtx *ctx, const char *name, size_t len, RedisModuleUserChangedFunc callback, void *privdata, uint64_t *client_id)",
        "start_line": 5523,
        "end_line": 5530
      },
      {
        "method_name": "RM_DeauthenticateAndCloseClient",
        "params": "(RedisModuleCtx *ctx, uint64_t client_id)",
        "start_line": 5544,
        "end_line": 5552
      },
      {
        "method_name": "*RM_CreateDict",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 5575,
        "end_line": 5580
      },
      {
        "method_name": "RM_FreeDict",
        "params": "(RedisModuleCtx *ctx, RedisModuleDict *d)",
        "start_line": 5585,
        "end_line": 5589
      },
      {
        "method_name": "RM_DictSize",
        "params": "(RedisModuleDict *d)",
        "start_line": 5592,
        "end_line": 5594
      },
      {
        "method_name": "RM_DictSetC",
        "params": "(RedisModuleDict *d, void *key, size_t keylen, void *ptr)",
        "start_line": 5600,
        "end_line": 5603
      },
      {
        "method_name": "RM_DictReplaceC",
        "params": "(RedisModuleDict *d, void *key, size_t keylen, void *ptr)",
        "start_line": 5607,
        "end_line": 5610
      },
      {
        "method_name": "RM_DictSet",
        "params": "(RedisModuleDict *d, RedisModuleString *key, void *ptr)",
        "start_line": 5613,
        "end_line": 5615
      },
      {
        "method_name": "RM_DictReplace",
        "params": "(RedisModuleDict *d, RedisModuleString *key, void *ptr)",
        "start_line": 5618,
        "end_line": 5620
      },
      {
        "method_name": "*RM_DictGetC",
        "params": "(RedisModuleDict *d, void *key, size_t keylen, int *nokey)",
        "start_line": 5627,
        "end_line": 5631
      },
      {
        "method_name": "*RM_DictGet",
        "params": "(RedisModuleDict *d, RedisModuleString *key, int *nokey)",
        "start_line": 5634,
        "end_line": 5636
      },
      {
        "method_name": "RM_DictDelC",
        "params": "(RedisModuleDict *d, void *key, size_t keylen, void *oldval)",
        "start_line": 5645,
        "end_line": 5648
      },
      {
        "method_name": "RM_DictDel",
        "params": "(RedisModuleDict *d, RedisModuleString *key, void *oldval)",
        "start_line": 5651,
        "end_line": 5653
      },
      {
        "method_name": "*RM_DictIteratorStartC",
        "params": "(RedisModuleDict *d, const char *op, void *key, size_t keylen)",
        "start_line": 5675,
        "end_line": 5681
      },
      {
        "method_name": "*RM_DictIteratorStart",
        "params": "(RedisModuleDict *d, const char *op, RedisModuleString *key)",
        "start_line": 5685,
        "end_line": 5687
      },
      {
        "method_name": "RM_DictIteratorStop",
        "params": "(RedisModuleDictIter *di)",
        "start_line": 5691,
        "end_line": 5694
      },
      {
        "method_name": "RM_DictIteratorReseekC",
        "params": "(RedisModuleDictIter *di, const char *op, void *key, size_t keylen)",
        "start_line": 5703,
        "end_line": 5705
      },
      {
        "method_name": "RM_DictIteratorReseek",
        "params": "(RedisModuleDictIter *di, const char *op, RedisModuleString *key)",
        "start_line": 5709,
        "end_line": 5711
      },
      {
        "method_name": "RedisModule_DictNextC",
        "params": "(iter,\u0026keylen,\u0026data)) != NULL)",
        "start_line": 5726,
        "end_line": 5728
      },
      {
        "method_name": "*RM_DictNextC",
        "params": "(RedisModuleDictIter *di, size_t *keylen, void **dataptr)",
        "start_line": 5738,
        "end_line": 5743
      },
      {
        "method_name": "*RM_DictPrevC",
        "params": "(RedisModuleDictIter *di, size_t *keylen, void **dataptr)",
        "start_line": 5748,
        "end_line": 5753
      },
      {
        "method_name": "*RM_DictNext",
        "params": "(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr)",
        "start_line": 5762,
        "end_line": 5767
      },
      {
        "method_name": "*RM_DictPrev",
        "params": "(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr)",
        "start_line": 5772,
        "end_line": 5777
      },
      {
        "method_name": "RM_DictCompareC",
        "params": "(RedisModuleDictIter *di, const char *op, void *key, size_t keylen)",
        "start_line": 5791,
        "end_line": 5795
      },
      {
        "method_name": "RM_DictCompare",
        "params": "(RedisModuleDictIter *di, const char *op, RedisModuleString *key)",
        "start_line": 5799,
        "end_line": 5803
      },
      {
        "method_name": "RM_InfoAddSection",
        "params": "(RedisModuleInfoCtx *ctx, char *name)",
        "start_line": 5818,
        "end_line": 5844
      },
      {
        "method_name": "RM_InfoBeginDictField",
        "params": "(RedisModuleInfoCtx *ctx, char *name)",
        "start_line": 5849,
        "end_line": 5861
      },
      {
        "method_name": "RM_InfoEndDictField",
        "params": "(RedisModuleInfoCtx *ctx)",
        "start_line": 5864,
        "end_line": 5873
      },
      {
        "method_name": "RM_InfoAddFieldString",
        "params": "(RedisModuleInfoCtx *ctx, char *field, RedisModuleString *value)",
        "start_line": 5878,
        "end_line": 5894
      },
      {
        "method_name": "RM_InfoAddFieldCString",
        "params": "(RedisModuleInfoCtx *ctx, char *field, char *value)",
        "start_line": 5896,
        "end_line": 5912
      },
      {
        "method_name": "RM_InfoAddFieldDouble",
        "params": "(RedisModuleInfoCtx *ctx, char *field, double value)",
        "start_line": 5914,
        "end_line": 5930
      },
      {
        "method_name": "RM_InfoAddFieldLongLong",
        "params": "(RedisModuleInfoCtx *ctx, char *field, long long value)",
        "start_line": 5932,
        "end_line": 5948
      },
      {
        "method_name": "RM_InfoAddFieldULongLong",
        "params": "(RedisModuleInfoCtx *ctx, char *field, unsigned long long value)",
        "start_line": 5950,
        "end_line": 5966
      },
      {
        "method_name": "RM_RegisterInfoFunc",
        "params": "(RedisModuleCtx *ctx, RedisModuleInfoFunc cb)",
        "start_line": 5968,
        "end_line": 5971
      },
      {
        "method_name": "modulesCollectInfo",
        "params": "(sds info, const char *section, int for_crash_report, int sections)",
        "start_line": 5973,
        "end_line": 5991
      },
      {
        "method_name": "*RM_GetServerInfo",
        "params": "(RedisModuleCtx *ctx, const char *section)",
        "start_line": 5999,
        "end_line": 6020
      },
      {
        "method_name": "RM_FreeServerInfo",
        "params": "(RedisModuleCtx *ctx, RedisModuleServerInfoData *data)",
        "start_line": 6025,
        "end_line": 6038
      },
      {
        "method_name": "*RM_ServerInfoGetField",
        "params": "(RedisModuleCtx *ctx, RedisModuleServerInfoData *data, const char* field)",
        "start_line": 6044,
        "end_line": 6050
      },
      {
        "method_name": "*RM_ServerInfoGetFieldC",
        "params": "(RedisModuleServerInfoData *data, const char* field)",
        "start_line": 6053,
        "end_line": 6057
      },
      {
        "method_name": "RM_ServerInfoGetFieldSigned",
        "params": "(RedisModuleServerInfoData *data, const char* field, int *out_err)",
        "start_line": 6062,
        "end_line": 6075
      },
      {
        "method_name": "RM_ServerInfoGetFieldUnsigned",
        "params": "(RedisModuleServerInfoData *data, const char* field, int *out_err)",
        "start_line": 6080,
        "end_line": 6093
      },
      {
        "method_name": "RM_ServerInfoGetFieldDouble",
        "params": "(RedisModuleServerInfoData *data, const char* field, int *out_err)",
        "start_line": 6098,
        "end_line": 6111
      },
      {
        "method_name": "RM_GetRandomBytes",
        "params": "(unsigned char *dst, size_t len)",
        "start_line": 6121,
        "end_line": 6123
      },
      {
        "method_name": "RM_GetRandomHexChars",
        "params": "(char *dst, size_t len)",
        "start_line": 6128,
        "end_line": 6130
      },
      {
        "method_name": "RM_ExportSharedAPI",
        "params": "(RedisModuleCtx *ctx, const char *apiname, void *func)",
        "start_line": 6148,
        "end_line": 6157
      },
      {
        "method_name": "myCommandImplementation",
        "params": "()",
        "start_line": 6172,
        "end_line": 6178
      },
      {
        "method_name": "getExternalAPIs",
        "params": "(void)",
        "start_line": 6182,
        "end_line": 6190
      },
      {
        "method_name": "*RM_GetSharedAPI",
        "params": "(RedisModuleCtx *ctx, const char *apiname)",
        "start_line": 6192,
        "end_line": 6201
      },
      {
        "method_name": "moduleUnregisterSharedAPI",
        "params": "(RedisModule *module)",
        "start_line": 6209,
        "end_line": 6224
      },
      {
        "method_name": "moduleUnregisterUsedAPI",
        "params": "(RedisModule *module)",
        "start_line": 6230,
        "end_line": 6245
      },
      {
        "method_name": "moduleUnregisterFilters",
        "params": "(RedisModule *module)",
        "start_line": 6251,
        "end_line": 6267
      },
      {
        "method_name": "*RM_RegisterCommandFilter",
        "params": "(RedisModuleCtx *ctx, RedisModuleCommandFilterFunc callback, int flags)",
        "start_line": 6325,
        "end_line": 6334
      },
      {
        "method_name": "RM_UnregisterCommandFilter",
        "params": "(RedisModuleCtx *ctx, RedisModuleCommandFilter *filter)",
        "start_line": 6338,
        "end_line": 6355
      },
      {
        "method_name": "moduleCallCommandFilters",
        "params": "(client *c)",
        "start_line": 6357,
        "end_line": 6383
      },
      {
        "method_name": "RM_CommandFilterArgsCount",
        "params": "(RedisModuleCommandFilterCtx *fctx)",
        "start_line": 6389,
        "end_line": 6391
      },
      {
        "method_name": "*RM_CommandFilterArgGet",
        "params": "(RedisModuleCommandFilterCtx *fctx, int pos)",
        "start_line": 6397,
        "end_line": 6400
      },
      {
        "method_name": "RM_CommandFilterArgInsert",
        "params": "(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg)",
        "start_line": 6409,
        "end_line": 6422
      },
      {
        "method_name": "RM_CommandFilterArgReplace",
        "params": "(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg)",
        "start_line": 6431,
        "end_line": 6438
      },
      {
        "method_name": "RM_CommandFilterArgDelete",
        "params": "(RedisModuleCommandFilterCtx *fctx, int pos)",
        "start_line": 6444,
        "end_line": 6455
      },
      {
        "method_name": "RM_MallocSize",
        "params": "(void* ptr)",
        "start_line": 6463,
        "end_line": 6465
      },
      {
        "method_name": "RM_GetUsedMemoryRatio",
        "params": "()",
        "start_line": 6475,
        "end_line": 6479
      },
      {
        "method_name": "moduleScanCallback",
        "params": "(void *privdata, const dictEntry *de)",
        "start_line": 6497,
        "end_line": 6511
      },
      {
        "method_name": "*RM_ScanCursorCreate",
        "params": "()",
        "start_line": 6514,
        "end_line": 6519
      },
      {
        "method_name": "RM_ScanCursorRestart",
        "params": "(RedisModuleScanCursor *cursor)",
        "start_line": 6522,
        "end_line": 6525
      },
      {
        "method_name": "RM_ScanCursorDestroy",
        "params": "(RedisModuleScanCursor *cursor)",
        "start_line": 6528,
        "end_line": 6530
      },
      {
        "method_name": "while(RedisModule_Scan",
        "params": "(ctx, c, callback, privateData))",
        "start_line": 6560,
        "end_line": 6564
      },
      {
        "method_name": "RM_Scan",
        "params": "(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor, RedisModuleScanCB fn, void *privdata)",
        "start_line": 6587,
        "end_line": 6601
      },
      {
        "method_name": "moduleScanKeyCallback",
        "params": "(void *privdata, const dictEntry *de)",
        "start_line": 6610,
        "end_line": 6629
      },
      {
        "method_name": "while(RedisModule_ScanKey",
        "params": "(ctx, c, callback, privateData))",
        "start_line": 6654,
        "end_line": 6660
      },
      {
        "method_name": "RM_ScanKey",
        "params": "(RedisModuleKey *key, RedisModuleScanCursor *cursor, RedisModuleScanKeyCB fn, void *privdata)",
        "start_line": 6675,
        "end_line": 6744
      },
      {
        "method_name": "RM_Fork",
        "params": "(RedisModuleForkDoneHandler cb, void *user_data)",
        "start_line": 6762,
        "end_line": 6783
      },
      {
        "method_name": "RM_ExitFromChild",
        "params": "(int retcode)",
        "start_line": 6788,
        "end_line": 6792
      },
      {
        "method_name": "TerminateModuleForkChild",
        "params": "(int child_pid, int wait)",
        "start_line": 6797,
        "end_line": 6816
      },
      {
        "method_name": "RM_KillForkChild",
        "params": "(int child_pid)",
        "start_line": 6820,
        "end_line": 6826
      },
      {
        "method_name": "ModuleForkDoneHandler",
        "params": "(int exitcode, int bysignal)",
        "start_line": 6828,
        "end_line": 6839
      },
      {
        "method_name": "RM_SubscribeToServerEvent",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent event, RedisModuleEventCallback callback)",
        "start_line": 7047,
        "end_line": 7081
      },
      {
        "method_name": "moduleFireServerEvent",
        "params": "(uint64_t eid, int subid, void *data)",
        "start_line": 7090,
        "end_line": 7160
      },
      {
        "method_name": "moduleUnsubscribeAllServerEvents",
        "params": "(RedisModule *module)",
        "start_line": 7164,
        "end_line": 7177
      },
      {
        "method_name": "processModuleLoadingProgressEvent",
        "params": "(int is_aof)",
        "start_line": 7179,
        "end_line": 7198
      },
      {
        "method_name": "dictCStringKeyHash",
        "params": "(const void *key)",
        "start_line": 7207,
        "end_line": 7209
      },
      {
        "method_name": "dictCStringKeyCompare",
        "params": "(void *privdata, const void *key1, const void *key2)",
        "start_line": 7211,
        "end_line": 7214
      },
      {
        "method_name": "moduleRegisterApi",
        "params": "(const char *funcname, void *funcptr)",
        "start_line": 7225,
        "end_line": 7227
      },
      {
        "method_name": "moduleInitModulesSystem",
        "params": "(void)",
        "start_line": 7235,
        "end_line": 7270
      },
      {
        "method_name": "moduleLoadFromQueue",
        "params": "(void)",
        "start_line": 7281,
        "end_line": 7297
      },
      {
        "method_name": "moduleFreeModuleStructure",
        "params": "(struct RedisModule *module)",
        "start_line": 7299,
        "end_line": 7306
      },
      {
        "method_name": "moduleUnregisterCommands",
        "params": "(struct RedisModule *module)",
        "start_line": 7308,
        "end_line": 7328
      },
      {
        "method_name": "moduleLoad",
        "params": "(const char *path, void **module_argv, int module_argc)",
        "start_line": 7332,
        "end_line": 7386
      },
      {
        "method_name": "moduleUnload",
        "params": "(sds name)",
        "start_line": 7395,
        "end_line": 7459
      },
      {
        "method_name": "addReplyLoadedModules",
        "params": "(client *c)",
        "start_line": 7463,
        "end_line": 7478
      },
      {
        "method_name": "genModulesInfoStringRenderModulesList",
        "params": "(list *l)",
        "start_line": 7482,
        "end_line": 7494
      },
      {
        "method_name": "genModulesInfoStringRenderModuleOptions",
        "params": "(struct RedisModule *module)",
        "start_line": 7497,
        "end_line": 7504
      },
      {
        "method_name": "genModulesInfoString",
        "params": "(sds info)",
        "start_line": 7512,
        "end_line": 7534
      },
      {
        "method_name": "moduleCommand",
        "params": "(client *c)",
        "start_line": 7539,
        "end_line": 7597
      },
      {
        "method_name": "moduleCount",
        "params": "(void)",
        "start_line": 7600,
        "end_line": 7602
      },
      {
        "method_name": "RM_SetLRU",
        "params": "(RedisModuleKey *key, mstime_t lru_idle)",
        "start_line": 7607,
        "end_line": 7613
      },
      {
        "method_name": "RM_GetLRU",
        "params": "(RedisModuleKey *key, mstime_t *lru_idle)",
        "start_line": 7619,
        "end_line": 7627
      },
      {
        "method_name": "RM_SetLFU",
        "params": "(RedisModuleKey *key, long long lfu_freq)",
        "start_line": 7634,
        "end_line": 7640
      },
      {
        "method_name": "RM_GetLFU",
        "params": "(RedisModuleKey *key, long long *lfu_freq)",
        "start_line": 7645,
        "end_line": 7652
      },
      {
        "method_name": "RM_ModuleTypeReplaceValue",
        "params": "(RedisModuleKey *key, moduleType *mt, void *new_value, void **old_value)",
        "start_line": 7671,
        "end_line": 7686
      },
      {
        "method_name": "moduleRegisterCoreAPI",
        "params": "(void)",
        "start_line": 7690,
        "end_line": 7921
      }
    ],
    "structs": [
      {
        "struct_name": "RedisModuleInfoCtx",
        "start_line": 43,
        "end_line": 50
      },
      {
        "struct_name": "RedisModule",
        "start_line": 55,
        "end_line": 69
      },
      {
        "struct_name": "RedisModuleSharedAPI",
        "start_line": 76,
        "end_line": 79
      },
      {
        "struct_name": "AutoMemEntry",
        "start_line": 86,
        "end_line": 89
      },
      {
        "struct_name": "RedisModulePoolAllocBlock",
        "start_line": 115,
        "end_line": 120
      },
      {
        "struct_name": "RedisModuleCtx",
        "start_line": 132,
        "end_line": 158
      },
      {
        "struct_name": "RedisModuleKey",
        "start_line": 172,
        "end_line": 189
      },
      {
        "struct_name": "RedisModuleCommandProxy",
        "start_line": 205,
        "end_line": 209
      },
      {
        "struct_name": "RedisModuleCallReply",
        "start_line": 220,
        "end_line": 235
      },
      {
        "struct_name": "RedisModuleBlockedClient",
        "start_line": 239,
        "end_line": 255
      },
      {
        "struct_name": "RedisModuleKeyspaceSubscriber",
        "start_line": 270,
        "end_line": 280
      },
      {
        "struct_name": "RedisModuleDict",
        "start_line": 292,
        "end_line": 294
      },
      {
        "struct_name": "RedisModuleDictIter",
        "start_line": 296,
        "end_line": 299
      },
      {
        "struct_name": "RedisModuleCommandFilterCtx",
        "start_line": 301,
        "end_line": 304
      },
      {
        "struct_name": "RedisModuleCommandFilter",
        "start_line": 308,
        "end_line": 315
      },
      {
        "struct_name": "RedisModuleForkInfo",
        "start_line": 322,
        "end_line": 325
      },
      {
        "struct_name": "RedisModuleServerInfoData",
        "start_line": 327,
        "end_line": 329
      },
      {
        "struct_name": "RedisModuleEventListener",
        "start_line": 348,
        "end_line": 352
      },
      {
        "struct_name": "RedisModuleUser",
        "start_line": 368,
        "end_line": 370
      },
      {
        "struct_name": "moduleClusterReceiver",
        "start_line": 4961,
        "end_line": 4966
      },
      {
        "struct_name": "moduleClusterNodeInfo",
        "start_line": 4968,
        "end_line": 4973
      },
      {
        "struct_name": "RedisModuleTimer",
        "start_line": 5232,
        "end_line": 5237
      },
      {
        "struct_name": "",
        "start_line": 6486,
        "end_line": 6490
      },
      {
        "struct_name": "RedisModuleScanCursor",
        "start_line": 6492,
        "end_line": 6495
      },
      {
        "struct_name": "",
        "start_line": 6604,
        "end_line": 6608
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/helloacl.c",
    "line": 191,
    "headers": [
      "../redismodule.h",
      "pthread.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "RevokeCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 45,
        "end_line": 55
      },
      {
        "method_name": "ResetCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 59,
        "end_line": 70
      },
      {
        "method_name": "HelloACL_UserChanged",
        "params": "(uint64_t client_id, void *privdata)",
        "start_line": 74,
        "end_line": 78
      },
      {
        "method_name": "AuthGlobalCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 82,
        "end_line": 93
      },
      {
        "method_name": "HelloACL_Reply",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 98,
        "end_line": 111
      },
      {
        "method_name": "HelloACL_Timeout",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 114,
        "end_line": 118
      },
      {
        "method_name": "HelloACL_FreeData",
        "params": "(RedisModuleCtx *ctx, void *privdata)",
        "start_line": 121,
        "end_line": 124
      },
      {
        "method_name": "*HelloACL_ThreadMain",
        "params": "(void *args)",
        "start_line": 127,
        "end_line": 135
      },
      {
        "method_name": "AuthAsyncCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 139,
        "end_line": 156
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 160,
        "end_line": 191
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/helloblock.c",
    "line": 219,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "pthread.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "HelloBlock_Reply",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 42,
        "end_line": 47
      },
      {
        "method_name": "HelloBlock_Timeout",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 50,
        "end_line": 54
      },
      {
        "method_name": "HelloBlock_FreeData",
        "params": "(RedisModuleCtx *ctx, void *privdata)",
        "start_line": 57,
        "end_line": 60
      },
      {
        "method_name": "*HelloBlock_ThreadMain",
        "params": "(void *arg)",
        "start_line": 64,
        "end_line": 75
      },
      {
        "method_name": "HelloBlock_Disconnected",
        "params": "(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc)",
        "start_line": 85,
        "end_line": 92
      },
      {
        "method_name": "HelloBlock_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 97,
        "end_line": 130
      },
      {
        "method_name": "*HelloKeys_ThreadMain",
        "params": "(void *arg)",
        "start_line": 139,
        "end_line": 175
      },
      {
        "method_name": "HelloKeys_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 181,
        "end_line": 200
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 204,
        "end_line": 219
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/hellocluster.c",
    "line": 118,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "ctype.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "PingallCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 44,
        "end_line": 50
      },
      {
        "method_name": "ListCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 53,
        "end_line": 73
      },
      {
        "method_name": "PingReceiver",
        "params": "(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len)",
        "start_line": 76,
        "end_line": 81
      },
      {
        "method_name": "PongReceiver",
        "params": "(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len)",
        "start_line": 84,
        "end_line": 87
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 91,
        "end_line": 118
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/hellodict.c",
    "line": 132,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "ctype.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "cmd_SET",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 48,
        "end_line": 55
      },
      {
        "method_name": "cmd_GET",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 61,
        "end_line": 69
      },
      {
        "method_name": "cmd_KEYRANGE",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 75,
        "end_line": 105
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 109,
        "end_line": 132
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/hellohook.c",
    "line": 93,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "ctype.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "clientChangeCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 42,
        "end_line": 51
      },
      {
        "method_name": "flushdbCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 54,
        "end_line": 77
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 81,
        "end_line": 93
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/hellotimer.c",
    "line": 76,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "ctype.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "timerHandler",
        "params": "(RedisModuleCtx *ctx, void *data)",
        "start_line": 41,
        "end_line": 45
      },
      {
        "method_name": "TimerCommand_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 48,
        "end_line": 60
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 64,
        "end_line": 76
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/hellotype.c",
    "line": 362,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "ctype.h",
      "string.h",
      "stdint.h"
    ],
    "methods": [
      {
        "method_name": "*createHelloTypeObject",
        "params": "(void)",
        "start_line": 63,
        "end_line": 69
      },
      {
        "method_name": "HelloTypeInsert",
        "params": "(struct HelloTypeObject *o, int64_t ele)",
        "start_line": 71,
        "end_line": 87
      },
      {
        "method_name": "HelloTypeReleaseObject",
        "params": "(struct HelloTypeObject *o)",
        "start_line": 89,
        "end_line": 98
      },
      {
        "method_name": "HelloTypeInsert_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 103,
        "end_line": 137
      },
      {
        "method_name": "HelloTypeRange_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 140,
        "end_line": 173
      },
      {
        "method_name": "HelloTypeLen_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 176,
        "end_line": 192
      },
      {
        "method_name": "HelloBlock_Reply",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 199,
        "end_line": 217
      },
      {
        "method_name": "HelloBlock_Timeout",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 220,
        "end_line": 224
      },
      {
        "method_name": "HelloBlock_FreeData",
        "params": "(RedisModuleCtx *ctx, void *privdata)",
        "start_line": 227,
        "end_line": 230
      },
      {
        "method_name": "HelloTypeBRange_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 235,
        "end_line": 264
      },
      {
        "method_name": "*HelloTypeRdbLoad",
        "params": "(RedisModuleIO *rdb, int encver)",
        "start_line": 268,
        "end_line": 280
      },
      {
        "method_name": "HelloTypeRdbSave",
        "params": "(RedisModuleIO *rdb, void *value)",
        "start_line": 282,
        "end_line": 290
      },
      {
        "method_name": "HelloTypeAofRewrite",
        "params": "(RedisModuleIO *aof, RedisModuleString *key, void *value)",
        "start_line": 292,
        "end_line": 299
      },
      {
        "method_name": "HelloTypeMemUsage",
        "params": "(const void *value)",
        "start_line": 303,
        "end_line": 307
      },
      {
        "method_name": "HelloTypeFree",
        "params": "(void *value)",
        "start_line": 309,
        "end_line": 311
      },
      {
        "method_name": "HelloTypeDigest",
        "params": "(RedisModuleDigest *md, void *value)",
        "start_line": 313,
        "end_line": 321
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 325,
        "end_line": 362
      }
    ],
    "structs": [
      {
        "struct_name": "HelloTypeNode",
        "start_line": 53,
        "end_line": 56
      },
      {
        "struct_name": "HelloTypeObject",
        "start_line": 58,
        "end_line": 61
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/helloworld.c",
    "line": 621,
    "headers": [
      "../redismodule.h",
      "stdio.h",
      "stdlib.h",
      "ctype.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "HelloSimple_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 48,
        "end_line": 53
      },
      {
        "method_name": "HelloPushNative_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 62,
        "end_line": 73
      },
      {
        "method_name": "HelloPushCall_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 81,
        "end_line": 91
      },
      {
        "method_name": "HelloPushCall2_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 97,
        "end_line": 106
      },
      {
        "method_name": "HelloListSumLen_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 112,
        "end_line": 128
      },
      {
        "method_name": "HelloListSplice_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 134,
        "end_line": 175
      },
      {
        "method_name": "HelloListSpliceAuto_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 179,
        "end_line": 216
      },
      {
        "method_name": "HelloRandArray_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 221,
        "end_line": 234
      },
      {
        "method_name": "HelloRepl1_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 241,
        "end_line": 266
      },
      {
        "method_name": "HelloRepl2_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 278,
        "end_line": 304
      },
      {
        "method_name": "HelloToggleCase_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 314,
        "end_line": 344
      },
      {
        "method_name": "HelloMoreExpire_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 350,
        "end_line": 367
      },
      {
        "method_name": "HelloZsumRange_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 375,
        "end_line": 421
      },
      {
        "method_name": "HelloLexRange_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 430,
        "end_line": 459
      },
      {
        "method_name": "HelloHCopy_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 468,
        "end_line": 489
      },
      {
        "method_name": "HelloLeftPad_RedisCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 509,
        "end_line": 541
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 545,
        "end_line": 621
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/modules/testmodule.c",
    "line": 460,
    "headers": [
      "../redismodule.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "TestMatchReply",
        "params": "(RedisModuleCallReply *reply, char *str)",
        "start_line": 40,
        "end_line": 46
      },
      {
        "method_name": "TestCall",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 51,
        "end_line": 78
      },
      {
        "method_name": "TestStringAppend",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 81,
        "end_line": 90
      },
      {
        "method_name": "TestStringAppendAM",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 93,
        "end_line": 104
      },
      {
        "method_name": "TestStringPrintf",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 107,
        "end_line": 122
      },
      {
        "method_name": "failTest",
        "params": "(RedisModuleCtx *ctx, const char *msg)",
        "start_line": 124,
        "end_line": 127
      },
      {
        "method_name": "TestUnlink",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 129,
        "end_line": 156
      },
      {
        "method_name": "NotifyCallback",
        "params": "(RedisModuleCtx *ctx, int type, const char *event,\n                   RedisModuleString *key)",
        "start_line": 159,
        "end_line": 167
      },
      {
        "method_name": "TestNotifications",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 170,
        "end_line": 249
      },
      {
        "method_name": "TestCtxFlags",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 252,
        "end_line": 318
      },
      {
        "method_name": "TestAssertStringReply",
        "params": "(RedisModuleCtx *ctx, RedisModuleCallReply *reply, char *str, size_t len)",
        "start_line": 324,
        "end_line": 343
      },
      {
        "method_name": "TestAssertIntegerReply",
        "params": "(RedisModuleCtx *ctx, RedisModuleCallReply *reply, long long expected)",
        "start_line": 347,
        "end_line": 361
      },
      {
        "method_name": "TestIt",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 370,
        "end_line": 412
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 414,
        "end_line": 460
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/multi.c",
    "line": 385,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "initClientMultiState",
        "params": "(client *c)",
        "start_line": 35,
        "end_line": 40
      },
      {
        "method_name": "freeClientMultiState",
        "params": "(client *c)",
        "start_line": 43,
        "end_line": 55
      },
      {
        "method_name": "queueMultiCommand",
        "params": "(client *c)",
        "start_line": 58,
        "end_line": 81
      },
      {
        "method_name": "discardTransaction",
        "params": "(client *c)",
        "start_line": 83,
        "end_line": 88
      },
      {
        "method_name": "flagTransaction",
        "params": "(client *c)",
        "start_line": 92,
        "end_line": 95
      },
      {
        "method_name": "multiCommand",
        "params": "(client *c)",
        "start_line": 97,
        "end_line": 104
      },
      {
        "method_name": "discardCommand",
        "params": "(client *c)",
        "start_line": 106,
        "end_line": 113
      },
      {
        "method_name": "execCommandPropagateMulti",
        "params": "(client *c)",
        "start_line": 117,
        "end_line": 120
      },
      {
        "method_name": "execCommandPropagateExec",
        "params": "(client *c)",
        "start_line": 122,
        "end_line": 125
      },
      {
        "method_name": "execCommandAbort",
        "params": "(client *c, sds error)",
        "start_line": 131,
        "end_line": 142
      },
      {
        "method_name": "execCommand",
        "params": "(client *c)",
        "start_line": 144,
        "end_line": 244
      },
      {
        "method_name": "watchForKey",
        "params": "(client *c, robj *key)",
        "start_line": 264,
        "end_line": 291
      },
      {
        "method_name": "unwatchAllKeys",
        "params": "(client *c)",
        "start_line": 295,
        "end_line": 319
      },
      {
        "method_name": "touchWatchedKey",
        "params": "(redisDb *db, robj *key)",
        "start_line": 323,
        "end_line": 340
      },
      {
        "method_name": "touchWatchedKeysOnFlush",
        "params": "(int dbid)",
        "start_line": 346,
        "end_line": 367
      },
      {
        "method_name": "watchCommand",
        "params": "(client *c)",
        "start_line": 369,
        "end_line": 379
      },
      {
        "method_name": "unwatchCommand",
        "params": "(client *c)",
        "start_line": 381,
        "end_line": 385
      }
    ],
    "structs": [
      {
        "struct_name": "watchedKey",
        "start_line": 258,
        "end_line": 261
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/networking.c",
    "line": 3194,
    "headers": [
      "server.h",
      "atomicvar.h",
      "cluster.h",
      "sys/socket.h",
      "sys/uio.h",
      "math.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "sdsZmallocSize",
        "params": "(sds s)",
        "start_line": 45,
        "end_line": 48
      },
      {
        "method_name": "getStringObjectSdsUsedMemory",
        "params": "(robj *o)",
        "start_line": 52,
        "end_line": 59
      },
      {
        "method_name": "*dupClientReplyValue",
        "params": "(void *o)",
        "start_line": 62,
        "end_line": 67
      },
      {
        "method_name": "freeClientReplyValue",
        "params": "(void *o)",
        "start_line": 69,
        "end_line": 71
      },
      {
        "method_name": "listMatchObjects",
        "params": "(void *a, void *b)",
        "start_line": 73,
        "end_line": 75
      },
      {
        "method_name": "linkClient",
        "params": "(client *c)",
        "start_line": 79,
        "end_line": 87
      },
      {
        "method_name": "*createClient",
        "params": "(connection *conn)",
        "start_line": 89,
        "end_line": 171
      },
      {
        "method_name": "clientInstallWriteHandler",
        "params": "(client *c)",
        "start_line": 180,
        "end_line": 197
      },
      {
        "method_name": "prepareClientToWrite",
        "params": "(client *c)",
        "start_line": 221,
        "end_line": 242
      },
      {
        "method_name": "_addReplyToBuffer",
        "params": "(client *c, const char *s, size_t len)",
        "start_line": 248,
        "end_line": 263
      },
      {
        "method_name": "_addReplyProtoToList",
        "params": "(client *c, const char *s, size_t len)",
        "start_line": 265,
        "end_line": 299
      },
      {
        "method_name": "addReply",
        "params": "(client *c, robj *obj)",
        "start_line": 307,
        "end_line": 324
      },
      {
        "method_name": "addReplySds",
        "params": "(client *c, sds s)",
        "start_line": 328,
        "end_line": 337
      },
      {
        "method_name": "addReplyProto",
        "params": "(client *c, const char *s, size_t len)",
        "start_line": 347,
        "end_line": 351
      },
      {
        "method_name": "addReplyErrorLength",
        "params": "(client *c, const char *s, size_t len)",
        "start_line": 361,
        "end_line": 404
      },
      {
        "method_name": "addReplyError",
        "params": "(client *c, const char *err)",
        "start_line": 406,
        "end_line": 408
      },
      {
        "method_name": "addReplyErrorSafe",
        "params": "(client *c, char *s, size_t len)",
        "start_line": 413,
        "end_line": 419
      },
      {
        "method_name": "addReplyErrorFormat",
        "params": "(client *c, const char *fmt, ...)",
        "start_line": 421,
        "end_line": 428
      },
      {
        "method_name": "addReplyStatusLength",
        "params": "(client *c, const char *s, size_t len)",
        "start_line": 430,
        "end_line": 434
      },
      {
        "method_name": "addReplyStatus",
        "params": "(client *c, const char *status)",
        "start_line": 436,
        "end_line": 438
      },
      {
        "method_name": "addReplyStatusFormat",
        "params": "(client *c, const char *fmt, ...)",
        "start_line": 440,
        "end_line": 447
      },
      {
        "method_name": "trimReplyUnusedTailSpace",
        "params": "(client *c)",
        "start_line": 452,
        "end_line": 475
      },
      {
        "method_name": "*addReplyDeferredLen",
        "params": "(client *c)",
        "start_line": 479,
        "end_line": 487
      },
      {
        "method_name": "setDeferredAggregateLen",
        "params": "(client *c, void *node, long length, char prefix)",
        "start_line": 490,
        "end_line": 529
      },
      {
        "method_name": "setDeferredArrayLen",
        "params": "(client *c, void *node, long length)",
        "start_line": 531,
        "end_line": 533
      },
      {
        "method_name": "setDeferredMapLen",
        "params": "(client *c, void *node, long length)",
        "start_line": 535,
        "end_line": 539
      },
      {
        "method_name": "setDeferredSetLen",
        "params": "(client *c, void *node, long length)",
        "start_line": 541,
        "end_line": 544
      },
      {
        "method_name": "setDeferredAttributeLen",
        "params": "(client *c, void *node, long length)",
        "start_line": 546,
        "end_line": 550
      },
      {
        "method_name": "setDeferredPushLen",
        "params": "(client *c, void *node, long length)",
        "start_line": 552,
        "end_line": 555
      },
      {
        "method_name": "addReplyDouble",
        "params": "(client *c, double d)",
        "start_line": 558,
        "end_line": 581
      },
      {
        "method_name": "addReplyHumanLongDouble",
        "params": "(client *c, long double d)",
        "start_line": 586,
        "end_line": 598
      },
      {
        "method_name": "addReplyLongLongWithPrefix",
        "params": "(client *c, long long ll, char prefix)",
        "start_line": 602,
        "end_line": 622
      },
      {
        "method_name": "addReplyLongLong",
        "params": "(client *c, long long ll)",
        "start_line": 624,
        "end_line": 631
      },
      {
        "method_name": "addReplyAggregateLen",
        "params": "(client *c, long length, int prefix)",
        "start_line": 633,
        "end_line": 638
      },
      {
        "method_name": "addReplyArrayLen",
        "params": "(client *c, long length)",
        "start_line": 640,
        "end_line": 642
      },
      {
        "method_name": "addReplyMapLen",
        "params": "(client *c, long length)",
        "start_line": 644,
        "end_line": 648
      },
      {
        "method_name": "addReplySetLen",
        "params": "(client *c, long length)",
        "start_line": 650,
        "end_line": 653
      },
      {
        "method_name": "addReplyAttributeLen",
        "params": "(client *c, long length)",
        "start_line": 655,
        "end_line": 659
      },
      {
        "method_name": "addReplyPushLen",
        "params": "(client *c, long length)",
        "start_line": 661,
        "end_line": 664
      },
      {
        "method_name": "addReplyNull",
        "params": "(client *c)",
        "start_line": 666,
        "end_line": 672
      },
      {
        "method_name": "addReplyBool",
        "params": "(client *c, int b)",
        "start_line": 674,
        "end_line": 680
      },
      {
        "method_name": "addReplyNullArray",
        "params": "(client *c)",
        "start_line": 686,
        "end_line": 692
      },
      {
        "method_name": "addReplyBulkLen",
        "params": "(client *c, robj *obj)",
        "start_line": 695,
        "end_line": 702
      },
      {
        "method_name": "addReplyBulk",
        "params": "(client *c, robj *obj)",
        "start_line": 705,
        "end_line": 709
      },
      {
        "method_name": "addReplyBulkCBuffer",
        "params": "(client *c, const void *p, size_t len)",
        "start_line": 712,
        "end_line": 716
      },
      {
        "method_name": "addReplyBulkSds",
        "params": "(client *c, sds s)",
        "start_line": 719,
        "end_line": 723
      },
      {
        "method_name": "addReplyBulkCString",
        "params": "(client *c, const char *s)",
        "start_line": 726,
        "end_line": 732
      },
      {
        "method_name": "addReplyBulkLongLong",
        "params": "(client *c, long long ll)",
        "start_line": 735,
        "end_line": 741
      },
      {
        "method_name": "addReplyVerbatim",
        "params": "(client *c, const char *s, size_t len, const char *ext)",
        "start_line": 752,
        "end_line": 770
      },
      {
        "method_name": "addReplyHelp",
        "params": "(client *c, const char **help)",
        "start_line": 776,
        "end_line": 790
      },
      {
        "method_name": "addReplySubcommandSyntaxError",
        "params": "(client *c)",
        "start_line": 795,
        "end_line": 802
      },
      {
        "method_name": "AddReplyFromClient",
        "params": "(client *dst, client *src)",
        "start_line": 806,
        "end_line": 815
      },
      {
        "method_name": "copyClientOutputBuffer",
        "params": "(client *dst, client *src)",
        "start_line": 820,
        "end_line": 827
      },
      {
        "method_name": "clientHasPendingReplies",
        "params": "(client *c)",
        "start_line": 831,
        "end_line": 833
      },
      {
        "method_name": "clientAcceptHandler",
        "params": "(connection *conn)",
        "start_line": 835,
        "end_line": 893
      },
      {
        "method_name": "acceptCommonHandler",
        "params": "(connection *conn, int flags, char *ip)",
        "start_line": 896,
        "end_line": 957
      },
      {
        "method_name": "acceptTcpHandler",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 959,
        "end_line": 977
      },
      {
        "method_name": "acceptTLSHandler",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 979,
        "end_line": 997
      },
      {
        "method_name": "acceptUnixHandler",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 999,
        "end_line": 1016
      },
      {
        "method_name": "freeClientArgv",
        "params": "(client *c)",
        "start_line": 1018,
        "end_line": 1024
      },
      {
        "method_name": "disconnectSlaves",
        "params": "(void)",
        "start_line": 1029,
        "end_line": 1036
      },
      {
        "method_name": "unlinkClient",
        "params": "(client *c)",
        "start_line": 1041,
        "end_line": 1105
      },
      {
        "method_name": "freeClient",
        "params": "(client *c)",
        "start_line": 1107,
        "end_line": 1225
      },
      {
        "method_name": "freeClientAsync",
        "params": "(client *c)",
        "start_line": 1231,
        "end_line": 1248
      },
      {
        "method_name": "freeClientsInAsyncFreeQueue",
        "params": "(void)",
        "start_line": 1252,
        "end_line": 1269
      },
      {
        "method_name": "*lookupClientByID",
        "params": "(uint64_t id)",
        "start_line": 1274,
        "end_line": 1278
      },
      {
        "method_name": "writeToClient",
        "params": "(client *c, int handler_installed)",
        "start_line": 1288,
        "end_line": 1382
      },
      {
        "method_name": "sendReplyToClient",
        "params": "(connection *conn)",
        "start_line": 1385,
        "end_line": 1388
      },
      {
        "method_name": "handleClientsWithPendingWrites",
        "params": "(void)",
        "start_line": 1394,
        "end_line": 1432
      },
      {
        "method_name": "resetClient",
        "params": "(client *c)",
        "start_line": 1435,
        "end_line": 1462
      },
      {
        "method_name": "protectClient",
        "params": "(client *c)",
        "start_line": 1477,
        "end_line": 1481
      },
      {
        "method_name": "unprotectClient",
        "params": "(client *c)",
        "start_line": 1484,
        "end_line": 1490
      },
      {
        "method_name": "processInlineBuffer",
        "params": "(client *c)",
        "start_line": 1499,
        "end_line": 1567
      },
      {
        "method_name": "setProtocolError",
        "params": "(const char *errstr, client *c)",
        "start_line": 1573,
        "end_line": 1600
      },
      {
        "method_name": "processMultibulkBuffer",
        "params": "(client *c)",
        "start_line": 1613,
        "end_line": 1746
      },
      {
        "method_name": "commandProcessed",
        "params": "(client *c)",
        "start_line": 1753,
        "end_line": 1784
      },
      {
        "method_name": "processCommandAndResetClient",
        "params": "(client *c)",
        "start_line": 1794,
        "end_line": 1806
      },
      {
        "method_name": "processInputBuffer",
        "params": "(client *c)",
        "start_line": 1812,
        "end_line": 1893
      },
      {
        "method_name": "readQueryFromClient",
        "params": "(connection *conn)",
        "start_line": 1895,
        "end_line": 1963
      },
      {
        "method_name": "getClientsMaxBuffers",
        "params": "(unsigned long *longest_output_list,\n                          unsigned long *biggest_input_buffer)",
        "start_line": 1966,
        "end_line": 1981
      },
      {
        "method_name": "genClientPeerId",
        "params": "(client *client, char *peerid,\n                            size_t peerid_len)",
        "start_line": 1995,
        "end_line": 2003
      },
      {
        "method_name": "*getClientPeerId",
        "params": "(client *c)",
        "start_line": 2009,
        "end_line": 2017
      },
      {
        "method_name": "catClientInfoString",
        "params": "(sds s, client *client)",
        "start_line": 2021,
        "end_line": 2073
      },
      {
        "method_name": "getAllClientsInfoString",
        "params": "(int type)",
        "start_line": 2075,
        "end_line": 2089
      },
      {
        "method_name": "clientSetNameOrReply",
        "params": "(client *c, robj *name)",
        "start_line": 2100,
        "end_line": 2127
      },
      {
        "method_name": "clientCommand",
        "params": "(client *c)",
        "start_line": 2129,
        "end_line": 2491
      },
      {
        "method_name": "helloCommand",
        "params": "(client *c)",
        "start_line": 2494,
        "end_line": 2559
      },
      {
        "method_name": "securityWarningCommand",
        "params": "(client *c)",
        "start_line": 2570,
        "end_line": 2579
      },
      {
        "method_name": "rewriteClientCommandVector",
        "params": "(client *c, int argc, ...)",
        "start_line": 2584,
        "end_line": 2609
      },
      {
        "method_name": "replaceClientCommandVector",
        "params": "(client *c, int argc, robj **argv)",
        "start_line": 2612,
        "end_line": 2619
      },
      {
        "method_name": "rewriteClientCommandArgument",
        "params": "(client *c, int i, robj *newval)",
        "start_line": 2632,
        "end_line": 2650
      },
      {
        "method_name": "getClientOutputBufferMemoryUsage",
        "params": "(client *c)",
        "start_line": 2658,
        "end_line": 2661
      },
      {
        "method_name": "getClientType",
        "params": "(client *c)",
        "start_line": 2672,
        "end_line": 2680
      },
      {
        "method_name": "getClientTypeByName",
        "params": "(char *name)",
        "start_line": 2682,
        "end_line": 2689
      },
      {
        "method_name": "*getClientTypeName",
        "params": "(int class)",
        "start_line": 2691,
        "end_line": 2699
      },
      {
        "method_name": "checkClientOutputBufferLimits",
        "params": "(client *c)",
        "start_line": 2707,
        "end_line": 2743
      },
      {
        "method_name": "asyncCloseClientOnOutputBufferLimitReached",
        "params": "(client *c)",
        "start_line": 2752,
        "end_line": 2763
      },
      {
        "method_name": "flushSlavesOutputBuffers",
        "params": "(void)",
        "start_line": 2769,
        "end_line": 2801
      },
      {
        "method_name": "pauseClients",
        "params": "(mstime_t end)",
        "start_line": 2820,
        "end_line": 2824
      },
      {
        "method_name": "clientsArePaused",
        "params": "(void)",
        "start_line": 2828,
        "end_line": 2851
      },
      {
        "method_name": "processEventsWhileBlocked",
        "params": "(void)",
        "start_line": 2865,
        "end_line": 2885
      },
      {
        "method_name": "*IOThreadMain",
        "params": "(void *myid)",
        "start_line": 2908,
        "end_line": 2955
      },
      {
        "method_name": "initThreadedIO",
        "params": "(void)",
        "start_line": 2958,
        "end_line": 2988
      },
      {
        "method_name": "startThreadedIO",
        "params": "(void)",
        "start_line": 2990,
        "end_line": 2997
      },
      {
        "method_name": "stopThreadedIO",
        "params": "(void)",
        "start_line": 2999,
        "end_line": 3011
      },
      {
        "method_name": "stopThreadedIOIfNeeded",
        "params": "(void)",
        "start_line": 3022,
        "end_line": 3034
      },
      {
        "method_name": "handleClientsWithPendingWritesUsingThreads",
        "params": "(void)",
        "start_line": 3036,
        "end_line": 3105
      },
      {
        "method_name": "postponeClientRead",
        "params": "(client *c)",
        "start_line": 3111,
        "end_line": 3123
      },
      {
        "method_name": "handleClientsWithPendingReadsUsingThreads",
        "params": "(void)",
        "start_line": 3131,
        "end_line": 3194
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/notify.c",
    "line": 140,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "keyspaceEventsStringToFlags",
        "params": "(char *classes)",
        "start_line": 40,
        "end_line": 63
      },
      {
        "method_name": "keyspaceEventsFlagsToString",
        "params": "(int flags)",
        "start_line": 69,
        "end_line": 90
      },
      {
        "method_name": "notifyKeyspaceEvent",
        "params": "(int type, char *event, robj *key, int dbid)",
        "start_line": 99,
        "end_line": 140
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/object.c",
    "line": 1431,
    "headers": [
      "server.h",
      "math.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "*createObject",
        "params": "(int type, void *ptr)",
        "start_line": 41,
        "end_line": 56
      },
      {
        "method_name": "*makeObjectShared",
        "params": "(robj *o)",
        "start_line": 69,
        "end_line": 73
      },
      {
        "method_name": "*createRawStringObject",
        "params": "(const char *ptr, size_t len)",
        "start_line": 77,
        "end_line": 79
      },
      {
        "method_name": "*createEmbeddedStringObject",
        "params": "(const char *ptr, size_t len)",
        "start_line": 84,
        "end_line": 110
      },
      {
        "method_name": "*createStringObject",
        "params": "(const char *ptr, size_t len)",
        "start_line": 119,
        "end_line": 124
      },
      {
        "method_name": "*createStringObjectFromLongLongWithOptions",
        "params": "(long long value, int valueobj)",
        "start_line": 133,
        "end_line": 157
      },
      {
        "method_name": "*createStringObjectFromLongLong",
        "params": "(long long value)",
        "start_line": 161,
        "end_line": 163
      },
      {
        "method_name": "*createStringObjectFromLongLongForValue",
        "params": "(long long value)",
        "start_line": 169,
        "end_line": 171
      },
      {
        "method_name": "*createStringObjectFromLongDouble",
        "params": "(long double value, int humanfriendly)",
        "start_line": 179,
        "end_line": 183
      },
      {
        "method_name": "*dupStringObject",
        "params": "(const robj *o)",
        "start_line": 193,
        "end_line": 212
      },
      {
        "method_name": "*createQuicklistObject",
        "params": "(void)",
        "start_line": 214,
        "end_line": 219
      },
      {
        "method_name": "*createZiplistObject",
        "params": "(void)",
        "start_line": 221,
        "end_line": 226
      },
      {
        "method_name": "*createSetObject",
        "params": "(void)",
        "start_line": 228,
        "end_line": 233
      },
      {
        "method_name": "*createIntsetObject",
        "params": "(void)",
        "start_line": 235,
        "end_line": 240
      },
      {
        "method_name": "*createHashObject",
        "params": "(void)",
        "start_line": 242,
        "end_line": 247
      },
      {
        "method_name": "*createZsetObject",
        "params": "(void)",
        "start_line": 249,
        "end_line": 258
      },
      {
        "method_name": "*createZsetZiplistObject",
        "params": "(void)",
        "start_line": 260,
        "end_line": 265
      },
      {
        "method_name": "*createStreamObject",
        "params": "(void)",
        "start_line": 267,
        "end_line": 272
      },
      {
        "method_name": "*createModuleObject",
        "params": "(moduleType *mt, void *value)",
        "start_line": 274,
        "end_line": 279
      },
      {
        "method_name": "freeStringObject",
        "params": "(robj *o)",
        "start_line": 281,
        "end_line": 285
      },
      {
        "method_name": "freeListObject",
        "params": "(robj *o)",
        "start_line": 287,
        "end_line": 293
      },
      {
        "method_name": "freeSetObject",
        "params": "(robj *o)",
        "start_line": 295,
        "end_line": 306
      },
      {
        "method_name": "freeZsetObject",
        "params": "(robj *o)",
        "start_line": 308,
        "end_line": 323
      },
      {
        "method_name": "freeHashObject",
        "params": "(robj *o)",
        "start_line": 325,
        "end_line": 337
      },
      {
        "method_name": "freeModuleObject",
        "params": "(robj *o)",
        "start_line": 339,
        "end_line": 343
      },
      {
        "method_name": "freeStreamObject",
        "params": "(robj *o)",
        "start_line": 345,
        "end_line": 347
      },
      {
        "method_name": "incrRefCount",
        "params": "(robj *o)",
        "start_line": 349,
        "end_line": 359
      },
      {
        "method_name": "decrRefCount",
        "params": "(robj *o)",
        "start_line": 361,
        "end_line": 378
      },
      {
        "method_name": "decrRefCountVoid",
        "params": "(void *o)",
        "start_line": 383,
        "end_line": 385
      },
      {
        "method_name": "*resetRefCount",
        "params": "(robj *obj)",
        "start_line": 399,
        "end_line": 402
      },
      {
        "method_name": "checkType",
        "params": "(client *c, robj *o, int type)",
        "start_line": 404,
        "end_line": 410
      },
      {
        "method_name": "isSdsRepresentableAsLongLong",
        "params": "(sds s, long long *llval)",
        "start_line": 412,
        "end_line": 414
      },
      {
        "method_name": "isObjectRepresentableAsLongLong",
        "params": "(robj *o, long long *llval)",
        "start_line": 416,
        "end_line": 424
      },
      {
        "method_name": "trimStringObjectIfNeeded",
        "params": "(robj *o)",
        "start_line": 430,
        "end_line": 436
      },
      {
        "method_name": "*tryObjectEncoding",
        "params": "(robj *o)",
        "start_line": 439,
        "end_line": 516
      },
      {
        "method_name": "*getDecodedObject",
        "params": "(robj *o)",
        "start_line": 520,
        "end_line": 536
      },
      {
        "method_name": "compareStringObjectsWithFlags",
        "params": "(robj *a, robj *b, int flags)",
        "start_line": 549,
        "end_line": 579
      },
      {
        "method_name": "compareStringObjects",
        "params": "(robj *a, robj *b)",
        "start_line": 582,
        "end_line": 584
      },
      {
        "method_name": "collateStringObjects",
        "params": "(robj *a, robj *b)",
        "start_line": 587,
        "end_line": 589
      },
      {
        "method_name": "equalStringObjects",
        "params": "(robj *a, robj *b)",
        "start_line": 595,
        "end_line": 604
      },
      {
        "method_name": "stringObjectLen",
        "params": "(robj *o)",
        "start_line": 606,
        "end_line": 613
      },
      {
        "method_name": "getDoubleFromObject",
        "params": "(const robj *o, double *target)",
        "start_line": 615,
        "end_line": 633
      },
      {
        "method_name": "getDoubleFromObjectOrReply",
        "params": "(client *c, robj *o, double *target, const char *msg)",
        "start_line": 635,
        "end_line": 647
      },
      {
        "method_name": "getLongDoubleFromObject",
        "params": "(robj *o, long double *target)",
        "start_line": 649,
        "end_line": 667
      },
      {
        "method_name": "getLongDoubleFromObjectOrReply",
        "params": "(client *c, robj *o, long double *target, const char *msg)",
        "start_line": 669,
        "end_line": 681
      },
      {
        "method_name": "getLongLongFromObject",
        "params": "(robj *o, long long *target)",
        "start_line": 683,
        "end_line": 700
      },
      {
        "method_name": "getLongLongFromObjectOrReply",
        "params": "(client *c, robj *o, long long *target, const char *msg)",
        "start_line": 702,
        "end_line": 714
      },
      {
        "method_name": "getLongFromObjectOrReply",
        "params": "(client *c, robj *o, long *target, const char *msg)",
        "start_line": 716,
        "end_line": 730
      },
      {
        "method_name": "*strEncoding",
        "params": "(int encoding)",
        "start_line": 732,
        "end_line": 744
      },
      {
        "method_name": "streamRadixTreeMemoryUsage",
        "params": "(rax *rax)",
        "start_line": 763,
        "end_line": 770
      },
      {
        "method_name": "objectComputeSize",
        "params": "(robj *o, size_t sample_size)",
        "start_line": 777,
        "end_line": 939
      },
      {
        "method_name": "freeMemoryOverheadData",
        "params": "(struct redisMemOverhead *mh)",
        "start_line": 942,
        "end_line": 945
      },
      {
        "method_name": "*getMemoryOverheadData",
        "params": "(void)",
        "start_line": 950,
        "end_line": 1051
      },
      {
        "method_name": "inputCatSds",
        "params": "(void *result, const char *str)",
        "start_line": 1055,
        "end_line": 1059
      },
      {
        "method_name": "getMemoryDoctorReport",
        "params": "(void)",
        "start_line": 1063,
        "end_line": 1173
      },
      {
        "method_name": "objectSetLRUOrLFU",
        "params": "(robj *val, long long lfu_freq, long long lru_idle,\n                       long long lru_clock, int lru_multiplier)",
        "start_line": 1181,
        "end_line": 1206
      },
      {
        "method_name": "*objectCommandLookup",
        "params": "(client *c, robj *key)",
        "start_line": 1212,
        "end_line": 1217
      },
      {
        "method_name": "*objectCommandLookupOrReply",
        "params": "(client *c, robj *key, robj *reply)",
        "start_line": 1219,
        "end_line": 1224
      },
      {
        "method_name": "objectCommand",
        "params": "(client *c)",
        "start_line": 1228,
        "end_line": 1271
      },
      {
        "method_name": "memoryCommand",
        "params": "(client *c)",
        "start_line": 1277,
        "end_line": 1431
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/pqsort.c",
    "line": 185,
    "headers": [
      "sys/types.h",
      "errno.h",
      "stdlib.h"
    ],
    "methods": [
      {
        "method_name": "swapcode",
        "params": "(TYPE, parmi, parmj, n)",
        "start_line": 54,
        "end_line": 63
      },
      {
        "method_name": "swapfunc",
        "params": "(char *a, char *b, size_t n, int swaptype)",
        "start_line": 70,
        "end_line": 76
      },
      {
        "method_name": "if",
        "params": "(swaptype == 0)",
        "start_line": 79,
        "end_line": 83
      },
      {
        "method_name": "(*cmp)",
        "params": "(const void *, const void *))",
        "start_line": 91,
        "end_line": 96
      },
      {
        "method_name": "(*cmp)",
        "params": "(const void *, const void *), void *lrange, void *rrange)",
        "start_line": 101,
        "end_line": 177
      },
      {
        "method_name": "(*cmp)",
        "params": "(const void *, const void *), size_t lrange, size_t rrange)",
        "start_line": 182,
        "end_line": 185
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/pqsort.h",
    "line": 40,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/pubsub.c",
    "line": 460,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "addReplyPubsubMessage",
        "params": "(client *c, robj *channel, robj *msg)",
        "start_line": 43,
        "end_line": 51
      },
      {
        "method_name": "addReplyPubsubPatMessage",
        "params": "(client *c, robj *pat, robj *channel, robj *msg)",
        "start_line": 56,
        "end_line": 65
      },
      {
        "method_name": "addReplyPubsubSubscribed",
        "params": "(client *c, robj *channel)",
        "start_line": 68,
        "end_line": 76
      },
      {
        "method_name": "addReplyPubsubUnsubscribed",
        "params": "(client *c, robj *channel)",
        "start_line": 82,
        "end_line": 93
      },
      {
        "method_name": "addReplyPubsubPatSubscribed",
        "params": "(client *c, robj *pattern)",
        "start_line": 96,
        "end_line": 104
      },
      {
        "method_name": "addReplyPubsubPatUnsubscribed",
        "params": "(client *c, robj *pattern)",
        "start_line": 110,
        "end_line": 121
      },
      {
        "method_name": "freePubsubPattern",
        "params": "(void *p)",
        "start_line": 127,
        "end_line": 132
      },
      {
        "method_name": "listMatchPubsubPattern",
        "params": "(void *a, void *b)",
        "start_line": 134,
        "end_line": 139
      },
      {
        "method_name": "clientSubscriptionsCount",
        "params": "(client *c)",
        "start_line": 142,
        "end_line": 145
      },
      {
        "method_name": "pubsubSubscribeChannel",
        "params": "(client *c, robj *channel)",
        "start_line": 149,
        "end_line": 172
      },
      {
        "method_name": "pubsubUnsubscribeChannel",
        "params": "(client *c, robj *channel, int notify)",
        "start_line": 176,
        "end_line": 205
      },
      {
        "method_name": "pubsubSubscribePattern",
        "params": "(client *c, robj *pattern)",
        "start_line": 208,
        "end_line": 236
      },
      {
        "method_name": "pubsubUnsubscribePattern",
        "params": "(client *c, robj *pattern, int notify)",
        "start_line": 240,
        "end_line": 272
      },
      {
        "method_name": "pubsubUnsubscribeAllChannels",
        "params": "(client *c, int notify)",
        "start_line": 276,
        "end_line": 290
      },
      {
        "method_name": "pubsubUnsubscribeAllPatterns",
        "params": "(client *c, int notify)",
        "start_line": 294,
        "end_line": 307
      },
      {
        "method_name": "pubsubPublishMessage",
        "params": "(robj *channel, robj *message)",
        "start_line": 310,
        "end_line": 354
      },
      {
        "method_name": "subscribeCommand",
        "params": "(client *c)",
        "start_line": 360,
        "end_line": 366
      },
      {
        "method_name": "unsubscribeCommand",
        "params": "(client *c)",
        "start_line": 368,
        "end_line": 378
      },
      {
        "method_name": "psubscribeCommand",
        "params": "(client *c)",
        "start_line": 380,
        "end_line": 386
      },
      {
        "method_name": "punsubscribeCommand",
        "params": "(client *c)",
        "start_line": 388,
        "end_line": 398
      },
      {
        "method_name": "publishCommand",
        "params": "(client *c)",
        "start_line": 400,
        "end_line": 407
      },
      {
        "method_name": "pubsubCommand",
        "params": "(client *c)",
        "start_line": 410,
        "end_line": 460
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/quicklist.c",
    "line": 2797,
    "headers": [
      "string.h",
      "quicklist.h",
      "zmalloc.h",
      "ziplist.h",
      "util.h",
      "lzf.h",
      "stdio.h",
      "stdint.h",
      "sys/time.h"
    ],
    "methods": [
      {
        "method_name": "*quicklistCreate",
        "params": "(void)",
        "start_line": 100,
        "end_line": 111
      },
      {
        "method_name": "quicklistSetCompressDepth",
        "params": "(quicklist *quicklist, int compress)",
        "start_line": 114,
        "end_line": 121
      },
      {
        "method_name": "quicklistSetFill",
        "params": "(quicklist *quicklist, int fill)",
        "start_line": 124,
        "end_line": 131
      },
      {
        "method_name": "quicklistSetOptions",
        "params": "(quicklist *quicklist, int fill, int depth)",
        "start_line": 133,
        "end_line": 136
      },
      {
        "method_name": "*quicklistNew",
        "params": "(int fill, int compress)",
        "start_line": 139,
        "end_line": 143
      },
      {
        "method_name": "*quicklistCreateNode",
        "params": "(void)",
        "start_line": 145,
        "end_line": 156
      },
      {
        "method_name": "quicklistCount",
        "params": "(const quicklist *ql)",
        "start_line": 159,
        "end_line": 159
      },
      {
        "method_name": "quicklistRelease",
        "params": "(quicklist *quicklist)",
        "start_line": 162,
        "end_line": 181
      },
      {
        "method_name": "__quicklistCompressNode",
        "params": "(quicklistNode *node)",
        "start_line": 186,
        "end_line": 211
      },
      {
        "method_name": "\u0026\u0026",
        "params": "(_node)-\u003eencoding == QUICKLIST_NODE_ENCODING_RAW)",
        "start_line": 216,
        "end_line": 218
      },
      {
        "method_name": "__quicklistDecompressNode",
        "params": "(quicklistNode *node)",
        "start_line": 223,
        "end_line": 239
      },
      {
        "method_name": "\u0026\u0026",
        "params": "(_node)-\u003eencoding == QUICKLIST_NODE_ENCODING_LZF)",
        "start_line": 244,
        "end_line": 246
      },
      {
        "method_name": "\u0026\u0026",
        "params": "(_node)-\u003eencoding == QUICKLIST_NODE_ENCODING_LZF)",
        "start_line": 252,
        "end_line": 255
      },
      {
        "method_name": "quicklistGetLzf",
        "params": "(const quicklistNode *node, void **data)",
        "start_line": 261,
        "end_line": 265
      },
      {
        "method_name": "__quicklistCompress",
        "params": "(const quicklist *quicklist,\n                                      quicklistNode *node)",
        "start_line": 274,
        "end_line": 339
      },
      {
        "method_name": "__quicklistInsertNode",
        "params": "(quicklist *quicklist,\n                                        quicklistNode *old_node,\n                                        quicklistNode *new_node, int after)",
        "start_line": 362,
        "end_line": 393
      },
      {
        "method_name": "_quicklistInsertNodeBefore",
        "params": "(quicklist *quicklist,\n                                             quicklistNode *old_node,\n                                             quicklistNode *new_node)",
        "start_line": 398,
        "end_line": 400
      },
      {
        "method_name": "_quicklistInsertNodeAfter",
        "params": "(quicklist *quicklist,\n                                            quicklistNode *old_node,\n                                            quicklistNode *new_node)",
        "start_line": 404,
        "end_line": 406
      },
      {
        "method_name": "_quicklistNodeSizeMeetsOptimizationRequirement",
        "params": "(const size_t sz,\n                                               const int fill)",
        "start_line": 410,
        "end_line": 424
      },
      {
        "method_name": "_quicklistNodeAllowInsert",
        "params": "(const quicklistNode *node,\n                                           const int fill, const size_t sz)",
        "start_line": 429,
        "end_line": 458
      },
      {
        "method_name": "_quicklistNodeAllowMerge",
        "params": "(const quicklistNode *a,\n                                          const quicklistNode *b,\n                                          const int fill)",
        "start_line": 462,
        "end_line": 477
      },
      {
        "method_name": "quicklistPushHead",
        "params": "(quicklist *quicklist, void *value, size_t sz)",
        "start_line": 488,
        "end_line": 505
      },
      {
        "method_name": "quicklistPushTail",
        "params": "(quicklist *quicklist, void *value, size_t sz)",
        "start_line": 511,
        "end_line": 528
      },
      {
        "method_name": "quicklistAppendZiplist",
        "params": "(quicklist *quicklist, unsigned char *zl)",
        "start_line": 533,
        "end_line": 542
      },
      {
        "method_name": "*quicklistAppendValuesFromZiplist",
        "params": "(quicklist *quicklist,\n                                            unsigned char *zl)",
        "start_line": 551,
        "end_line": 569
      },
      {
        "method_name": "*quicklistCreateFromZiplist",
        "params": "(int fill, int compress,\n                                      unsigned char *zl)",
        "start_line": 575,
        "end_line": 577
      },
      {
        "method_name": "(",
        "params": "(n)-\u003ecount == 0)",
        "start_line": 581,
        "end_line": 584
      },
      {
        "method_name": "__quicklistDelNode",
        "params": "(quicklist *quicklist,\n                                     quicklistNode *node)",
        "start_line": 588,
        "end_line": 620
      },
      {
        "method_name": "quicklistDelIndex",
        "params": "(quicklist *quicklist, quicklistNode *node,\n                                   unsigned char **p)",
        "start_line": 631,
        "end_line": 645
      },
      {
        "method_name": "quicklistDelEntry",
        "params": "(quicklistIter *iter, quicklistEntry *entry)",
        "start_line": 651,
        "end_line": 678
      },
      {
        "method_name": "quicklistReplaceAtIndex",
        "params": "(quicklist *quicklist, long index, void *data,\n                            int sz)",
        "start_line": 685,
        "end_line": 697
      },
      {
        "method_name": "*_quicklistZiplistMerge",
        "params": "(quicklist *quicklist,\n                                                   quicklistNode *a,\n                                                   quicklistNode *b)",
        "start_line": 714,
        "end_line": 740
      },
      {
        "method_name": "_quicklistMergeNodes",
        "params": "(quicklist *quicklist,\n                                       quicklistNode *center)",
        "start_line": 751,
        "end_line": 793
      },
      {
        "method_name": "*_quicklistSplitNode",
        "params": "(quicklistNode *node, int offset,\n                                                int after)",
        "start_line": 815,
        "end_line": 843
      },
      {
        "method_name": "_quicklistInsert",
        "params": "(quicklist *quicklist, quicklistEntry *entry,\n                                   void *value, const size_t sz, int after)",
        "start_line": 850,
        "end_line": 957
      },
      {
        "method_name": "quicklistInsertBefore",
        "params": "(quicklist *quicklist, quicklistEntry *entry,\n                           void *value, const size_t sz)",
        "start_line": 960,
        "end_line": 962
      },
      {
        "method_name": "quicklistInsertAfter",
        "params": "(quicklist *quicklist, quicklistEntry *entry,\n                          void *value, const size_t sz)",
        "start_line": 965,
        "end_line": 967
      },
      {
        "method_name": "quicklistDelRange",
        "params": "(quicklist *quicklist, const long start,\n                      const long count)",
        "start_line": 976,
        "end_line": 1056
      },
      {
        "method_name": "quicklistCompare",
        "params": "(unsigned char *p1, unsigned char *p2, int p2_len)",
        "start_line": 1059,
        "end_line": 1061
      },
      {
        "method_name": "*quicklistGetIterator",
        "params": "(const quicklist *quicklist, int direction)",
        "start_line": 1065,
        "end_line": 1084
      },
      {
        "method_name": "*quicklistGetIteratorAtIdx",
        "params": "(const quicklist *quicklist,\n                                         const int direction,\n                                         const long long idx)",
        "start_line": 1090,
        "end_line": 1102
      },
      {
        "method_name": "quicklistReleaseIterator",
        "params": "(quicklistIter *iter)",
        "start_line": 1106,
        "end_line": 1111
      },
      {
        "method_name": "(quicklistNext",
        "params": "(iter, \u0026entry))",
        "start_line": 1123,
        "end_line": 1128
      },
      {
        "method_name": "quicklistNext",
        "params": "(quicklistIter *iter, quicklistEntry *entry)",
        "start_line": 1134,
        "end_line": 1195
      },
      {
        "method_name": "*quicklistDup",
        "params": "(quicklist *orig)",
        "start_line": 1203,
        "end_line": 1232
      },
      {
        "method_name": "quicklistIndex",
        "params": "(const quicklist *quicklist, const long long idx,\n                   quicklistEntry *entry)",
        "start_line": 1243,
        "end_line": 1296
      },
      {
        "method_name": "quicklistRotate",
        "params": "(quicklist *quicklist)",
        "start_line": 1299,
        "end_line": 1330
      },
      {
        "method_name": "*(*saver)",
        "params": "(unsigned char *data, unsigned int sz))",
        "start_line": 1343,
        "end_line": 1386
      },
      {
        "method_name": "*_quicklistSaver",
        "params": "(unsigned char *data, unsigned int sz)",
        "start_line": 1389,
        "end_line": 1397
      },
      {
        "method_name": "quicklistPop",
        "params": "(quicklist *quicklist, int where, unsigned char **data,\n                 unsigned int *sz, long long *slong)",
        "start_line": 1403,
        "end_line": 1418
      },
      {
        "method_name": "quicklistPush",
        "params": "(quicklist *quicklist, void *value, const size_t sz,\n                   int where)",
        "start_line": 1422,
        "end_line": 1428
      },
      {
        "method_name": "quicklistBookmarkCreate",
        "params": "(quicklist **ql_ref, const char *name, quicklistNode *node)",
        "start_line": 1438,
        "end_line": 1453
      },
      {
        "method_name": "*quicklistBookmarkFind",
        "params": "(quicklist *ql, const char *name)",
        "start_line": 1458,
        "end_line": 1462
      },
      {
        "method_name": "quicklistBookmarkDelete",
        "params": "(quicklist *ql, const char *name)",
        "start_line": 1467,
        "end_line": 1473
      },
      {
        "method_name": "*_quicklistBookmarkFindByName",
        "params": "(quicklist *ql, const char *name)",
        "start_line": 1475,
        "end_line": 1483
      },
      {
        "method_name": "*_quicklistBookmarkFindByNode",
        "params": "(quicklist *ql, quicklistNode *node)",
        "start_line": 1485,
        "end_line": 1493
      },
      {
        "method_name": "_quicklistBookmarkDelete",
        "params": "(quicklist *ql, quicklistBookmark *bm)",
        "start_line": 1495,
        "end_line": 1502
      },
      {
        "method_name": "quicklistBookmarksClear",
        "params": "(quicklist *ql)",
        "start_line": 1504,
        "end_line": 1509
      },
      {
        "method_name": "(!",
        "params": "(_e))",
        "start_line": 1518,
        "end_line": 1522
      },
      {
        "method_name": "ql_info",
        "params": "(quicklist *ql)",
        "start_line": 1548,
        "end_line": 1560
      },
      {
        "method_name": "ustime",
        "params": "(void)",
        "start_line": 1563,
        "end_line": 1571
      },
      {
        "method_name": "mstime",
        "params": "(void)",
        "start_line": 1574,
        "end_line": 1574
      },
      {
        "method_name": "_itrprintr",
        "params": "(quicklist *ql, int print, int forward)",
        "start_line": 1580,
        "end_line": 1601
      },
      {
        "method_name": "itrprintr",
        "params": "(quicklist *ql, int print)",
        "start_line": 1602,
        "end_line": 1604
      },
      {
        "method_name": "itrprintr_rev",
        "params": "(quicklist *ql, int print)",
        "start_line": 1606,
        "end_line": 1608
      },
      {
        "method_name": "_ql_verify",
        "params": "(quicklist *ql, uint32_t len, uint32_t count,\n                      uint32_t head_count, uint32_t tail_count)",
        "start_line": 1617,
        "end_line": 1700
      },
      {
        "method_name": "*genstr",
        "params": "(char *prefix, int i)",
        "start_line": 1703,
        "end_line": 1707
      },
      {
        "method_name": "quicklistTest",
        "params": "(int argc, char *argv[])",
        "start_line": 1710,
        "end_line": 2796
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/quicklist.h",
    "line": 209,
    "headers": [
      "stdint.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "quicklistNode",
        "start_line": 46,
        "end_line": 57
      },
      {
        "struct_name": "quicklistLZF",
        "start_line": 64,
        "end_line": 67
      },
      {
        "struct_name": "quicklistBookmark",
        "start_line": 77,
        "end_line": 80
      },
      {
        "struct_name": "quicklist",
        "start_line": 105,
        "end_line": 114
      },
      {
        "struct_name": "quicklistIter",
        "start_line": 116,
        "end_line": 122
      },
      {
        "struct_name": "quicklistEntry",
        "start_line": 124,
        "end_line": 132
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rand.c",
    "line": 93,
    "headers": [
      "stdint.h"
    ],
    "methods": [
      {
        "method_name": "MUL",
        "params": "(x, y, z)",
        "start_line": 50,
        "end_line": 51
      },
      {
        "method_name": "for",
        "params": "(i = 0; i \u003c 3; i++)",
        "start_line": 64,
        "end_line": 64
      },
      {
        "method_name": "redisLrand48",
        "params": "()",
        "start_line": 71,
        "end_line": 74
      },
      {
        "method_name": "redisSrand48",
        "params": "(int32_t seedval)",
        "start_line": 76,
        "end_line": 78
      },
      {
        "method_name": "next",
        "params": "(void)",
        "start_line": 80,
        "end_line": 93
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rand.h",
    "line": 38,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rax.c",
    "line": 1948,
    "headers": [
      "stdlib.h",
      "string.h",
      "assert.h",
      "stdio.h",
      "errno.h",
      "math.h",
      "rax.h"
    ],
    "methods": [
      {
        "method_name": "if",
        "params": "(raxDebugMsg)",
        "start_line": 63,
        "end_line": 67
      },
      {
        "method_name": "raxSetDebugMsg",
        "params": "(int onoff)",
        "start_line": 81,
        "end_line": 83
      },
      {
        "method_name": "raxStackInit",
        "params": "(raxStack *ts)",
        "start_line": 94,
        "end_line": 99
      },
      {
        "method_name": "raxStackPush",
        "params": "(raxStack *ts, void *ptr)",
        "start_line": 102,
        "end_line": 127
      },
      {
        "method_name": "*raxStackPop",
        "params": "(raxStack *ts)",
        "start_line": 131,
        "end_line": 135
      },
      {
        "method_name": "*raxStackPeek",
        "params": "(raxStack *ts)",
        "start_line": 139,
        "end_line": 142
      },
      {
        "method_name": "raxStackFree",
        "params": "(raxStack *ts)",
        "start_line": 145,
        "end_line": 147
      },
      {
        "method_name": "*raxNewNode",
        "params": "(size_t children, int datafield)",
        "start_line": 188,
        "end_line": 199
      },
      {
        "method_name": "*raxNew",
        "params": "(void)",
        "start_line": 203,
        "end_line": 215
      },
      {
        "method_name": "*raxReallocForData",
        "params": "(raxNode *n, void *data)",
        "start_line": 219,
        "end_line": 223
      },
      {
        "method_name": "raxSetData",
        "params": "(raxNode *n, void *data)",
        "start_line": 226,
        "end_line": 236
      },
      {
        "method_name": "*raxGetData",
        "params": "(raxNode *n)",
        "start_line": 239,
        "end_line": 245
      },
      {
        "method_name": "*raxAddChild",
        "params": "(raxNode *n, unsigned char c, raxNode **childptr, raxNode ***parentlink)",
        "start_line": 256,
        "end_line": 387
      },
      {
        "method_name": "*raxCompressNode",
        "params": "(raxNode *n, unsigned char *s, size_t len, raxNode **child)",
        "start_line": 397,
        "end_line": 428
      },
      {
        "method_name": "raxLowWalk",
        "params": "(rax *rax, unsigned char *s, size_t len, raxNode **stopnode, raxNode ***plink, int *splitpos, raxStack *ts)",
        "start_line": 459,
        "end_line": 500
      },
      {
        "method_name": "raxGenericInsert",
        "params": "(rax *rax, unsigned char *s, size_t len, void *data, void **old, int overwrite)",
        "start_line": 509,
        "end_line": 900
      },
      {
        "method_name": "raxInsert",
        "params": "(rax *rax, unsigned char *s, size_t len, void *data, void **old)",
        "start_line": 904,
        "end_line": 906
      },
      {
        "method_name": "raxTryInsert",
        "params": "(rax *rax, unsigned char *s, size_t len, void *data, void **old)",
        "start_line": 911,
        "end_line": 913
      },
      {
        "method_name": "*raxFind",
        "params": "(rax *rax, unsigned char *s, size_t len)",
        "start_line": 918,
        "end_line": 927
      },
      {
        "method_name": "**raxFindParentLink",
        "params": "(raxNode *parent, raxNode *child)",
        "start_line": 934,
        "end_line": 943
      },
      {
        "method_name": "*raxRemoveChild",
        "params": "(raxNode *parent, raxNode *child)",
        "start_line": 949,
        "end_line": 1018
      },
      {
        "method_name": "raxRemove",
        "params": "(rax *rax, unsigned char *s, size_t len, void **old)",
        "start_line": 1022,
        "end_line": 1219
      },
      {
        "method_name": "(*free_callback)",
        "params": "(void*))",
        "start_line": 1223,
        "end_line": 1238
      },
      {
        "method_name": "(*free_callback)",
        "params": "(void*))",
        "start_line": 1242,
        "end_line": 1246
      },
      {
        "method_name": "raxFree",
        "params": "(rax *rax)",
        "start_line": 1249,
        "end_line": 1251
      },
      {
        "method_name": "raxStart",
        "params": "(raxIterator *it, rax *rt)",
        "start_line": 1258,
        "end_line": 1267
      },
      {
        "method_name": "raxIteratorAddChars",
        "params": "(raxIterator *it, unsigned char *s, size_t len)",
        "start_line": 1272,
        "end_line": 1291
      },
      {
        "method_name": "raxIteratorDelChars",
        "params": "(raxIterator *it, size_t count)",
        "start_line": 1295,
        "end_line": 1297
      },
      {
        "method_name": "raxIteratorNextStep",
        "params": "(raxIterator *it, int noup)",
        "start_line": 1313,
        "end_line": 1409
      },
      {
        "method_name": "raxSeekGreatest",
        "params": "(raxIterator *it)",
        "start_line": 1414,
        "end_line": 1428
      },
      {
        "method_name": "raxIteratorPrevStep",
        "params": "(raxIterator *it, int noup)",
        "start_line": 1433,
        "end_line": 1504
      },
      {
        "method_name": "raxSeek",
        "params": "(raxIterator *it, const char *op, unsigned char *ele, size_t len)",
        "start_line": 1510,
        "end_line": 1691
      },
      {
        "method_name": "raxNext",
        "params": "(raxIterator *it)",
        "start_line": 1696,
        "end_line": 1706
      },
      {
        "method_name": "raxPrev",
        "params": "(raxIterator *it)",
        "start_line": 1711,
        "end_line": 1721
      },
      {
        "method_name": "raxRandomWalk",
        "params": "(raxIterator *it, size_t steps)",
        "start_line": 1735,
        "end_line": 1773
      },
      {
        "method_name": "raxCompare",
        "params": "(raxIterator *iter, const char *op, unsigned char *key, size_t key_len)",
        "start_line": 1778,
        "end_line": 1804
      },
      {
        "method_name": "raxStop",
        "params": "(raxIterator *it)",
        "start_line": 1807,
        "end_line": 1810
      },
      {
        "method_name": "raxEOF",
        "params": "(raxIterator *it)",
        "start_line": 1816,
        "end_line": 1818
      },
      {
        "method_name": "raxSize",
        "params": "(rax *rax)",
        "start_line": 1821,
        "end_line": 1823
      },
      {
        "method_name": "raxRecursiveShow",
        "params": "(int level, int lpad, raxNode *n)",
        "start_line": 1853,
        "end_line": 1884
      },
      {
        "method_name": "raxShow",
        "params": "(rax *rax)",
        "start_line": 1887,
        "end_line": 1890
      },
      {
        "method_name": "raxDebugShowNode",
        "params": "(const char *msg, raxNode *n)",
        "start_line": 1893,
        "end_line": 1907
      },
      {
        "method_name": "raxTouch",
        "params": "(raxNode *n)",
        "start_line": 1926,
        "end_line": 1948
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rax.h",
    "line": 216,
    "headers": [
      "stdint.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "raxNode",
        "start_line": 98,
        "end_line": 131
      },
      {
        "struct_name": "rax",
        "start_line": 133,
        "end_line": 137
      },
      {
        "struct_name": "raxStack",
        "start_line": 143,
        "end_line": 150
      },
      {
        "struct_name": "raxIterator",
        "start_line": 175,
        "end_line": 186
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rax_malloc.h",
    "line": 44,
    "headers": [
      "zmalloc.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rdb.c",
    "line": 2642,
    "headers": [
      "server.h",
      "lzf.h",
      "zipmap.h",
      "endianconv.h",
      "stream.h",
      "math.h",
      "sys/types.h",
      "sys/time.h",
      "sys/resource.h",
      "sys/wait.h",
      "arpa/inet.h",
      "sys/stat.h",
      "sys/param.h"
    ],
    "methods": [
      {
        "method_name": "rdbReportError",
        "params": "(int corruption_error, int linenum, char *reason, ...)",
        "start_line": 55,
        "end_line": 81
      },
      {
        "method_name": "rdbWriteRaw",
        "params": "(rio *rdb, void *p, size_t len)",
        "start_line": 83,
        "end_line": 87
      },
      {
        "method_name": "rdbSaveType",
        "params": "(rio *rdb, unsigned char type)",
        "start_line": 89,
        "end_line": 91
      },
      {
        "method_name": "rdbLoadType",
        "params": "(rio *rdb)",
        "start_line": 96,
        "end_line": 100
      },
      {
        "method_name": "rdbLoadTime",
        "params": "(rio *rdb)",
        "start_line": 107,
        "end_line": 111
      },
      {
        "method_name": "rdbSaveMillisecondTime",
        "params": "(rio *rdb, long long t)",
        "start_line": 113,
        "end_line": 117
      },
      {
        "method_name": "rdbLoadMillisecondTime",
        "params": "(rio *rdb, int rdbver)",
        "start_line": 134,
        "end_line": 140
      },
      {
        "method_name": "rdbSaveLen",
        "params": "(rio *rdb, uint64_t len)",
        "start_line": 145,
        "end_line": 176
      },
      {
        "method_name": "rdbLoadLenByRef",
        "params": "(rio *rdb, int *isencoded, uint64_t *lenptr)",
        "start_line": 188,
        "end_line": 222
      },
      {
        "method_name": "rdbLoadLen",
        "params": "(rio *rdb, int *isencoded)",
        "start_line": 228,
        "end_line": 233
      },
      {
        "method_name": "rdbEncodeInteger",
        "params": "(long long value, unsigned char *enc)",
        "start_line": 239,
        "end_line": 259
      },
      {
        "method_name": "*rdbLoadIntegerObject",
        "params": "(rio *rdb, int enctype, int flags, size_t *lenptr)",
        "start_line": 264,
        "end_line": 300
      },
      {
        "method_name": "rdbTryIntegerEncoding",
        "params": "(char *s, size_t len, unsigned char *enc)",
        "start_line": 305,
        "end_line": 319
      },
      {
        "method_name": "rdbSaveLzfBlob",
        "params": "(rio *rdb, void *data, size_t compress_len,\n                       size_t original_len)",
        "start_line": 322,
        "end_line": 344
      },
      {
        "method_name": "rdbSaveLzfStringObject",
        "params": "(rio *rdb, unsigned char *s, size_t len)",
        "start_line": 346,
        "end_line": 362
      },
      {
        "method_name": "*rdbLoadLzfStringObject",
        "params": "(rio *rdb, int flags, size_t *lenptr)",
        "start_line": 367,
        "end_line": 405
      },
      {
        "method_name": "rdbSaveRawString",
        "params": "(rio *rdb, unsigned char *s, size_t len)",
        "start_line": 409,
        "end_line": 439
      },
      {
        "method_name": "rdbSaveLongLongAsStringObject",
        "params": "(rio *rdb, long long value)",
        "start_line": 442,
        "end_line": 458
      },
      {
        "method_name": "rdbSaveStringObject",
        "params": "(rio *rdb, robj *obj)",
        "start_line": 461,
        "end_line": 470
      },
      {
        "method_name": "*rdbGenericLoadStringObject",
        "params": "(rio *rdb, int flags, size_t *lenptr)",
        "start_line": 485,
        "end_line": 528
      },
      {
        "method_name": "*rdbLoadStringObject",
        "params": "(rio *rdb)",
        "start_line": 530,
        "end_line": 532
      },
      {
        "method_name": "*rdbLoadEncodedStringObject",
        "params": "(rio *rdb)",
        "start_line": 534,
        "end_line": 536
      },
      {
        "method_name": "rdbSaveDoubleValue",
        "params": "(rio *rdb, double val)",
        "start_line": 546,
        "end_line": 578
      },
      {
        "method_name": "rdbLoadDoubleValue",
        "params": "(rio *rdb, double *val)",
        "start_line": 581,
        "end_line": 596
      },
      {
        "method_name": "rdbSaveBinaryDoubleValue",
        "params": "(rio *rdb, double val)",
        "start_line": 603,
        "end_line": 606
      },
      {
        "method_name": "rdbLoadBinaryDoubleValue",
        "params": "(rio *rdb, double *val)",
        "start_line": 610,
        "end_line": 614
      },
      {
        "method_name": "rdbSaveBinaryFloatValue",
        "params": "(rio *rdb, float val)",
        "start_line": 617,
        "end_line": 620
      },
      {
        "method_name": "rdbLoadBinaryFloatValue",
        "params": "(rio *rdb, float *val)",
        "start_line": 623,
        "end_line": 627
      },
      {
        "method_name": "rdbSaveObjectType",
        "params": "(rio *rdb, robj *o)",
        "start_line": 630,
        "end_line": 668
      },
      {
        "method_name": "rdbLoadObjectType",
        "params": "(rio *rdb)",
        "start_line": 672,
        "end_line": 677
      },
      {
        "method_name": "rdbSaveStreamPEL",
        "params": "(rio *rdb, rax *pel, int nacks)",
        "start_line": 686,
        "end_line": 717
      },
      {
        "method_name": "rdbSaveStreamConsumers",
        "params": "(rio *rdb, streamCG *cg)",
        "start_line": 722,
        "end_line": 755
      },
      {
        "method_name": "rdbSaveObject",
        "params": "(rio *rdb, robj *o, robj *key)",
        "start_line": 759,
        "end_line": 999
      },
      {
        "method_name": "rdbSavedObjectLen",
        "params": "(robj *o, robj *key)",
        "start_line": 1005,
        "end_line": 1009
      },
      {
        "method_name": "rdbSaveKeyValuePair",
        "params": "(rio *rdb, robj *key, robj *val, long long expiretime)",
        "start_line": 1015,
        "end_line": 1055
      },
      {
        "method_name": "rdbSaveAuxField",
        "params": "(rio *rdb, void *key, size_t keylen, void *val, size_t vallen)",
        "start_line": 1058,
        "end_line": 1067
      },
      {
        "method_name": "rdbSaveAuxFieldStrStr",
        "params": "(rio *rdb, char *key, char *val)",
        "start_line": 1071,
        "end_line": 1073
      },
      {
        "method_name": "rdbSaveAuxFieldStrInt",
        "params": "(rio *rdb, char *key, long long val)",
        "start_line": 1076,
        "end_line": 1080
      },
      {
        "method_name": "rdbSaveInfoAuxFields",
        "params": "(rio *rdb, int rdbflags, rdbSaveInfo *rsi)",
        "start_line": 1083,
        "end_line": 1104
      },
      {
        "method_name": "rdbSaveSingleModuleAux",
        "params": "(rio *rdb, int when, moduleType *mt)",
        "start_line": 1106,
        "end_line": 1143
      },
      {
        "method_name": "rdbSaveRio",
        "params": "(rio *rdb, int *error, int rdbflags, rdbSaveInfo *rsi)",
        "start_line": 1153,
        "end_line": 1241
      },
      {
        "method_name": "rdbSaveRioWithEOFMark",
        "params": "(rio *rdb, int *error, rdbSaveInfo *rsi)",
        "start_line": 1251,
        "end_line": 1270
      },
      {
        "method_name": "rdbSave",
        "params": "(char *filename, rdbSaveInfo *rsi)",
        "start_line": 1273,
        "end_line": 1338
      },
      {
        "method_name": "rdbSaveBackground",
        "params": "(char *filename, rdbSaveInfo *rsi)",
        "start_line": 1340,
        "end_line": 1376
      },
      {
        "method_name": "rdbRemoveTempFile",
        "params": "(pid_t childpid)",
        "start_line": 1378,
        "end_line": 1383
      },
      {
        "method_name": "*rdbLoadCheckModuleValue",
        "params": "(rio *rdb, char *modulename)",
        "start_line": 1389,
        "end_line": 1422
      },
      {
        "method_name": "*rdbLoadObject",
        "params": "(int rdbtype, rio *rdb, sds key)",
        "start_line": 1426,
        "end_line": 1955
      },
      {
        "method_name": "startLoading",
        "params": "(size_t size, int rdbflags)",
        "start_line": 1959,
        "end_line": 1975
      },
      {
        "method_name": "startLoadingFile",
        "params": "(FILE *fp, char* filename, int rdbflags)",
        "start_line": 1980,
        "end_line": 1986
      },
      {
        "method_name": "loadingProgress",
        "params": "(off_t pos)",
        "start_line": 1989,
        "end_line": 1993
      },
      {
        "method_name": "stopLoading",
        "params": "(int success)",
        "start_line": 1996,
        "end_line": 2006
      },
      {
        "method_name": "startSaving",
        "params": "(int rdbflags)",
        "start_line": 2008,
        "end_line": 2018
      },
      {
        "method_name": "stopSaving",
        "params": "(int success)",
        "start_line": 2020,
        "end_line": 2027
      },
      {
        "method_name": "rdbLoadProgressCallback",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 2031,
        "end_line": 2047
      },
      {
        "method_name": "rdbLoadRio",
        "params": "(rio *rdb, int rdbflags, rdbSaveInfo *rsi)",
        "start_line": 2051,
        "end_line": 2342
      },
      {
        "method_name": "rdbLoad",
        "params": "(char *filename, rdbSaveInfo *rsi, int rdbflags)",
        "start_line": 2351,
        "end_line": 2363
      },
      {
        "method_name": "backgroundSaveDoneHandlerDisk",
        "params": "(int exitcode, int bysignal)",
        "start_line": 2367,
        "end_line": 2398
      },
      {
        "method_name": "backgroundSaveDoneHandlerSocket",
        "params": "(int exitcode, int bysignal)",
        "start_line": 2403,
        "end_line": 2418
      },
      {
        "method_name": "backgroundSaveDoneHandler",
        "params": "(int exitcode, int bysignal)",
        "start_line": 2421,
        "end_line": 2433
      },
      {
        "method_name": "killRDBChild",
        "params": "(void)",
        "start_line": 2438,
        "end_line": 2443
      },
      {
        "method_name": "rdbSaveToSlavesSockets",
        "params": "(rdbSaveInfo *rsi)",
        "start_line": 2447,
        "end_line": 2542
      },
      {
        "method_name": "saveCommand",
        "params": "(client *c)",
        "start_line": 2544,
        "end_line": 2556
      },
      {
        "method_name": "bgsaveCommand",
        "params": "(client *c)",
        "start_line": 2559,
        "end_line": 2593
      },
      {
        "method_name": "*rdbPopulateSaveInfo",
        "params": "(rdbSaveInfo *rsi)",
        "start_line": 2604,
        "end_line": 2642
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rdb.h",
    "line": 164,
    "headers": [
      "stdio.h",
      "rio.h",
      "server.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/redis-benchmark.c",
    "line": 1773,
    "headers": [
      "fmacros.h",
      "stdio.h",
      "string.h",
      "stdlib.h",
      "unistd.h",
      "errno.h",
      "time.h",
      "sys/time.h",
      "signal.h",
      "assert.h",
      "math.h",
      "pthread.h",
      "sds.h",
      "ae.h",
      "hiredis.h",
      "adlist.h",
      "dict.h",
      "zmalloc.h",
      "atomicvar.h",
      "crc16_slottable.h"
    ],
    "methods": [
      {
        "method_name": "ustime",
        "params": "(void)",
        "start_line": 198,
        "end_line": 206
      },
      {
        "method_name": "mstime",
        "params": "(void)",
        "start_line": 208,
        "end_line": 216
      },
      {
        "method_name": "dictSdsHash",
        "params": "(const void *key)",
        "start_line": 218,
        "end_line": 220
      },
      {
        "method_name": "dictSdsKeyCompare",
        "params": "(void *privdata, const void *key1,\n        const void *key2)",
        "start_line": 224,
        "end_line": 232
      },
      {
        "method_name": "_serverAssert",
        "params": "(const char *estr, const char *file, int line)",
        "start_line": 235,
        "end_line": 239
      },
      {
        "method_name": "*getRedisConfig",
        "params": "(const char *ip, int port,\n                                   const char *hostsocket)",
        "start_line": 243,
        "end_line": 308
      },
      {
        "method_name": "freeRedisConfig",
        "params": "(redisConfig *cfg)",
        "start_line": 309,
        "end_line": 313
      },
      {
        "method_name": "freeClient",
        "params": "(client c)",
        "start_line": 315,
        "end_line": 338
      },
      {
        "method_name": "freeAllClients",
        "params": "(void)",
        "start_line": 340,
        "end_line": 348
      },
      {
        "method_name": "resetClient",
        "params": "(client c)",
        "start_line": 350,
        "end_line": 357
      },
      {
        "method_name": "randomizeClientKey",
        "params": "(client c)",
        "start_line": 359,
        "end_line": 375
      },
      {
        "method_name": "setClusterKeyHashTag",
        "params": "(client c)",
        "start_line": 377,
        "end_line": 399
      },
      {
        "method_name": "clientDone",
        "params": "(client c)",
        "start_line": 403,
        "end_line": 422
      },
      {
        "method_name": "readHandler",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 424,
        "end_line": 522
      },
      {
        "method_name": "writeHandler",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 524,
        "end_line": 562
      },
      {
        "method_name": "createClient",
        "params": "(char *cmd, size_t len, client from, int thread_id)",
        "start_line": 585,
        "end_line": 752
      },
      {
        "method_name": "createMissingClients",
        "params": "(client c)",
        "start_line": 754,
        "end_line": 768
      },
      {
        "method_name": "compareLatency",
        "params": "(const void *a, const void *b)",
        "start_line": 770,
        "end_line": 772
      },
      {
        "method_name": "ipow",
        "params": "(int base, int exp)",
        "start_line": 774,
        "end_line": 782
      },
      {
        "method_name": "showLatencyReport",
        "params": "(void)",
        "start_line": 784,
        "end_line": 849
      },
      {
        "method_name": "initBenchmarkThreads",
        "params": "()",
        "start_line": 851,
        "end_line": 859
      },
      {
        "method_name": "startBenchmarkThreads",
        "params": "()",
        "start_line": 861,
        "end_line": 872
      },
      {
        "method_name": "benchmark",
        "params": "(char *title, char *cmd, int len)",
        "start_line": 874,
        "end_line": 895
      },
      {
        "method_name": "*createBenchmarkThread",
        "params": "(int index)",
        "start_line": 899,
        "end_line": 906
      },
      {
        "method_name": "freeBenchmarkThread",
        "params": "(benchmarkThread *thread)",
        "start_line": 908,
        "end_line": 911
      },
      {
        "method_name": "freeBenchmarkThreads",
        "params": "()",
        "start_line": 913,
        "end_line": 921
      },
      {
        "method_name": "*execBenchmarkThread",
        "params": "(void *ptr)",
        "start_line": 923,
        "end_line": 927
      },
      {
        "method_name": "*createClusterNode",
        "params": "(char *ip, int port)",
        "start_line": 931,
        "end_line": 951
      },
      {
        "method_name": "freeClusterNode",
        "params": "(clusterNode *node)",
        "start_line": 953,
        "end_line": 972
      },
      {
        "method_name": "freeClusterNodes",
        "params": "()",
        "start_line": 974,
        "end_line": 982
      },
      {
        "method_name": "**addClusterNode",
        "params": "(clusterNode *node)",
        "start_line": 984,
        "end_line": 991
      },
      {
        "method_name": "fetchClusterConfiguration",
        "params": "()",
        "start_line": 993,
        "end_line": 1164
      },
      {
        "method_name": "fetchClusterSlotsConfiguration",
        "params": "(client c)",
        "start_line": 1168,
        "end_line": 1257
      },
      {
        "method_name": "updateClusterSlotsConfiguration",
        "params": "()",
        "start_line": 1260,
        "end_line": 1279
      },
      {
        "method_name": "genBenchmarkRandomData",
        "params": "(char *data, int count)",
        "start_line": 1282,
        "end_line": 1290
      },
      {
        "method_name": "parseOptions",
        "params": "(int argc, const char **argv)",
        "start_line": 1293,
        "end_line": 1453
      },
      {
        "method_name": "showThroughput",
        "params": "(struct aeEventLoop *eventLoop, long long id, void *clientData)",
        "start_line": 1455,
        "end_line": 1483
      },
      {
        "method_name": "test_is_selected",
        "params": "(char *name)",
        "start_line": 1487,
        "end_line": 1497
      },
      {
        "method_name": "main",
        "params": "(int argc, const char **argv)",
        "start_line": 1499,
        "end_line": 1773
      }
    ],
    "structs": [
      {
        "struct_name": "config",
        "start_line": 67,
        "end_line": 117
      },
      {
        "struct_name": "_client",
        "start_line": 119,
        "end_line": 139
      },
      {
        "struct_name": "benchmarkThread",
        "start_line": 143,
        "end_line": 147
      },
      {
        "struct_name": "clusterNode",
        "start_line": 150,
        "end_line": 169
      },
      {
        "struct_name": "redisConfig",
        "start_line": 171,
        "end_line": 174
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/redis-check-aof.c",
    "line": 233,
    "headers": [
      "server.h",
      "sys/stat.h"
    ],
    "methods": [
      {
        "method_name": "ERROR",
        "params": "(...)",
        "start_line": 34,
        "end_line": 38
      },
      {
        "method_name": "consumeNewline",
        "params": "(char *buf)",
        "start_line": 43,
        "end_line": 49
      },
      {
        "method_name": "readLong",
        "params": "(FILE *fp, char prefix, long *target)",
        "start_line": 51,
        "end_line": 63
      },
      {
        "method_name": "readBytes",
        "params": "(FILE *fp, char *target, long length)",
        "start_line": 65,
        "end_line": 74
      },
      {
        "method_name": "readString",
        "params": "(FILE *fp, char** target)",
        "start_line": 76,
        "end_line": 94
      },
      {
        "method_name": "readArgc",
        "params": "(FILE *fp, long *target)",
        "start_line": 96,
        "end_line": 98
      },
      {
        "method_name": "process",
        "params": "(FILE *fp)",
        "start_line": 100,
        "end_line": 142
      },
      {
        "method_name": "redis_check_aof_main",
        "params": "(int argc, char **argv)",
        "start_line": 144,
        "end_line": 233
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/redis-check-rdb.c",
    "line": 367,
    "headers": [
      "server.h",
      "rdb.h",
      "stdarg.h"
    ],
    "methods": [
      {
        "method_name": "rdbShowGenericInfo",
        "params": "(void)",
        "start_line": 92,
        "end_line": 96
      },
      {
        "method_name": "rdbCheckError",
        "params": "(const char *fmt, ...)",
        "start_line": 100,
        "end_line": 124
      },
      {
        "method_name": "rdbCheckInfo",
        "params": "(const char *fmt, ...)",
        "start_line": 127,
        "end_line": 138
      },
      {
        "method_name": "rdbCheckSetError",
        "params": "(const char *fmt, ...)",
        "start_line": 142,
        "end_line": 149
      },
      {
        "method_name": "rdbCheckHandleCrash",
        "params": "(int sig, siginfo_t *info, void *secret)",
        "start_line": 154,
        "end_line": 161
      },
      {
        "method_name": "rdbCheckSetupSignals",
        "params": "(void)",
        "start_line": 163,
        "end_line": 173
      },
      {
        "method_name": "redis_check_rdb",
        "params": "(char *rdbfilename, FILE *fp)",
        "start_line": 179,
        "end_line": 332
      },
      {
        "method_name": "redis_check_rdb_main",
        "params": "(int argc, char **argv, FILE *fp)",
        "start_line": 346,
        "end_line": 367
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 39,
        "end_line": 49
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/redis-cli.c",
    "line": 8136,
    "headers": [
      "fmacros.h",
      "version.h",
      "stdio.h",
      "string.h",
      "stdlib.h",
      "signal.h",
      "unistd.h",
      "time.h",
      "ctype.h",
      "errno.h",
      "sys/stat.h",
      "sys/time.h",
      "assert.h",
      "fcntl.h",
      "limits.h",
      "math.h",
      "hiredis.h",
      "openssl/ssl.h",
      "openssl/err.h",
      "hiredis_ssl.h",
      "dict.h",
      "adlist.h",
      "zmalloc.h",
      "linenoise.h",
      "help.h",
      "anet.h",
      "ae.h"
    ],
    "methods": [
      {
        "method_name": "ustime",
        "params": "(void)",
        "start_line": 271,
        "end_line": 279
      },
      {
        "method_name": "mstime",
        "params": "(void)",
        "start_line": 281,
        "end_line": 283
      },
      {
        "method_name": "cliRefreshPrompt",
        "params": "(void)",
        "start_line": 285,
        "end_line": 305
      },
      {
        "method_name": "getDotfilePath",
        "params": "(char *envoverride, char *dotfilename)",
        "start_line": 315,
        "end_line": 336
      },
      {
        "method_name": "percentDecode",
        "params": "(const char *pe, size_t len)",
        "start_line": 343,
        "end_line": 370
      },
      {
        "method_name": "parseRedisUri",
        "params": "(const char *uri)",
        "start_line": 380,
        "end_line": 422
      },
      {
        "method_name": "dictSdsHash",
        "params": "(const void *key)",
        "start_line": 424,
        "end_line": 426
      },
      {
        "method_name": "dictSdsKeyCompare",
        "params": "(void *privdata, const void *key1,\n        const void *key2)",
        "start_line": 430,
        "end_line": 438
      },
      {
        "method_name": "dictSdsDestructor",
        "params": "(void *privdata, void *val)",
        "start_line": 441,
        "end_line": 444
      },
      {
        "method_name": "dictListDestructor",
        "params": "(void *privdata, void *val)",
        "start_line": 447,
        "end_line": 450
      },
      {
        "method_name": "_serverAssert",
        "params": "(const char *estr, const char *file, int line)",
        "start_line": 453,
        "end_line": 457
      },
      {
        "method_name": "cliVersion",
        "params": "(void)",
        "start_line": 479,
        "end_line": 491
      },
      {
        "method_name": "cliInitHelp",
        "params": "(void)",
        "start_line": 493,
        "end_line": 519
      },
      {
        "method_name": "cliIntegrateHelp",
        "params": "(void)",
        "start_line": 526,
        "end_line": 579
      },
      {
        "method_name": "cliOutputCommandHelp",
        "params": "(struct commandHelp *help, int group)",
        "start_line": 582,
        "end_line": 589
      },
      {
        "method_name": "cliOutputGenericHelp",
        "params": "(void)",
        "start_line": 592,
        "end_line": 609
      },
      {
        "method_name": "cliOutputHelp",
        "params": "(int argc, char **argv)",
        "start_line": 612,
        "end_line": 654
      },
      {
        "method_name": "completionCallback",
        "params": "(const char *buf, linenoiseCompletions *lc)",
        "start_line": 657,
        "end_line": 683
      },
      {
        "method_name": "*hintsCallback",
        "params": "(const char *buf, int *color, int *bold)",
        "start_line": 686,
        "end_line": 732
      },
      {
        "method_name": "freeHintsCallback",
        "params": "(void *ptr)",
        "start_line": 734,
        "end_line": 736
      },
      {
        "method_name": "cliAuth",
        "params": "(void)",
        "start_line": 743,
        "end_line": 758
      },
      {
        "method_name": "cliSelect",
        "params": "(void)",
        "start_line": 761,
        "end_line": 773
      },
      {
        "method_name": "cliSecureConnection",
        "params": "(redisContext *c, const char **err)",
        "start_line": 778,
        "end_line": 838
      },
      {
        "method_name": "cliSwitchProto",
        "params": "(void)",
        "start_line": 841,
        "end_line": 853
      },
      {
        "method_name": "cliConnect",
        "params": "(int flags)",
        "start_line": 859,
        "end_line": 912
      },
      {
        "method_name": "cliPrintContextError",
        "params": "(void)",
        "start_line": 914,
        "end_line": 917
      },
      {
        "method_name": "cliFormatReplyTTY",
        "params": "(redisReply *r, char *prefix)",
        "start_line": 919,
        "end_line": 1025
      },
      {
        "method_name": "isColorTerm",
        "params": "(void)",
        "start_line": 1027,
        "end_line": 1030
      },
      {
        "method_name": "sdscatcolor",
        "params": "(sds o, char *s, size_t len, char *color)",
        "start_line": 1034,
        "end_line": 1051
      },
      {
        "method_name": "sdsCatColorizedLdbReply",
        "params": "(sds o, char *s, size_t len)",
        "start_line": 1055,
        "end_line": 1069
      },
      {
        "method_name": "cliFormatReplyRaw",
        "params": "(redisReply *r)",
        "start_line": 1071,
        "end_line": 1140
      },
      {
        "method_name": "cliFormatReplyCSV",
        "params": "(redisReply *r)",
        "start_line": 1142,
        "end_line": 1184
      },
      {
        "method_name": "cliReadReply",
        "params": "(int output_raw_strings)",
        "start_line": 1186,
        "end_line": 1264
      },
      {
        "method_name": "cliSendCommand",
        "params": "(int argc, char **argv, long repeat)",
        "start_line": 1266,
        "end_line": 1385
      },
      {
        "method_name": "*reconnectingRedisCommand",
        "params": "(redisContext *c, const char *fmt, ...)",
        "start_line": 1388,
        "end_line": 1426
      },
      {
        "method_name": "parseOptions",
        "params": "(int argc, char **argv)",
        "start_line": 1432,
        "end_line": 1663
      },
      {
        "method_name": "parseEnv",
        "params": "()",
        "start_line": 1665,
        "end_line": 1671
      },
      {
        "method_name": "readArgFromStdin",
        "params": "(void)",
        "start_line": 1673,
        "end_line": 1688
      },
      {
        "method_name": "usage",
        "params": "(void)",
        "start_line": 1690,
        "end_line": 1798
      },
      {
        "method_name": "confirmWithYes",
        "params": "(char *msg, int force)",
        "start_line": 1800,
        "end_line": 1814
      },
      {
        "method_name": "**convertToSds",
        "params": "(int count, char** args)",
        "start_line": 1817,
        "end_line": 1825
      },
      {
        "method_name": "issueCommandRepeat",
        "params": "(int argc, char **argv, long repeat)",
        "start_line": 1827,
        "end_line": 1848
      },
      {
        "method_name": "issueCommand",
        "params": "(int argc, char **argv)",
        "start_line": 1850,
        "end_line": 1852
      },
      {
        "method_name": "*cliSplitArgs",
        "params": "(char *line, int *argc)",
        "start_line": 1860,
        "end_line": 1874
      },
      {
        "method_name": "cliSetPreferences",
        "params": "(char **argv, int argc, int interactive)",
        "start_line": 1879,
        "end_line": 1893
      },
      {
        "method_name": "cliLoadPreferences",
        "params": "(void)",
        "start_line": 1896,
        "end_line": 1914
      },
      {
        "method_name": "repl",
        "params": "(void)",
        "start_line": 1916,
        "end_line": 2052
      },
      {
        "method_name": "noninteractive",
        "params": "(int argc, char **argv)",
        "start_line": 2054,
        "end_line": 2064
      },
      {
        "method_name": "evalMode",
        "params": "(int argc, char **argv)",
        "start_line": 2070,
        "end_line": 2151
      },
      {
        "method_name": "createClusterManagerCommand",
        "params": "(char *cmdname, int argc, char **argv)",
        "start_line": 2327,
        "end_line": 2333
      },
      {
        "method_name": "*validateClusterManagerCommand",
        "params": "(void)",
        "start_line": 2336,
        "end_line": 2356
      },
      {
        "method_name": "parseClusterNodeAddress",
        "params": "(char *addr, char **ip_ptr, int *port_ptr,\n                                   int *bus_port_ptr)",
        "start_line": 2360,
        "end_line": 2374
      },
      {
        "method_name": "getClusterHostFromCmdArgs",
        "params": "(int argc, char **argv,\n                                     char **ip_ptr, int *port_ptr)",
        "start_line": 2383,
        "end_line": 2399
      },
      {
        "method_name": "freeClusterManagerNodeFlags",
        "params": "(list *flags)",
        "start_line": 2401,
        "end_line": 2410
      },
      {
        "method_name": "freeClusterManagerNode",
        "params": "(clusterManagerNode *node)",
        "start_line": 2412,
        "end_line": 2443
      },
      {
        "method_name": "freeClusterManager",
        "params": "(void)",
        "start_line": 2445,
        "end_line": 2468
      },
      {
        "method_name": "*clusterManagerNewNode",
        "params": "(char *ip, int port)",
        "start_line": 2470,
        "end_line": 2493
      },
      {
        "method_name": "clusterManagerGetNodeRDBFilename",
        "params": "(clusterManagerNode *node)",
        "start_line": 2495,
        "end_line": 2503
      },
      {
        "method_name": "clusterManagerCheckRedisReply",
        "params": "(clusterManagerNode *n,\n                                         redisReply *r, char **err)",
        "start_line": 2511,
        "end_line": 2523
      },
      {
        "method_name": "clusterManagerStartTransaction",
        "params": "(clusterManagerNode *node)",
        "start_line": 2526,
        "end_line": 2531
      },
      {
        "method_name": "clusterManagerExecTransaction",
        "params": "(clusterManagerNode *node,\n                                         clusterManagerOnReplyError onerror)",
        "start_line": 2536,
        "end_line": 2561
      },
      {
        "method_name": "clusterManagerNodeConnect",
        "params": "(clusterManagerNode *node)",
        "start_line": 2563,
        "end_line": 2600
      },
      {
        "method_name": "clusterManagerRemoveNodeFromList",
        "params": "(list *nodelist,\n                                             clusterManagerNode *node)",
        "start_line": 2603,
        "end_line": 2613
      },
      {
        "method_name": "*clusterManagerNodeByName",
        "params": "(const char *name)",
        "start_line": 2616,
        "end_line": 2634
      },
      {
        "method_name": "*clusterManagerNodeByAbbreviatedName",
        "params": "(const char*name)",
        "start_line": 2641,
        "end_line": 2660
      },
      {
        "method_name": "clusterManagerNodeResetSlots",
        "params": "(clusterManagerNode *node)",
        "start_line": 2662,
        "end_line": 2665
      },
      {
        "method_name": "*clusterManagerGetNodeRedisInfo",
        "params": "(clusterManagerNode *node,\n                                                  char **err)",
        "start_line": 2670,
        "end_line": 2683
      },
      {
        "method_name": "clusterManagerNodeIsCluster",
        "params": "(clusterManagerNode *node, char **err)",
        "start_line": 2685,
        "end_line": 2691
      },
      {
        "method_name": "clusterManagerNodeIsEmpty",
        "params": "(clusterManagerNode *node, char **err)",
        "start_line": 2695,
        "end_line": 2715
      },
      {
        "method_name": "clusterManagerGetAntiAffinityScore",
        "params": "(clusterManagerNodeArray *ipnodes,\n    int ip_count, clusterManagerNode ***offending, int *offending_len)",
        "start_line": 2748,
        "end_line": 2811
      },
      {
        "method_name": "clusterManagerOptimizeAntiAffinity",
        "params": "(clusterManagerNodeArray *ipnodes,\n    int ip_count)",
        "start_line": 2815,
        "end_line": 2889
      },
      {
        "method_name": "clusterManagerNodeFlagString",
        "params": "(clusterManagerNode *node)",
        "start_line": 2892,
        "end_line": 2907
      },
      {
        "method_name": "clusterManagerNodeSlotsString",
        "params": "(clusterManagerNode *node)",
        "start_line": 2910,
        "end_line": 2937
      },
      {
        "method_name": "clusterManagerNodeGetJSON",
        "params": "(clusterManagerNode *node,\n                                     unsigned long error_count)",
        "start_line": 2941,
        "end_line": 3011
      },
      {
        "method_name": "clusterManagerKeyHashSlot",
        "params": "(char *key, int keylen)",
        "start_line": 3024,
        "end_line": 3043
      },
      {
        "method_name": "clusterManagerNodeInfo",
        "params": "(clusterManagerNode *node, int indent)",
        "start_line": 3046,
        "end_line": 3075
      },
      {
        "method_name": "clusterManagerShowNodes",
        "params": "(void)",
        "start_line": 3077,
        "end_line": 3087
      },
      {
        "method_name": "clusterManagerShowClusterInfo",
        "params": "(void)",
        "start_line": 3089,
        "end_line": 3136
      },
      {
        "method_name": "clusterManagerAddSlots",
        "params": "(clusterManagerNode *node, char**err)",
        "start_line": 3140,
        "end_line": 3181
      },
      {
        "method_name": "*clusterManagerGetSlotOwner",
        "params": "(clusterManagerNode *n,\n                                                      int slot, char **err)",
        "start_line": 3189,
        "end_line": 3230
      },
      {
        "method_name": "clusterManagerSetSlot",
        "params": "(clusterManagerNode *node1,\n                                 clusterManagerNode *node2,\n                                 int slot, const char *status, char **err)",
        "start_line": 3235,
        "end_line": 3254
      },
      {
        "method_name": "clusterManagerClearSlotStatus",
        "params": "(clusterManagerNode *node, int slot)",
        "start_line": 3256,
        "end_line": 3262
      },
      {
        "method_name": "clusterManagerDelSlot",
        "params": "(clusterManagerNode *node, int slot,\n                                 int ignore_unassigned_err)",
        "start_line": 3266,
        "end_line": 3291
      },
      {
        "method_name": "clusterManagerAddSlot",
        "params": "(clusterManagerNode *node, int slot)",
        "start_line": 3293,
        "end_line": 3299
      },
      {
        "method_name": "clusterManagerCountKeysInSlot",
        "params": "(clusterManagerNode *node,\n                                                int slot)",
        "start_line": 3303,
        "end_line": 3311
      },
      {
        "method_name": "clusterManagerBumpEpoch",
        "params": "(clusterManagerNode *node)",
        "start_line": 3313,
        "end_line": 3318
      },
      {
        "method_name": "clusterManagerOnSetOwnerErr",
        "params": "(redisReply *reply,\n    clusterManagerNode *n, int bulk_idx)",
        "start_line": 3325,
        "end_line": 3330
      },
      {
        "method_name": "clusterManagerSetSlotOwner",
        "params": "(clusterManagerNode *owner,\n                                      int slot,\n                                      int do_clear)",
        "start_line": 3335,
        "end_line": 3346
      },
      {
        "method_name": "clusterManagerCompareKeysValues",
        "params": "(clusterManagerNode *n1,\n                                          clusterManagerNode *n2,\n                                          redisReply *keys_reply,\n                                          list *diffs)",
        "start_line": 3357,
        "end_line": 3410
      },
      {
        "method_name": "*clusterManagerMigrateKeysInReply",
        "params": "(clusterManagerNode *source,\n                                                    clusterManagerNode *target,\n                                                    redisReply *reply,\n                                                    int replace, int timeout,\n                                                    char *dots)",
        "start_line": 3420,
        "end_line": 3495
      },
      {
        "method_name": "clusterManagerMigrateKeysInSlot",
        "params": "(clusterManagerNode *source,\n                                           clusterManagerNode *target,\n                                           int slot, int timeout,\n                                           int pipeline, int verbose,\n                                           char **err)",
        "start_line": 3503,
        "end_line": 3653
      },
      {
        "method_name": "clusterManagerMoveSlot",
        "params": "(clusterManagerNode *source,\n                                  clusterManagerNode *target,\n                                  int slot, int opts,  char**err)",
        "start_line": 3667,
        "end_line": 3723
      },
      {
        "method_name": "clusterManagerFlushNodeConfig",
        "params": "(clusterManagerNode *node, char **err)",
        "start_line": 3727,
        "end_line": 3755
      },
      {
        "method_name": "clusterManagerWaitForClusterJoin",
        "params": "(void)",
        "start_line": 3758,
        "end_line": 3811
      },
      {
        "method_name": "clusterManagerNodeLoadInfo",
        "params": "(clusterManagerNode *node, int opts,\n                                      char **err)",
        "start_line": 3820,
        "end_line": 3992
      },
      {
        "method_name": "clusterManagerLoadInfoFromNode",
        "params": "(clusterManagerNode *node, int opts)",
        "start_line": 3998,
        "end_line": 4075
      },
      {
        "method_name": "clusterManagerSlotCompare",
        "params": "(const void *slot1, const void *slot2)",
        "start_line": 4078,
        "end_line": 4082
      },
      {
        "method_name": "clusterManagerSlotCountCompareDesc",
        "params": "(const void *n1, const void *n2)",
        "start_line": 4084,
        "end_line": 4088
      },
      {
        "method_name": "clusterManagerCompareNodeBalance",
        "params": "(const void *n1, const void *n2)",
        "start_line": 4090,
        "end_line": 4094
      },
      {
        "method_name": "clusterManagerGetConfigSignature",
        "params": "(clusterManagerNode *node)",
        "start_line": 4096,
        "end_line": 4187
      },
      {
        "method_name": "clusterManagerIsConfigConsistent",
        "params": "(void)",
        "start_line": 4189,
        "end_line": 4214
      },
      {
        "method_name": "*clusterManagerGetDisconnectedLinks",
        "params": "(clusterManagerNode *node)",
        "start_line": 4216,
        "end_line": 4258
      },
      {
        "method_name": "*clusterManagerGetLinkStatus",
        "params": "(void)",
        "start_line": 4263,
        "end_line": 4296
      },
      {
        "method_name": "clusterManagerOnError",
        "params": "(sds err)",
        "start_line": 4299,
        "end_line": 4304
      },
      {
        "method_name": "clusterManagerGetCoveredSlots",
        "params": "(char *all_slots)",
        "start_line": 4309,
        "end_line": 4325
      },
      {
        "method_name": "clusterManagerPrintSlotsList",
        "params": "(list *slots)",
        "start_line": 4327,
        "end_line": 4340
      },
      {
        "method_name": "clusterManagerGetNodeWithMostKeysInSlot",
        "params": "(list *nodes,\n                                                                    int slot,\n                                                                    char **err)",
        "start_line": 4347,
        "end_line": 4377
      },
      {
        "method_name": "*clusterManagerNodeWithLeastReplicas",
        "params": "()",
        "start_line": 4383,
        "end_line": 4398
      },
      {
        "method_name": "*clusterManagerNodeMasterRandom",
        "params": "()",
        "start_line": 4402,
        "end_line": 4426
      },
      {
        "method_name": "clusterManagerFixSlotsCoverage",
        "params": "(char *all_slots)",
        "start_line": 4428,
        "end_line": 4625
      },
      {
        "method_name": "clusterManagerFixOpenSlot",
        "params": "(int slot)",
        "start_line": 4630,
        "end_line": 4965
      },
      {
        "method_name": "clusterManagerFixMultipleSlotOwners",
        "params": "(int slot, list *owners)",
        "start_line": 4967,
        "end_line": 5002
      },
      {
        "method_name": "clusterManagerCheckCluster",
        "params": "(int quiet)",
        "start_line": 5004,
        "end_line": 5166
      },
      {
        "method_name": "*clusterNodeForResharding",
        "params": "(char *id,\n                                                    clusterManagerNode *target,\n                                                    int *raise_err)",
        "start_line": 5171,
        "end_line": 5190
      },
      {
        "method_name": "*clusterManagerComputeReshardTable",
        "params": "(list *sources, int numslots)",
        "start_line": 5192,
        "end_line": 5225
      },
      {
        "method_name": "clusterManagerShowReshardTable",
        "params": "(list *table)",
        "start_line": 5227,
        "end_line": 5236
      },
      {
        "method_name": "clusterManagerReleaseReshardTable",
        "params": "(list *table)",
        "start_line": 5238,
        "end_line": 5249
      },
      {
        "method_name": "clusterManagerLog",
        "params": "(int level, const char* fmt, ...)",
        "start_line": 5251,
        "end_line": 5269
      },
      {
        "method_name": "clusterManagerNodeArrayInit",
        "params": "(clusterManagerNodeArray *array,\n                                        int alloc_len)",
        "start_line": 5273,
        "end_line": 5278
      },
      {
        "method_name": "clusterManagerNodeArrayReset",
        "params": "(clusterManagerNodeArray *array)",
        "start_line": 5282,
        "end_line": 5292
      },
      {
        "method_name": "clusterManagerNodeArrayShift",
        "params": "(clusterManagerNodeArray *array,\n                                         clusterManagerNode **nodeptr)",
        "start_line": 5297,
        "end_line": 5306
      },
      {
        "method_name": "clusterManagerNodeArrayAdd",
        "params": "(clusterManagerNodeArray *array,\n                                       clusterManagerNode *node)",
        "start_line": 5310,
        "end_line": 5315
      },
      {
        "method_name": "clusterManagerPrintNotEmptyNodeError",
        "params": "(clusterManagerNode *node,\n                                                 char *err)",
        "start_line": 5319,
        "end_line": 5328
      },
      {
        "method_name": "clusterManagerPrintNotClusterNodeError",
        "params": "(clusterManagerNode *node,\n                                                   char *err)",
        "start_line": 5332,
        "end_line": 5335
      },
      {
        "method_name": "clusterManagerMode",
        "params": "(clusterManagerCommandProc *proc)",
        "start_line": 5338,
        "end_line": 5350
      },
      {
        "method_name": "clusterManagerCommandCreate",
        "params": "(int argc, char **argv)",
        "start_line": 5354,
        "end_line": 5628
      },
      {
        "method_name": "clusterManagerCommandAddNode",
        "params": "(int argc, char **argv)",
        "start_line": 5630,
        "end_line": 5725
      },
      {
        "method_name": "clusterManagerCommandDeleteNode",
        "params": "(int argc, char **argv)",
        "start_line": 5727,
        "end_line": 5792
      },
      {
        "method_name": "clusterManagerCommandInfo",
        "params": "(int argc, char **argv)",
        "start_line": 5794,
        "end_line": 5805
      },
      {
        "method_name": "clusterManagerCommandCheck",
        "params": "(int argc, char **argv)",
        "start_line": 5807,
        "end_line": 5818
      },
      {
        "method_name": "clusterManagerCommandFix",
        "params": "(int argc, char **argv)",
        "start_line": 5820,
        "end_line": 5823
      },
      {
        "method_name": "clusterManagerCommandReshard",
        "params": "(int argc, char **argv)",
        "start_line": 5825,
        "end_line": 6010
      },
      {
        "method_name": "clusterManagerCommandRebalance",
        "params": "(int argc, char **argv)",
        "start_line": 6012,
        "end_line": 6199
      },
      {
        "method_name": "clusterManagerCommandSetTimeout",
        "params": "(int argc, char **argv)",
        "start_line": 6201,
        "end_line": 6257
      },
      {
        "method_name": "clusterManagerCommandImport",
        "params": "(int argc, char **argv)",
        "start_line": 6259,
        "end_line": 6396
      },
      {
        "method_name": "clusterManagerCommandCall",
        "params": "(int argc, char **argv)",
        "start_line": 6398,
        "end_line": 6436
      },
      {
        "method_name": "clusterManagerCommandBackup",
        "params": "(int argc, char **argv)",
        "start_line": 6438,
        "end_line": 6500
      },
      {
        "method_name": "clusterManagerCommandHelp",
        "params": "(int argc, char **argv)",
        "start_line": 6502,
        "end_line": 6540
      },
      {
        "method_name": "latencyModePrint",
        "params": "(long long min, long long max, double avg, long long count)",
        "start_line": 6546,
        "end_line": 6556
      },
      {
        "method_name": "latencyMode",
        "params": "(void)",
        "start_line": 6560,
        "end_line": 6618
      },
      {
        "method_name": "showLatencyDistSamples",
        "params": "(struct distsamples *samples, long long tot)",
        "start_line": 6644,
        "end_line": 6663
      },
      {
        "method_name": "showLatencyDistLegend",
        "params": "(void)",
        "start_line": 6667,
        "end_line": 6682
      },
      {
        "method_name": "latencyDistMode",
        "params": "(void)",
        "start_line": 6684,
        "end_line": 6760
      },
      {
        "method_name": "sendReplconf",
        "params": "(const char* arg1, const char* arg2)",
        "start_line": 6768,
        "end_line": 6781
      },
      {
        "method_name": "sendCapa",
        "params": "()",
        "start_line": 6783,
        "end_line": 6785
      },
      {
        "method_name": "sendSync",
        "params": "(int fd, char *out_eof)",
        "start_line": 6790,
        "end_line": 6825
      },
      {
        "method_name": "slaveMode",
        "params": "(void)",
        "start_line": 6827,
        "end_line": 6886
      },
      {
        "method_name": "getRDB",
        "params": "(clusterManagerNode *node)",
        "start_line": 6894,
        "end_line": 6980
      },
      {
        "method_name": "pipeMode",
        "params": "(void)",
        "start_line": 6987,
        "end_line": 7147
      },
      {
        "method_name": "*sendScan",
        "params": "(unsigned long long *it)",
        "start_line": 7153,
        "end_line": 7179
      },
      {
        "method_name": "getDbSize",
        "params": "(void)",
        "start_line": 7181,
        "end_line": 7197
      },
      {
        "method_name": "typeinfo_add",
        "params": "(dict *types, char* name, typeinfo* type_template)",
        "start_line": 7217,
        "end_line": 7223
      },
      {
        "method_name": "type_free",
        "params": "(void* priv_data, void* val)",
        "start_line": 7225,
        "end_line": 7232
      },
      {
        "method_name": "getKeyTypes",
        "params": "(dict *types_dict, redisReply *keys, typeinfo **types)",
        "start_line": 7243,
        "end_line": 7280
      },
      {
        "method_name": "getKeySizes",
        "params": "(redisReply *keys, typeinfo **types,\n                        unsigned long long *sizes, int memkeys,\n                        unsigned memkeys_samples)",
        "start_line": 7285,
        "end_line": 7333
      },
      {
        "method_name": "findBigKeys",
        "params": "(int memkeys, unsigned memkeys_samples)",
        "start_line": 7335,
        "end_line": 7468
      },
      {
        "method_name": "getKeyFreqs",
        "params": "(redisReply *keys, unsigned long long *freqs)",
        "start_line": 7470,
        "end_line": 7498
      },
      {
        "method_name": "findHotKeys",
        "params": "(void)",
        "start_line": 7501,
        "end_line": 7591
      },
      {
        "method_name": "*getInfoField",
        "params": "(char *info, char *field)",
        "start_line": 7600,
        "end_line": 7614
      },
      {
        "method_name": "getLongInfoField",
        "params": "(char *info, char *field)",
        "start_line": 7618,
        "end_line": 7626
      },
      {
        "method_name": "bytesToHuman",
        "params": "(char *s, long long n)",
        "start_line": 7630,
        "end_line": 7652
      },
      {
        "method_name": "statMode",
        "params": "(void)",
        "start_line": 7654,
        "end_line": 7738
      },
      {
        "method_name": "scanMode",
        "params": "(void)",
        "start_line": 7744,
        "end_line": 7771
      },
      {
        "method_name": "powerLawRand",
        "params": "(long long min, long long max, double alpha)",
        "start_line": 7783,
        "end_line": 7792
      },
      {
        "method_name": "LRUTestGenKey",
        "params": "(char *buf, size_t buflen)",
        "start_line": 7796,
        "end_line": 7799
      },
      {
        "method_name": "LRUTestMode",
        "params": "(void)",
        "start_line": 7803,
        "end_line": 7862
      },
      {
        "method_name": "compute_something_fast",
        "params": "(void)",
        "start_line": 7875,
        "end_line": 7893
      },
      {
        "method_name": "intrinsicLatencyModeStop",
        "params": "(int s)",
        "start_line": 7895,
        "end_line": 7898
      },
      {
        "method_name": "intrinsicLatencyMode",
        "params": "(void)",
        "start_line": 7900,
        "end_line": 7935
      },
      {
        "method_name": "askPassword",
        "params": "()",
        "start_line": 7937,
        "end_line": 7942
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 7948,
        "end_line": 8135
      }
    ],
    "structs": [
      {
        "struct_name": "clusterManagerCommand",
        "start_line": 171,
        "end_line": 187
      },
      {
        "struct_name": "config",
        "start_line": 193,
        "end_line": 248
      },
      {
        "struct_name": "pref",
        "start_line": 251,
        "end_line": 253
      },
      {
        "struct_name": "",
        "start_line": 466,
        "end_line": 474
      },
      {
        "struct_name": "clusterManager",
        "start_line": 2158,
        "end_line": 2162
      },
      {
        "struct_name": "clusterManagerNode",
        "start_line": 2167,
        "end_line": 2191
      },
      {
        "struct_name": "clusterManagerNodeArray",
        "start_line": 2194,
        "end_line": 2199
      },
      {
        "struct_name": "clusterManagerReshardTableItem",
        "start_line": 2202,
        "end_line": 2205
      },
      {
        "struct_name": "clusterManagerLink",
        "start_line": 2209,
        "end_line": 2214
      },
      {
        "struct_name": "clusterManagerCommandDef",
        "start_line": 2289,
        "end_line": 2295
      },
      {
        "struct_name": "distsamples",
        "start_line": 6627,
        "end_line": 6631
      },
      {
        "struct_name": "",
        "start_line": 7199,
        "end_line": 7207
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/redisassert.h",
    "line": 49,
    "headers": [
      "unistd.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/redismodule.h",
    "line": 938,
    "headers": [
      "sys/types.h",
      "stdint.h",
      "stdio.h"
    ],
    "methods": [
      {
        "method_name": "RedisModule_Init",
        "params": "(RedisModuleCtx *ctx, const char *name, int ver, int apiver)",
        "start_line": 689,
        "end_line": 927
      }
    ],
    "structs": [
      {
        "struct_name": "RedisModuleEvent",
        "start_line": 194,
        "end_line": 197
      },
      {
        "struct_name": "RedisModuleClientInfo",
        "start_line": 306,
        "end_line": 313
      },
      {
        "struct_name": "RedisModuleReplicationInfo",
        "start_line": 318,
        "end_line": 329
      },
      {
        "struct_name": "RedisModuleFlushInfo",
        "start_line": 334,
        "end_line": 340
      },
      {
        "struct_name": "RedisModuleModuleChange",
        "start_line": 345,
        "end_line": 351
      },
      {
        "struct_name": "RedisModuleCronLoopInfo",
        "start_line": 356,
        "end_line": 361
      },
      {
        "struct_name": "RedisModuleLoadingProgressInfo",
        "start_line": 366,
        "end_line": 373
      },
      {
        "struct_name": "RedisModuleTypeMethods",
        "start_line": 423,
        "end_line": 434
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/release.c",
    "line": 66,
    "headers": [
      "string.h",
      "stdio.h",
      "release.h",
      "version.h",
      "crc64.h"
    ],
    "methods": [
      {
        "method_name": "*redisGitSHA1",
        "params": "(void)",
        "start_line": 41,
        "end_line": 43
      },
      {
        "method_name": "*redisGitDirty",
        "params": "(void)",
        "start_line": 45,
        "end_line": 47
      },
      {
        "method_name": "redisBuildId",
        "params": "(void)",
        "start_line": 49,
        "end_line": 53
      },
      {
        "method_name": "*redisBuildIdString",
        "params": "(void)",
        "start_line": 58,
        "end_line": 66
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/replication.c",
    "line": 3319,
    "headers": [
      "server.h",
      "cluster.h",
      "bio.h",
      "sys/time.h",
      "unistd.h",
      "fcntl.h",
      "sys/socket.h",
      "sys/stat.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "*replicationGetSlaveName",
        "params": "(client *c)",
        "start_line": 59,
        "end_line": 80
      },
      {
        "method_name": "bg_unlink",
        "params": "(const char *filename)",
        "start_line": 88,
        "end_line": 108
      },
      {
        "method_name": "createReplicationBacklog",
        "params": "(void)",
        "start_line": 112,
        "end_line": 122
      },
      {
        "method_name": "resizeReplicationBacklog",
        "params": "(long long newsize)",
        "start_line": 130,
        "end_line": 149
      },
      {
        "method_name": "freeReplicationBacklog",
        "params": "(void)",
        "start_line": 151,
        "end_line": 155
      },
      {
        "method_name": "feedReplicationBacklog",
        "params": "(void *ptr, size_t len)",
        "start_line": 161,
        "end_line": 184
      },
      {
        "method_name": "feedReplicationBacklogWithObject",
        "params": "(robj *o)",
        "start_line": 188,
        "end_line": 201
      },
      {
        "method_name": "replicationFeedSlaves",
        "params": "(list *slaves, int dictid, robj **argv, int argc)",
        "start_line": 208,
        "end_line": 308
      },
      {
        "method_name": "showLatestBacklog",
        "params": "(void)",
        "start_line": 314,
        "end_line": 342
      },
      {
        "method_name": "replicationFeedSlavesFromMasterStream",
        "params": "(list *slaves, char *buf, size_t buflen)",
        "start_line": 347,
        "end_line": 370
      },
      {
        "method_name": "replicationFeedMonitors",
        "params": "(client *c, list *monitors, int dictid, robj **argv, int argc)",
        "start_line": 372,
        "end_line": 409
      },
      {
        "method_name": "addReplyReplicationBacklog",
        "params": "(client *c, long long offset)",
        "start_line": 413,
        "end_line": 461
      },
      {
        "method_name": "getPsyncInitialOffset",
        "params": "(void)",
        "start_line": 467,
        "end_line": 469
      },
      {
        "method_name": "replicationSetupSlaveForFullResync",
        "params": "(client *slave, long long offset)",
        "start_line": 487,
        "end_line": 509
      },
      {
        "method_name": "masterTryPartialResynchronization",
        "params": "(client *c)",
        "start_line": 516,
        "end_line": 618
      },
      {
        "method_name": "startBgsaveForReplication",
        "params": "(int mincapa)",
        "start_line": 638,
        "end_line": 708
      },
      {
        "method_name": "syncCommand",
        "params": "(client *c)",
        "start_line": 711,
        "end_line": 849
      },
      {
        "method_name": "replconfCommand",
        "params": "(client *c)",
        "start_line": 863,
        "end_line": 930
      },
      {
        "method_name": "putSlaveOnline",
        "params": "(client *slave)",
        "start_line": 946,
        "end_line": 962
      },
      {
        "method_name": "removeRDBUsedToSyncReplicas",
        "params": "(void)",
        "start_line": 969,
        "end_line": 1009
      },
      {
        "method_name": "sendBulkToSlave",
        "params": "(connection *conn)",
        "start_line": 1011,
        "end_line": 1064
      },
      {
        "method_name": "rdbPipeWriteHandlerConnRemoved",
        "params": "(struct connection *conn)",
        "start_line": 1068,
        "end_line": 1079
      },
      {
        "method_name": "rdbPipeWriteHandler",
        "params": "(struct connection *conn)",
        "start_line": 1083,
        "end_line": 1103
      },
      {
        "method_name": "RdbPipeCleanup",
        "params": "()",
        "start_line": 1108,
        "end_line": 1121
      },
      {
        "method_name": "rdbPipeReadHandler",
        "params": "(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask)",
        "start_line": 1124,
        "end_line": 1210
      },
      {
        "method_name": "updateSlavesWaitingBgsave",
        "params": "(int bgsaveerr, int type)",
        "start_line": 1226,
        "end_line": 1307
      },
      {
        "method_name": "changeReplicationId",
        "params": "(void)",
        "start_line": 1313,
        "end_line": 1316
      },
      {
        "method_name": "clearReplicationId2",
        "params": "(void)",
        "start_line": 1321,
        "end_line": 1325
      },
      {
        "method_name": "shiftReplicationId",
        "params": "(void)",
        "start_line": 1332,
        "end_line": 1344
      },
      {
        "method_name": "slaveIsInHandshakeState",
        "params": "(void)",
        "start_line": 1350,
        "end_line": 1353
      },
      {
        "method_name": "replicationSendNewlineToMaster",
        "params": "(void)",
        "start_line": 1363,
        "end_line": 1370
      },
      {
        "method_name": "replicationEmptyDbCallback",
        "params": "(void *privdata)",
        "start_line": 1374,
        "end_line": 1377
      },
      {
        "method_name": "replicationCreateMasterClient",
        "params": "(connection *conn, int dbid)",
        "start_line": 1382,
        "end_line": 1398
      },
      {
        "method_name": "restartAOFAfterSYNC",
        "params": "()",
        "start_line": 1404,
        "end_line": 1419
      },
      {
        "method_name": "useDisklessLoad",
        "params": "()",
        "start_line": 1421,
        "end_line": 1432
      },
      {
        "method_name": "*disklessLoadMakeBackups",
        "params": "(void)",
        "start_line": 1437,
        "end_line": 1445
      },
      {
        "method_name": "disklessLoadRestoreBackups",
        "params": "(redisDb *backup, int restore, int empty_db_flags)",
        "start_line": 1458,
        "end_line": 1476
      },
      {
        "method_name": "readSyncBulkPayload",
        "params": "(connection *conn)",
        "start_line": 1480,
        "end_line": 1835
      },
      {
        "method_name": "*sendSynchronousCommand",
        "params": "(int flags, connection *conn, ...)",
        "start_line": 1846,
        "end_line": 1898
      },
      {
        "method_name": "slaveTryPartialResynchronization",
        "params": "(connection *conn, int read_reply)",
        "start_line": 1954,
        "end_line": 2110
      },
      {
        "method_name": "syncWithMaster",
        "params": "(connection *conn)",
        "start_line": 2114,
        "end_line": 2406
      },
      {
        "method_name": "connectWithMaster",
        "params": "(void)",
        "start_line": 2408,
        "end_line": 2423
      },
      {
        "method_name": "undoConnectWithMaster",
        "params": "(void)",
        "start_line": 2429,
        "end_line": 2432
      },
      {
        "method_name": "replicationAbortSyncTransfer",
        "params": "(void)",
        "start_line": 2437,
        "end_line": 2447
      },
      {
        "method_name": "cancelReplicationHandshake",
        "params": "(void)",
        "start_line": 2457,
        "end_line": 2470
      },
      {
        "method_name": "replicationSetMaster",
        "params": "(char *ip, int port)",
        "start_line": 2473,
        "end_line": 2507
      },
      {
        "method_name": "replicationUnsetMaster",
        "params": "(void)",
        "start_line": 2510,
        "end_line": 2560
      },
      {
        "method_name": "replicationHandleMasterDisconnection",
        "params": "(void)",
        "start_line": 2564,
        "end_line": 2577
      },
      {
        "method_name": "replicaofCommand",
        "params": "(client *c)",
        "start_line": 2579,
        "end_line": 2632
      },
      {
        "method_name": "roleCommand",
        "params": "(client *c)",
        "start_line": 2637,
        "end_line": 2688
      },
      {
        "method_name": "replicationSendAck",
        "params": "(void)",
        "start_line": 2693,
        "end_line": 2704
      },
      {
        "method_name": "replicationCacheMaster",
        "params": "(client *c)",
        "start_line": 2726,
        "end_line": 2761
      },
      {
        "method_name": "replicationCacheMasterUsingMyself",
        "params": "(void)",
        "start_line": 2772,
        "end_line": 2795
      },
      {
        "method_name": "replicationDiscardCachedMaster",
        "params": "(void)",
        "start_line": 2799,
        "end_line": 2806
      },
      {
        "method_name": "replicationResurrectCachedMaster",
        "params": "(connection *conn)",
        "start_line": 2814,
        "end_line": 2840
      },
      {
        "method_name": "refreshGoodSlavesCount",
        "params": "(void)",
        "start_line": 2847,
        "end_line": 2864
      },
      {
        "method_name": "replicationScriptCacheInit",
        "params": "(void)",
        "start_line": 2898,
        "end_line": 2902
      },
      {
        "method_name": "replicationScriptCacheFlush",
        "params": "(void)",
        "start_line": 2915,
        "end_line": 2919
      },
      {
        "method_name": "replicationScriptCacheAdd",
        "params": "(sds sha1)",
        "start_line": 2923,
        "end_line": 2942
      },
      {
        "method_name": "replicationScriptCacheExists",
        "params": "(sds sha1)",
        "start_line": 2946,
        "end_line": 2948
      },
      {
        "method_name": "replicationRequestAckFromSlaves",
        "params": "(void)",
        "start_line": 2980,
        "end_line": 2982
      },
      {
        "method_name": "replicationCountAcksByOffset",
        "params": "(long long offset)",
        "start_line": 2986,
        "end_line": 2999
      },
      {
        "method_name": "waitCommand",
        "params": "(client *c)",
        "start_line": 3003,
        "end_line": 3037
      },
      {
        "method_name": "unblockClientWaitingReplicas",
        "params": "(client *c)",
        "start_line": 3043,
        "end_line": 3047
      },
      {
        "method_name": "processClientsWaitingReplicas",
        "params": "(void)",
        "start_line": 3051,
        "end_line": 3082
      },
      {
        "method_name": "replicationGetSlaveOffset",
        "params": "(void)",
        "start_line": 3086,
        "end_line": 3102
      },
      {
        "method_name": "replicationCron",
        "params": "(void)",
        "start_line": 3107,
        "end_line": 3319
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rio.c",
    "line": 445,
    "headers": [
      "fmacros.h",
      "string.h",
      "stdio.h",
      "unistd.h",
      "rio.h",
      "util.h",
      "crc64.h",
      "config.h",
      "server.h"
    ],
    "methods": [
      {
        "method_name": "rioBufferWrite",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 61,
        "end_line": 65
      },
      {
        "method_name": "rioBufferRead",
        "params": "(rio *r, void *buf, size_t len)",
        "start_line": 68,
        "end_line": 74
      },
      {
        "method_name": "rioBufferTell",
        "params": "(rio *r)",
        "start_line": 77,
        "end_line": 79
      },
      {
        "method_name": "rioBufferFlush",
        "params": "(rio *r)",
        "start_line": 83,
        "end_line": 86
      },
      {
        "method_name": "rioInitWithBuffer",
        "params": "(rio *r, sds s)",
        "start_line": 101,
        "end_line": 105
      },
      {
        "method_name": "rioFileWrite",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 110,
        "end_line": 124
      },
      {
        "method_name": "rioFileRead",
        "params": "(rio *r, void *buf, size_t len)",
        "start_line": 127,
        "end_line": 129
      },
      {
        "method_name": "rioFileTell",
        "params": "(rio *r)",
        "start_line": 132,
        "end_line": 134
      },
      {
        "method_name": "rioFileFlush",
        "params": "(rio *r)",
        "start_line": 138,
        "end_line": 140
      },
      {
        "method_name": "rioInitWithFile",
        "params": "(rio *r, FILE *fp)",
        "start_line": 155,
        "end_line": 160
      },
      {
        "method_name": "rioConnWrite",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 168,
        "end_line": 173
      },
      {
        "method_name": "rioConnRead",
        "params": "(rio *r, void *buf, size_t len)",
        "start_line": 176,
        "end_line": 222
      },
      {
        "method_name": "rioConnTell",
        "params": "(rio *r)",
        "start_line": 225,
        "end_line": 227
      },
      {
        "method_name": "rioConnFlush",
        "params": "(rio *r)",
        "start_line": 231,
        "end_line": 235
      },
      {
        "method_name": "rioInitWithConn",
        "params": "(rio *r, connection *conn, size_t read_limit)",
        "start_line": 252,
        "end_line": 260
      },
      {
        "method_name": "rioFreeConn",
        "params": "(rio *r, sds *remaining)",
        "start_line": 264,
        "end_line": 273
      },
      {
        "method_name": "rioFdWrite",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 286,
        "end_line": 332
      },
      {
        "method_name": "rioFdRead",
        "params": "(rio *r, void *buf, size_t len)",
        "start_line": 335,
        "end_line": 340
      },
      {
        "method_name": "rioFdTell",
        "params": "(rio *r)",
        "start_line": 343,
        "end_line": 345
      },
      {
        "method_name": "rioFdFlush",
        "params": "(rio *r)",
        "start_line": 349,
        "end_line": 353
      },
      {
        "method_name": "rioInitWithFd",
        "params": "(rio *r, int fd)",
        "start_line": 368,
        "end_line": 373
      },
      {
        "method_name": "rioFreeFd",
        "params": "(rio *r)",
        "start_line": 376,
        "end_line": 378
      },
      {
        "method_name": "rioGenericUpdateChecksum",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 384,
        "end_line": 386
      },
      {
        "method_name": "rioSetAutoSync",
        "params": "(rio *r, off_t bytes)",
        "start_line": 396,
        "end_line": 399
      },
      {
        "method_name": "rioWriteBulkCount",
        "params": "(rio *r, char prefix, long count)",
        "start_line": 407,
        "end_line": 417
      },
      {
        "method_name": "rioWriteBulkString",
        "params": "(rio *r, const char *buf, size_t len)",
        "start_line": 420,
        "end_line": 427
      },
      {
        "method_name": "rioWriteBulkLongLong",
        "params": "(rio *r, long long l)",
        "start_line": 430,
        "end_line": 436
      },
      {
        "method_name": "rioWriteBulkDouble",
        "params": "(rio *r, double d)",
        "start_line": 439,
        "end_line": 445
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/rio.h",
    "line": 178,
    "headers": [
      "stdio.h",
      "stdint.h",
      "sds.h",
      "connection.h"
    ],
    "methods": [
      {
        "method_name": "rioWrite",
        "params": "(rio *r, const void *buf, size_t len)",
        "start_line": 103,
        "end_line": 117
      },
      {
        "method_name": "rioRead",
        "params": "(rio *r, void *buf, size_t len)",
        "start_line": 119,
        "end_line": 133
      },
      {
        "method_name": "rioTell",
        "params": "(rio *r)",
        "start_line": 135,
        "end_line": 137
      },
      {
        "method_name": "rioFlush",
        "params": "(rio *r)",
        "start_line": 139,
        "end_line": 141
      },
      {
        "method_name": "rioGetReadError",
        "params": "(rio *r)",
        "start_line": 146,
        "end_line": 148
      },
      {
        "method_name": "rioGetWriteError",
        "params": "(rio *r)",
        "start_line": 151,
        "end_line": 153
      },
      {
        "method_name": "rioClearErrors",
        "params": "(rio *r)",
        "start_line": 155,
        "end_line": 157
      }
    ],
    "structs": [
      {
        "struct_name": "_rio",
        "start_line": 43,
        "end_line": 95
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/scripting.c",
    "line": 2718,
    "headers": [
      "server.h",
      "sha1.h",
      "rand.h",
      "cluster.h",
      "lua.h",
      "lauxlib.h",
      "lualib.h",
      "ctype.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "sha1hex",
        "params": "(char *digest, char *script, size_t len)",
        "start_line": 92,
        "end_line": 107
      },
      {
        "method_name": "*redisProtocolToLuaType",
        "params": "(lua_State *lua, char* reply)",
        "start_line": 130,
        "end_line": 146
      },
      {
        "method_name": "*redisProtocolToLuaType_Int",
        "params": "(lua_State *lua, char *reply)",
        "start_line": 148,
        "end_line": 155
      },
      {
        "method_name": "*redisProtocolToLuaType_Bulk",
        "params": "(lua_State *lua, char *reply)",
        "start_line": 157,
        "end_line": 169
      },
      {
        "method_name": "*redisProtocolToLuaType_Status",
        "params": "(lua_State *lua, char *reply)",
        "start_line": 171,
        "end_line": 179
      },
      {
        "method_name": "*redisProtocolToLuaType_Error",
        "params": "(lua_State *lua, char *reply)",
        "start_line": 181,
        "end_line": 189
      },
      {
        "method_name": "*redisProtocolToLuaType_Aggregate",
        "params": "(lua_State *lua, char *reply, int atype)",
        "start_line": 191,
        "end_line": 230
      },
      {
        "method_name": "*redisProtocolToLuaType_Null",
        "params": "(lua_State *lua, char *reply)",
        "start_line": 232,
        "end_line": 236
      },
      {
        "method_name": "*redisProtocolToLuaType_Bool",
        "params": "(lua_State *lua, char *reply, int tf)",
        "start_line": 238,
        "end_line": 242
      },
      {
        "method_name": "*redisProtocolToLuaType_Double",
        "params": "(lua_State *lua, char *reply)",
        "start_line": 244,
        "end_line": 263
      },
      {
        "method_name": "luaPushError",
        "params": "(lua_State *lua, char *error)",
        "start_line": 270,
        "end_line": 292
      },
      {
        "method_name": "luaRaiseError",
        "params": "(lua_State *lua)",
        "start_line": 298,
        "end_line": 302
      },
      {
        "method_name": "luaSortArray",
        "params": "(lua_State *lua)",
        "start_line": 310,
        "end_line": 333
      },
      {
        "method_name": "luaReplyToRedisReply",
        "params": "(client *c, lua_State *lua)",
        "start_line": 341,
        "end_line": 467
      },
      {
        "method_name": "luaRedisGenericCommand",
        "params": "(lua_State *lua, int raise_error)",
        "start_line": 475,
        "end_line": 806
      },
      {
        "method_name": "luaRedisCallCommand",
        "params": "(lua_State *lua)",
        "start_line": 809,
        "end_line": 811
      },
      {
        "method_name": "luaRedisPCallCommand",
        "params": "(lua_State *lua)",
        "start_line": 814,
        "end_line": 816
      },
      {
        "method_name": "luaRedisSha1hexCommand",
        "params": "(lua_State *lua)",
        "start_line": 820,
        "end_line": 835
      },
      {
        "method_name": "luaRedisReturnSingleFieldTable",
        "params": "(lua_State *lua, char *field)",
        "start_line": 844,
        "end_line": 855
      },
      {
        "method_name": "luaRedisErrorReplyCommand",
        "params": "(lua_State *lua)",
        "start_line": 858,
        "end_line": 860
      },
      {
        "method_name": "luaRedisStatusReplyCommand",
        "params": "(lua_State *lua)",
        "start_line": 863,
        "end_line": 865
      },
      {
        "method_name": "luaRedisReplicateCommandsCommand",
        "params": "(lua_State *lua)",
        "start_line": 873,
        "end_line": 885
      },
      {
        "method_name": "luaRedisBreakpointCommand",
        "params": "(lua_State *lua)",
        "start_line": 892,
        "end_line": 900
      },
      {
        "method_name": "luaRedisDebugCommand",
        "params": "(lua_State *lua)",
        "start_line": 907,
        "end_line": 917
      },
      {
        "method_name": "luaRedisSetReplCommand",
        "params": "(lua_State *lua)",
        "start_line": 923,
        "end_line": 942
      },
      {
        "method_name": "luaLogCommand",
        "params": "(lua_State *lua)",
        "start_line": 945,
        "end_line": 979
      },
      {
        "method_name": "luaSetResp",
        "params": "(lua_State *lua)",
        "start_line": 982,
        "end_line": 998
      },
      {
        "method_name": "luaLoadLib",
        "params": "(lua_State *lua, const char *libname, lua_CFunction luafunc)",
        "start_line": 1004,
        "end_line": 1008
      },
      {
        "method_name": "luaLoadLibraries",
        "params": "(lua_State *lua)",
        "start_line": 1015,
        "end_line": 1030
      },
      {
        "method_name": "luaRemoveUnsupportedFunctions",
        "params": "(lua_State *lua)",
        "start_line": 1034,
        "end_line": 1039
      },
      {
        "method_name": "scriptingEnableGlobalsProtection",
        "params": "(lua_State *lua)",
        "start_line": 1046,
        "end_line": 1078
      },
      {
        "method_name": "scriptingInit",
        "params": "(int setup)",
        "start_line": 1090,
        "end_line": 1266
      },
      {
        "method_name": "scriptingRelease",
        "params": "(void)",
        "start_line": 1270,
        "end_line": 1274
      },
      {
        "method_name": "scriptingReset",
        "params": "(void)",
        "start_line": 1276,
        "end_line": 1279
      },
      {
        "method_name": "luaSetGlobalArray",
        "params": "(lua_State *lua, char *var, robj **elev, int elec)",
        "start_line": 1283,
        "end_line": 1292
      },
      {
        "method_name": "redis_math_random",
        "params": "(lua_State *L)",
        "start_line": 1304,
        "end_line": 1330
      },
      {
        "method_name": "redis_math_randomseed",
        "params": "(lua_State *L)",
        "start_line": 1332,
        "end_line": 1335
      },
      {
        "method_name": "luaCreateFunction",
        "params": "(client *c, lua_State *lua, robj *body)",
        "start_line": 1358,
        "end_line": 1410
      },
      {
        "method_name": "luaMaskCountHook",
        "params": "(lua_State *lua, lua_Debug *ar)",
        "start_line": 1413,
        "end_line": 1440
      },
      {
        "method_name": "prepareLuaClient",
        "params": "(void)",
        "start_line": 1442,
        "end_line": 1451
      },
      {
        "method_name": "resetLuaClient",
        "params": "(void)",
        "start_line": 1453,
        "end_line": 1456
      },
      {
        "method_name": "evalGenericCommand",
        "params": "(client *c, int evalsha)",
        "start_line": 1458,
        "end_line": 1661
      },
      {
        "method_name": "evalCommand",
        "params": "(client *c)",
        "start_line": 1663,
        "end_line": 1668
      },
      {
        "method_name": "evalShaCommand",
        "params": "(client *c)",
        "start_line": 1670,
        "end_line": 1685
      },
      {
        "method_name": "scriptCommand",
        "params": "(client *c)",
        "start_line": 1687,
        "end_line": 1751
      },
      {
        "method_name": "ldbInit",
        "params": "(void)",
        "start_line": 1758,
        "end_line": 1767
      },
      {
        "method_name": "ldbFlushLog",
        "params": "(list *log)",
        "start_line": 1770,
        "end_line": 1775
      },
      {
        "method_name": "ldbEnable",
        "params": "(client *c)",
        "start_line": 1778,
        "end_line": 1789
      },
      {
        "method_name": "ldbDisable",
        "params": "(client *c)",
        "start_line": 1794,
        "end_line": 1796
      },
      {
        "method_name": "ldbLog",
        "params": "(sds entry)",
        "start_line": 1799,
        "end_line": 1801
      },
      {
        "method_name": "ldbLogWithMaxLen",
        "params": "(sds entry)",
        "start_line": 1807,
        "end_line": 1820
      },
      {
        "method_name": "ldbSendLogs",
        "params": "(void)",
        "start_line": 1825,
        "end_line": 1842
      },
      {
        "method_name": "ldbStartSession",
        "params": "(client *c)",
        "start_line": 1856,
        "end_line": 1905
      },
      {
        "method_name": "ldbEndSession",
        "params": "(client *c)",
        "start_line": 1909,
        "end_line": 1936
      },
      {
        "method_name": "ldbRemoveChild",
        "params": "(pid_t pid)",
        "start_line": 1941,
        "end_line": 1948
      },
      {
        "method_name": "ldbPendingChildren",
        "params": "(void)",
        "start_line": 1952,
        "end_line": 1954
      },
      {
        "method_name": "ldbKillForkedSessions",
        "params": "(void)",
        "start_line": 1957,
        "end_line": 1969
      },
      {
        "method_name": "evalGenericCommandWithDebugging",
        "params": "(client *c, int evalsha)",
        "start_line": 1973,
        "end_line": 1980
      },
      {
        "method_name": "*ldbGetSourceLine",
        "params": "(int line)",
        "start_line": 1984,
        "end_line": 1988
      },
      {
        "method_name": "ldbIsBreakpoint",
        "params": "(int line)",
        "start_line": 1991,
        "end_line": 1997
      },
      {
        "method_name": "ldbAddBreakpoint",
        "params": "(int line)",
        "start_line": 2002,
        "end_line": 2009
      },
      {
        "method_name": "ldbDelBreakpoint",
        "params": "(int line)",
        "start_line": 2013,
        "end_line": 2024
      },
      {
        "method_name": "*ldbReplParseCommand",
        "params": "(int *argcp)",
        "start_line": 2029,
        "end_line": 2073
      },
      {
        "method_name": "ldbLogSourceLine",
        "params": "(int lnum)",
        "start_line": 2076,
        "end_line": 2092
      },
      {
        "method_name": "ldbList",
        "params": "(int around, int context)",
        "start_line": 2099,
        "end_line": 2106
      },
      {
        "method_name": "ldbCatStackValueRec",
        "params": "(sds s, lua_State *lua, int idx, int level)",
        "start_line": 2116,
        "end_line": 2197
      },
      {
        "method_name": "ldbCatStackValue",
        "params": "(sds s, lua_State *lua, int idx)",
        "start_line": 2201,
        "end_line": 2203
      },
      {
        "method_name": "ldbLogStackValue",
        "params": "(lua_State *lua, char *prefix)",
        "start_line": 2208,
        "end_line": 2212
      },
      {
        "method_name": "*ldbRedisProtocolToHuman",
        "params": "(sds *o, char *reply)",
        "start_line": 2229,
        "end_line": 2244
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Int",
        "params": "(sds *o, char *reply)",
        "start_line": 2249,
        "end_line": 2253
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Bulk",
        "params": "(sds *o, char *reply)",
        "start_line": 2255,
        "end_line": 2267
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Status",
        "params": "(sds *o, char *reply)",
        "start_line": 2269,
        "end_line": 2274
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_MultiBulk",
        "params": "(sds *o, char *reply)",
        "start_line": 2276,
        "end_line": 2294
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Set",
        "params": "(sds *o, char *reply)",
        "start_line": 2296,
        "end_line": 2310
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Map",
        "params": "(sds *o, char *reply)",
        "start_line": 2312,
        "end_line": 2328
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Null",
        "params": "(sds *o, char *reply)",
        "start_line": 2330,
        "end_line": 2334
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Bool",
        "params": "(sds *o, char *reply)",
        "start_line": 2336,
        "end_line": 2343
      },
      {
        "method_name": "*ldbRedisProtocolToHuman_Double",
        "params": "(sds *o, char *reply)",
        "start_line": 2345,
        "end_line": 2350
      },
      {
        "method_name": "ldbLogRedisReply",
        "params": "(char *reply)",
        "start_line": 2355,
        "end_line": 2359
      },
      {
        "method_name": "ldbPrint",
        "params": "(lua_State *lua, char *varname)",
        "start_line": 2364,
        "end_line": 2392
      },
      {
        "method_name": "ldbPrintAll",
        "params": "(lua_State *lua)",
        "start_line": 2396,
        "end_line": 2418
      },
      {
        "method_name": "ldbBreak",
        "params": "(sds *argv, int argc)",
        "start_line": 2421,
        "end_line": 2460
      },
      {
        "method_name": "ldbEval",
        "params": "(lua_State *lua, sds *argv, int argc)",
        "start_line": 2465,
        "end_line": 2493
      },
      {
        "method_name": "ldbRedis",
        "params": "(lua_State *lua, sds *argv, int argc)",
        "start_line": 2499,
        "end_line": 2513
      },
      {
        "method_name": "ldbTrace",
        "params": "(lua_State *lua)",
        "start_line": 2517,
        "end_line": 2534
      },
      {
        "method_name": "ldbMaxlen",
        "params": "(sds *argv, int argc)",
        "start_line": 2538,
        "end_line": 2550
      },
      {
        "method_name": "ldbRepl",
        "params": "(lua_State *lua)",
        "start_line": 2555,
        "end_line": 2668
      },
      {
        "method_name": "luaLdbLineHook",
        "params": "(lua_State *lua, lua_Debug *ar)",
        "start_line": 2672,
        "end_line": 2717
      }
    ],
    "structs": [
      {
        "struct_name": "ldbState",
        "start_line": 63,
        "end_line": 80
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sds.c",
    "line": 1300,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "ctype.h",
      "assert.h",
      "limits.h",
      "sds.h",
      "sdsalloc.h",
      "stdio.h",
      "testhelp.h",
      "limits.h"
    ],
    "methods": [
      {
        "method_name": "sdsHdrSize",
        "params": "(char type)",
        "start_line": 44,
        "end_line": 58
      },
      {
        "method_name": "sdsReqType",
        "params": "(size_t string_size)",
        "start_line": 60,
        "end_line": 74
      },
      {
        "method_name": "sdsnewlen",
        "params": "(const void *init, size_t initlen)",
        "start_line": 89,
        "end_line": 145
      },
      {
        "method_name": "sdsempty",
        "params": "(void)",
        "start_line": 149,
        "end_line": 151
      },
      {
        "method_name": "sdsnew",
        "params": "(const char *init)",
        "start_line": 154,
        "end_line": 157
      },
      {
        "method_name": "sdsdup",
        "params": "(const sds s)",
        "start_line": 160,
        "end_line": 162
      },
      {
        "method_name": "sdsfree",
        "params": "(sds s)",
        "start_line": 165,
        "end_line": 168
      },
      {
        "method_name": "sdsupdatelen",
        "params": "(sds s)",
        "start_line": 184,
        "end_line": 187
      },
      {
        "method_name": "sdsclear",
        "params": "(sds s)",
        "start_line": 193,
        "end_line": 196
      },
      {
        "method_name": "sdsMakeRoomFor",
        "params": "(sds s, size_t addlen)",
        "start_line": 204,
        "end_line": 247
      },
      {
        "method_name": "sdsRemoveFreeSpace",
        "params": "(sds s)",
        "start_line": 255,
        "end_line": 290
      },
      {
        "method_name": "sdsAllocSize",
        "params": "(sds s)",
        "start_line": 299,
        "end_line": 302
      },
      {
        "method_name": "*sdsAllocPtr",
        "params": "(sds s)",
        "start_line": 306,
        "end_line": 308
      },
      {
        "method_name": "sdsIncrLen",
        "params": "(sds s, ssize_t incr)",
        "start_line": 333,
        "end_line": 372
      },
      {
        "method_name": "sdsgrowzero",
        "params": "(sds s, size_t len)",
        "start_line": 379,
        "end_line": 390
      },
      {
        "method_name": "sdscatlen",
        "params": "(sds s, const void *t, size_t len)",
        "start_line": 397,
        "end_line": 406
      },
      {
        "method_name": "sdscat",
        "params": "(sds s, const char *t)",
        "start_line": 412,
        "end_line": 414
      },
      {
        "method_name": "sdscatsds",
        "params": "(sds s, const sds t)",
        "start_line": 420,
        "end_line": 422
      },
      {
        "method_name": "sdscpylen",
        "params": "(sds s, const char *t, size_t len)",
        "start_line": 426,
        "end_line": 435
      },
      {
        "method_name": "sdscpy",
        "params": "(sds s, const char *t)",
        "start_line": 439,
        "end_line": 441
      },
      {
        "method_name": "sdsll2str",
        "params": "(char *s, long long value)",
        "start_line": 450,
        "end_line": 479
      },
      {
        "method_name": "sdsull2str",
        "params": "(char *s, unsigned long long v)",
        "start_line": 482,
        "end_line": 508
      },
      {
        "method_name": "sdsfromlonglong",
        "params": "(long long value)",
        "start_line": 514,
        "end_line": 519
      },
      {
        "method_name": "sdscatvprintf",
        "params": "(sds s, const char *fmt, va_list ap)",
        "start_line": 522,
        "end_line": 557
      },
      {
        "method_name": "sdscatprintf",
        "params": "(sds s, const char *fmt, ...)",
        "start_line": 575,
        "end_line": 582
      },
      {
        "method_name": "sdscatfmt",
        "params": "(sds s, char const *fmt, ...)",
        "start_line": 600,
        "end_line": 692
      },
      {
        "method_name": "sdstrim",
        "params": "(sds s, const char *cset)",
        "start_line": 708,
        "end_line": 721
      },
      {
        "method_name": "sdsrange",
        "params": "(sds s, ssize_t start, ssize_t end)",
        "start_line": 739,
        "end_line": 765
      },
      {
        "method_name": "sdstolower",
        "params": "(sds s)",
        "start_line": 768,
        "end_line": 772
      },
      {
        "method_name": "sdstoupper",
        "params": "(sds s)",
        "start_line": 775,
        "end_line": 779
      },
      {
        "method_name": "sdscmp",
        "params": "(const sds s1, const sds s2)",
        "start_line": 792,
        "end_line": 802
      },
      {
        "method_name": "*sdssplitlen",
        "params": "(const char *s, ssize_t len, const char *sep, int seplen, int *count)",
        "start_line": 820,
        "end_line": 868
      },
      {
        "method_name": "sdsfreesplitres",
        "params": "(sds *tokens, int count)",
        "start_line": 871,
        "end_line": 876
      },
      {
        "method_name": "sdscatrepr",
        "params": "(sds s, const char *p, size_t len)",
        "start_line": 884,
        "end_line": 907
      },
      {
        "method_name": "is_hex_digit",
        "params": "(char c)",
        "start_line": 911,
        "end_line": 914
      },
      {
        "method_name": "hex_digit_to_int",
        "params": "(char c)",
        "start_line": 918,
        "end_line": 938
      },
      {
        "method_name": "*sdssplitargs",
        "params": "(const char *line, int *argc)",
        "start_line": 959,
        "end_line": 1067
      },
      {
        "method_name": "sdsmapchars",
        "params": "(sds s, const char *from, const char *to, size_t setlen)",
        "start_line": 1078,
        "end_line": 1090
      },
      {
        "method_name": "sdsjoin",
        "params": "(char **argv, int argc, char *sep)",
        "start_line": 1094,
        "end_line": 1103
      },
      {
        "method_name": "sdsjoinsds",
        "params": "(sds *argv, int argc, const char *sep, size_t seplen)",
        "start_line": 1106,
        "end_line": 1115
      },
      {
        "method_name": "*sds_malloc",
        "params": "(size_t size)",
        "start_line": 1122,
        "end_line": 1122
      },
      {
        "method_name": "*sds_realloc",
        "params": "(void *ptr, size_t size)",
        "start_line": 1123,
        "end_line": 1123
      },
      {
        "method_name": "sds_free",
        "params": "(void *ptr)",
        "start_line": 1124,
        "end_line": 1124
      },
      {
        "method_name": "sdsTest",
        "params": "(void)",
        "start_line": 1132,
        "end_line": 1293
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 1297,
        "end_line": 1299
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sds.h",
    "line": 274,
    "headers": [
      "sys/types.h",
      "stdarg.h",
      "stdint.h"
    ],
    "methods": [
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 47,
        "end_line": 50
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 51,
        "end_line": 56
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 57,
        "end_line": 62
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 63,
        "end_line": 68
      },
      {
        "method_name": "(",
        "params": "(__packed__))",
        "start_line": 69,
        "end_line": 74
      },
      {
        "method_name": "sdslen",
        "params": "(const sds s)",
        "start_line": 87,
        "end_line": 102
      },
      {
        "method_name": "sdsavail",
        "params": "(const sds s)",
        "start_line": 104,
        "end_line": 128
      },
      {
        "method_name": "sdssetlen",
        "params": "(sds s, size_t newlen)",
        "start_line": 130,
        "end_line": 152
      },
      {
        "method_name": "sdsinclen",
        "params": "(sds s, size_t inc)",
        "start_line": 154,
        "end_line": 177
      },
      {
        "method_name": "sdsalloc",
        "params": "(const sds s)",
        "start_line": 180,
        "end_line": 195
      },
      {
        "method_name": "sdssetalloc",
        "params": "(sds s, size_t newlen)",
        "start_line": 197,
        "end_line": 216
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sdsalloc.h",
    "line": 47,
    "headers": [
      "zmalloc.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sentinel.c",
    "line": 4587,
    "headers": [
      "server.h",
      "hiredis.h",
      "openssl/ssl.h",
      "hiredis_ssl.h",
      "ctype.h",
      "arpa/inet.h",
      "sys/socket.h",
      "sys/wait.h",
      "fcntl.h"
    ],
    "methods": [
      {
        "method_name": "redisAeReadEvent",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 287,
        "end_line": 292
      },
      {
        "method_name": "redisAeWriteEvent",
        "params": "(aeEventLoop *el, int fd, void *privdata, int mask)",
        "start_line": 294,
        "end_line": 299
      },
      {
        "method_name": "redisAeAddRead",
        "params": "(void *privdata)",
        "start_line": 301,
        "end_line": 308
      },
      {
        "method_name": "redisAeDelRead",
        "params": "(void *privdata)",
        "start_line": 310,
        "end_line": 317
      },
      {
        "method_name": "redisAeAddWrite",
        "params": "(void *privdata)",
        "start_line": 319,
        "end_line": 326
      },
      {
        "method_name": "redisAeDelWrite",
        "params": "(void *privdata)",
        "start_line": 328,
        "end_line": 335
      },
      {
        "method_name": "redisAeCleanup",
        "params": "(void *privdata)",
        "start_line": 337,
        "end_line": 342
      },
      {
        "method_name": "redisAeAttach",
        "params": "(aeEventLoop *loop, redisAsyncContext *ac)",
        "start_line": 344,
        "end_line": 368
      },
      {
        "method_name": "dictInstancesValDestructor",
        "params": "(void *privdata, void *obj)",
        "start_line": 404,
        "end_line": 407
      },
      {
        "method_name": "initSentinelConfig",
        "params": "(void)",
        "start_line": 471,
        "end_line": 474
      },
      {
        "method_name": "initSentinel",
        "params": "(void)",
        "start_line": 477,
        "end_line": 509
      },
      {
        "method_name": "sentinelIsRunning",
        "params": "(void)",
        "start_line": 513,
        "end_line": 545
      },
      {
        "method_name": "*createSentinelAddr",
        "params": "(char *hostname, int port)",
        "start_line": 554,
        "end_line": 570
      },
      {
        "method_name": "*dupSentinelAddr",
        "params": "(sentinelAddr *src)",
        "start_line": 573,
        "end_line": 580
      },
      {
        "method_name": "releaseSentinelAddr",
        "params": "(sentinelAddr *sa)",
        "start_line": 583,
        "end_line": 586
      },
      {
        "method_name": "sentinelAddrIsEqual",
        "params": "(sentinelAddr *a, sentinelAddr *b)",
        "start_line": 589,
        "end_line": 591
      },
      {
        "method_name": "sentinelEvent",
        "params": "(int level, char *type, sentinelRedisInstance *ri,\n                   const char *fmt, ...)",
        "start_line": 620,
        "end_line": 674
      },
      {
        "method_name": "sentinelGenerateInitialMonitorEvents",
        "params": "(void)",
        "start_line": 680,
        "end_line": 690
      },
      {
        "method_name": "sentinelReleaseScriptJob",
        "params": "(sentinelScriptJob *sj)",
        "start_line": 695,
        "end_line": 701
      },
      {
        "method_name": "sentinelScheduleScriptExecution",
        "params": "(char *path, ...)",
        "start_line": 704,
        "end_line": 748
      },
      {
        "method_name": "*sentinelGetScriptListNodeByPid",
        "params": "(pid_t pid)",
        "start_line": 752,
        "end_line": 764
      },
      {
        "method_name": "sentinelRunPendingScripts",
        "params": "(void)",
        "start_line": 768,
        "end_line": 812
      },
      {
        "method_name": "sentinelScriptRetryDelay",
        "params": "(int retry_num)",
        "start_line": 821,
        "end_line": 826
      },
      {
        "method_name": "sentinelCollectTerminatedScripts",
        "params": "(void)",
        "start_line": 832,
        "end_line": 875
      },
      {
        "method_name": "sentinelKillTimedoutScripts",
        "params": "(void)",
        "start_line": 879,
        "end_line": 896
      },
      {
        "method_name": "sentinelPendingScriptsCommand",
        "params": "(client *c)",
        "start_line": 899,
        "end_line": 937
      },
      {
        "method_name": "sentinelCallClientReconfScript",
        "params": "(sentinelRedisInstance *master, int role, char *state, sentinelAddr *from, sentinelAddr *to)",
        "start_line": 951,
        "end_line": 961
      },
      {
        "method_name": "*createInstanceLink",
        "params": "(void)",
        "start_line": 966,
        "end_line": 987
      },
      {
        "method_name": "instanceLinkCloseConnection",
        "params": "(instanceLink *link, redisAsyncContext *c)",
        "start_line": 990,
        "end_line": 1001
      },
      {
        "method_name": "*releaseInstanceLink",
        "params": "(instanceLink *link, sentinelRedisInstance *ri)",
        "start_line": 1012,
        "end_line": 1041
      },
      {
        "method_name": "sentinelTryConnectionSharing",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 1055,
        "end_line": 1084
      },
      {
        "method_name": "sentinelUpdateSentinelAddressInAllMasters",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 1092,
        "end_line": 1126
      },
      {
        "method_name": "instanceLinkConnectionError",
        "params": "(const redisAsyncContext *c)",
        "start_line": 1134,
        "end_line": 1146
      },
      {
        "method_name": "sentinelLinkEstablishedCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 1150,
        "end_line": 1152
      },
      {
        "method_name": "sentinelDisconnectCallback",
        "params": "(const redisAsyncContext *c, int status)",
        "start_line": 1154,
        "end_line": 1157
      },
      {
        "method_name": "*createSentinelRedisInstance",
        "params": "(char *name, int flags, char *hostname, int port, int quorum, sentinelRedisInstance *master)",
        "start_line": 1183,
        "end_line": 1273
      },
      {
        "method_name": "releaseSentinelRedisInstance",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 1279,
        "end_line": 1305
      },
      {
        "method_name": "*sentinelRedisInstanceLookupSlave",
        "params": "(\n                sentinelRedisInstance *ri, char *ip, int port)",
        "start_line": 1310,
        "end_line": 1321
      },
      {
        "method_name": "*sentinelRedisInstanceTypeStr",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 1324,
        "end_line": 1329
      },
      {
        "method_name": "removeMatchingSentinelFromMaster",
        "params": "(sentinelRedisInstance *master, char *runid)",
        "start_line": 1342,
        "end_line": 1360
      },
      {
        "method_name": "*getSentinelRedisInstanceByAddrAndRunID",
        "params": "(dict *instances, char *ip, int port, char *runid)",
        "start_line": 1368,
        "end_line": 1389
      },
      {
        "method_name": "*sentinelGetMasterByName",
        "params": "(char *name)",
        "start_line": 1392,
        "end_line": 1399
      },
      {
        "method_name": "sentinelAddFlagsToDictOfRedisInstances",
        "params": "(dict *instances, int flags)",
        "start_line": 1402,
        "end_line": 1412
      },
      {
        "method_name": "sentinelDelFlagsToDictOfRedisInstances",
        "params": "(dict *instances, int flags)",
        "start_line": 1416,
        "end_line": 1426
      },
      {
        "method_name": "sentinelResetMaster",
        "params": "(sentinelRedisInstance *ri, int flags)",
        "start_line": 1440,
        "end_line": 1471
      },
      {
        "method_name": "sentinelResetMastersByPattern",
        "params": "(char *pattern, int flags)",
        "start_line": 1475,
        "end_line": 1493
      },
      {
        "method_name": "sentinelResetMasterAndChangeAddress",
        "params": "(sentinelRedisInstance *master, char *ip, int port)",
        "start_line": 1502,
        "end_line": 1557
      },
      {
        "method_name": "sentinelRedisInstanceNoDownFor",
        "params": "(sentinelRedisInstance *ri, mstime_t ms)",
        "start_line": 1561,
        "end_line": 1568
      },
      {
        "method_name": "*sentinelGetCurrentMasterAddress",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 1572,
        "end_line": 1586
      },
      {
        "method_name": "sentinelPropagateDownAfterPeriod",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 1590,
        "end_line": 1604
      },
      {
        "method_name": "*sentinelGetInstanceTypeString",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 1606,
        "end_line": 1611
      },
      {
        "method_name": "*sentinelInstanceMapCommand",
        "params": "(sentinelRedisInstance *ri, char *command)",
        "start_line": 1620,
        "end_line": 1626
      },
      {
        "method_name": "*sentinelHandleConfiguration",
        "params": "(char **argv, int argc)",
        "start_line": 1629,
        "end_line": 1772
      },
      {
        "method_name": "rewriteConfigSentinelOption",
        "params": "(struct rewriteConfigState *state)",
        "start_line": 1779,
        "end_line": 1942
      },
      {
        "method_name": "sentinelFlushConfig",
        "params": "(void)",
        "start_line": 1951,
        "end_line": 1969
      },
      {
        "method_name": "sentinelSendAuthIfNeeded",
        "params": "(sentinelRedisInstance *ri, redisAsyncContext *c)",
        "start_line": 1985,
        "end_line": 2011
      },
      {
        "method_name": "sentinelSetClientName",
        "params": "(sentinelRedisInstance *ri, redisAsyncContext *c, char *type)",
        "start_line": 2019,
        "end_line": 2030
      },
      {
        "method_name": "instanceLinkNegotiateTLS",
        "params": "(redisAsyncContext *context)",
        "start_line": 2032,
        "end_line": 2043
      },
      {
        "method_name": "sentinelReconnectInstance",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 2048,
        "end_line": 2123
      },
      {
        "method_name": "sentinelMasterLooksSane",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 2132,
        "end_line": 2138
      },
      {
        "method_name": "sentinelRefreshInstanceInfo",
        "params": "(sentinelRedisInstance *ri, const char *info)",
        "start_line": 2141,
        "end_line": 2391
      },
      {
        "method_name": "sentinelInfoReplyCallback",
        "params": "(redisAsyncContext *c, void *reply, void *privdata)",
        "start_line": 2393,
        "end_line": 2404
      },
      {
        "method_name": "sentinelDiscardReplyCallback",
        "params": "(redisAsyncContext *c, void *reply, void *privdata)",
        "start_line": 2408,
        "end_line": 2414
      },
      {
        "method_name": "sentinelPingReplyCallback",
        "params": "(redisAsyncContext *c, void *reply, void *privdata)",
        "start_line": 2416,
        "end_line": 2454
      },
      {
        "method_name": "sentinelPublishReplyCallback",
        "params": "(redisAsyncContext *c, void *reply, void *privdata)",
        "start_line": 2458,
        "end_line": 2471
      },
      {
        "method_name": "sentinelProcessHelloMessage",
        "params": "(char *hello, int hello_len)",
        "start_line": 2478,
        "end_line": 2577
      },
      {
        "method_name": "sentinelReceiveHelloMessages",
        "params": "(redisAsyncContext *c, void *reply, void *privdata)",
        "start_line": 2582,
        "end_line": 2608
      },
      {
        "method_name": "sentinelSendHello",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 2621,
        "end_line": 2661
      },
      {
        "method_name": "sentinelForceHelloUpdateDictOfRedisInstances",
        "params": "(dict *instances)",
        "start_line": 2665,
        "end_line": 2676
      },
      {
        "method_name": "sentinelForceHelloUpdateForMaster",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 2686,
        "end_line": 2693
      },
      {
        "method_name": "sentinelSendPing",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 2700,
        "end_line": 2716
      },
      {
        "method_name": "sentinelSendPeriodicCommands",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 2720,
        "end_line": 2782
      },
      {
        "method_name": "*sentinelFailoverStateStr",
        "params": "(int state)",
        "start_line": 2786,
        "end_line": 2797
      },
      {
        "method_name": "addReplySentinelRedisInstance",
        "params": "(client *c, sentinelRedisInstance *ri)",
        "start_line": 2800,
        "end_line": 2987
      },
      {
        "method_name": "addReplyDictOfRedisInstances",
        "params": "(client *c, dict *instances)",
        "start_line": 2991,
        "end_line": 3003
      },
      {
        "method_name": "*sentinelGetMasterByNameOrReplyError",
        "params": "(client *c,\n                        robj *name)",
        "start_line": 3010,
        "end_line": 3019
      },
      {
        "method_name": "sentinelIsQuorumReachable",
        "params": "(sentinelRedisInstance *master, int *usableptr)",
        "start_line": 3024,
        "end_line": 3044
      },
      {
        "method_name": "sentinelCommand",
        "params": "(client *c)",
        "start_line": 3046,
        "end_line": 3364
      },
      {
        "method_name": "info_section_from_redis",
        "params": "(section_name)",
        "start_line": 3366,
        "end_line": 3374
      },
      {
        "method_name": "sentinelInfoCommand",
        "params": "(client *c)",
        "start_line": 3377,
        "end_line": 3438
      },
      {
        "method_name": "sentinelRoleCommand",
        "params": "(client *c)",
        "start_line": 3442,
        "end_line": 3457
      },
      {
        "method_name": "sentinelSetCommand",
        "params": "(client *c)",
        "start_line": 3460,
        "end_line": 3620
      },
      {
        "method_name": "sentinelPublishCommand",
        "params": "(client *c)",
        "start_line": 3628,
        "end_line": 3635
      },
      {
        "method_name": "sentinelCheckSubjectivelyDown",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 3640,
        "end_line": 3704
      },
      {
        "method_name": "sentinelCheckObjectivelyDown",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 3712,
        "end_line": 3745
      },
      {
        "method_name": "sentinelReceiveIsMasterDownReply",
        "params": "(redisAsyncContext *c, void *reply, void *privdata)",
        "start_line": 3749,
        "end_line": 3785
      },
      {
        "method_name": "sentinelAskMasterStateToOtherSentinels",
        "params": "(sentinelRedisInstance *master, int flags)",
        "start_line": 3792,
        "end_line": 3834
      },
      {
        "method_name": "sentinelSimFailureCrash",
        "params": "(void)",
        "start_line": 3839,
        "end_line": 3843
      },
      {
        "method_name": "*sentinelVoteLeader",
        "params": "(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch)",
        "start_line": 3850,
        "end_line": 3875
      },
      {
        "method_name": "sentinelLeaderIncr",
        "params": "(dict *counters, char *runid)",
        "start_line": 3884,
        "end_line": 3898
      },
      {
        "method_name": "*sentinelGetLeader",
        "params": "(sentinelRedisInstance *master, uint64_t epoch)",
        "start_line": 3906,
        "end_line": 3969
      },
      {
        "method_name": "sentinelSendSlaveOf",
        "params": "(sentinelRedisInstance *ri, char *host, int port)",
        "start_line": 3981,
        "end_line": 4044
      },
      {
        "method_name": "sentinelStartFailover",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 4047,
        "end_line": 4058
      },
      {
        "method_name": "sentinelStartFailoverIfNeeded",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 4071,
        "end_line": 4099
      },
      {
        "method_name": "compareSlavesForPromotion",
        "params": "(const void *a, const void *b)",
        "start_line": 4133,
        "end_line": 4159
      },
      {
        "method_name": "*sentinelSelectSlave",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 4161,
        "end_line": 4203
      },
      {
        "method_name": "sentinelFailoverWaitStart",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4206,
        "end_line": 4237
      },
      {
        "method_name": "sentinelFailoverSelectSlave",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4239,
        "end_line": 4256
      },
      {
        "method_name": "sentinelFailoverSendSlaveOfNoOne",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4258,
        "end_line": 4282
      },
      {
        "method_name": "sentinelFailoverWaitPromotion",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4286,
        "end_line": 4293
      },
      {
        "method_name": "sentinelFailoverDetectEnd",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 4295,
        "end_line": 4356
      },
      {
        "method_name": "sentinelFailoverReconfNextSlave",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 4360,
        "end_line": 4417
      },
      {
        "method_name": "sentinelFailoverSwitchToPromotedSlave",
        "params": "(sentinelRedisInstance *master)",
        "start_line": 4422,
        "end_line": 4431
      },
      {
        "method_name": "sentinelFailoverStateMachine",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4433,
        "end_line": 4455
      },
      {
        "method_name": "sentinelAbortFailover",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4462,
        "end_line": 4473
      },
      {
        "method_name": "sentinelHandleRedisInstance",
        "params": "(sentinelRedisInstance *ri)",
        "start_line": 4481,
        "end_line": 4513
      },
      {
        "method_name": "sentinelHandleDictOfRedisInstances",
        "params": "(dict *instances)",
        "start_line": 4517,
        "end_line": 4539
      },
      {
        "method_name": "sentinelCheckTiltCondition",
        "params": "(void)",
        "start_line": 4560,
        "end_line": 4570
      },
      {
        "method_name": "sentinelTimer",
        "params": "(void)",
        "start_line": 4572,
        "end_line": 4586
      }
    ],
    "structs": [
      {
        "struct_name": "sentinelAddr",
        "start_line": 56,
        "end_line": 59
      },
      {
        "struct_name": "instanceLink",
        "start_line": 145,
        "end_line": 170
      },
      {
        "struct_name": "sentinelRedisInstance",
        "start_line": 172,
        "end_line": 239
      },
      {
        "struct_name": "sentinelState",
        "start_line": 242,
        "end_line": 260
      },
      {
        "struct_name": "sentinelScriptJob",
        "start_line": 263,
        "end_line": 273
      },
      {
        "struct_name": "redisAeEvents",
        "start_line": 280,
        "end_line": 285
      },
      {
        "struct_name": "sentinelLeader",
        "start_line": 3877,
        "end_line": 3880
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/server.c",
    "line": 5214,
    "headers": [
      "server.h",
      "cluster.h",
      "slowlog.h",
      "bio.h",
      "latency.h",
      "atomicvar.h",
      "time.h",
      "signal.h",
      "sys/wait.h",
      "errno.h",
      "assert.h",
      "ctype.h",
      "stdarg.h",
      "arpa/inet.h",
      "sys/stat.h",
      "fcntl.h",
      "sys/time.h",
      "sys/resource.h",
      "sys/uio.h",
      "sys/un.h",
      "limits.h",
      "float.h",
      "math.h",
      "sys/resource.h",
      "sys/utsname.h",
      "locale.h",
      "sys/socket.h"
    ],
    "methods": [
      {
        "method_name": "serverLogRaw",
        "params": "(int level, const char *msg)",
        "start_line": 1026,
        "end_line": 1067
      },
      {
        "method_name": "serverLog",
        "params": "(int level, const char *fmt, ...)",
        "start_line": 1072,
        "end_line": 1083
      },
      {
        "method_name": "serverLogFromHandler",
        "params": "(int level, const char *msg)",
        "start_line": 1091,
        "end_line": 1111
      },
      {
        "method_name": "ustime",
        "params": "(void)",
        "start_line": 1114,
        "end_line": 1122
      },
      {
        "method_name": "mstime",
        "params": "(void)",
        "start_line": 1125,
        "end_line": 1127
      },
      {
        "method_name": "exitFromChild",
        "params": "(int retcode)",
        "start_line": 1133,
        "end_line": 1139
      },
      {
        "method_name": "dictVanillaFree",
        "params": "(void *privdata, void *val)",
        "start_line": 1148,
        "end_line": 1151
      },
      {
        "method_name": "dictListDestructor",
        "params": "(void *privdata, void *val)",
        "start_line": 1154,
        "end_line": 1157
      },
      {
        "method_name": "dictSdsKeyCompare",
        "params": "(void *privdata, const void *key1,\n        const void *key2)",
        "start_line": 1161,
        "end_line": 1169
      },
      {
        "method_name": "dictSdsKeyCaseCompare",
        "params": "(void *privdata, const void *key1,\n        const void *key2)",
        "start_line": 1175,
        "end_line": 1179
      },
      {
        "method_name": "dictObjectDestructor",
        "params": "(void *privdata, void *val)",
        "start_line": 1182,
        "end_line": 1187
      },
      {
        "method_name": "dictSdsDestructor",
        "params": "(void *privdata, void *val)",
        "start_line": 1190,
        "end_line": 1194
      },
      {
        "method_name": "dictObjKeyCompare",
        "params": "(void *privdata, const void *key1,\n        const void *key2)",
        "start_line": 1198,
        "end_line": 1201
      },
      {
        "method_name": "dictObjHash",
        "params": "(const void *key)",
        "start_line": 1203,
        "end_line": 1206
      },
      {
        "method_name": "dictSdsHash",
        "params": "(const void *key)",
        "start_line": 1208,
        "end_line": 1210
      },
      {
        "method_name": "dictSdsCaseHash",
        "params": "(const void *key)",
        "start_line": 1212,
        "end_line": 1214
      },
      {
        "method_name": "dictEncObjKeyCompare",
        "params": "(void *privdata, const void *key1,\n        const void *key2)",
        "start_line": 1218,
        "end_line": 1236
      },
      {
        "method_name": "dictEncObjHash",
        "params": "(const void *key)",
        "start_line": 1238,
        "end_line": 1259
      },
      {
        "method_name": "htNeedsResize",
        "params": "(dict *dict)",
        "start_line": 1422,
        "end_line": 1429
      },
      {
        "method_name": "tryResizeHashTables",
        "params": "(int dbid)",
        "start_line": 1433,
        "end_line": 1438
      },
      {
        "method_name": "incrementallyRehash",
        "params": "(int dbid)",
        "start_line": 1447,
        "end_line": 1459
      },
      {
        "method_name": "updateDictResizePolicy",
        "params": "(void)",
        "start_line": 1467,
        "end_line": 1472
      },
      {
        "method_name": "hasActiveChildProcess",
        "params": "()",
        "start_line": 1476,
        "end_line": 1480
      },
      {
        "method_name": "allPersistenceDisabled",
        "params": "(void)",
        "start_line": 1484,
        "end_line": 1486
      },
      {
        "method_name": "trackInstantaneousMetric",
        "params": "(int metric, long long current_reading)",
        "start_line": 1491,
        "end_line": 1505
      },
      {
        "method_name": "getInstantaneousMetric",
        "params": "(int metric)",
        "start_line": 1508,
        "end_line": 1515
      },
      {
        "method_name": "clientsCronResizeQueryBuffer",
        "params": "(client *c)",
        "start_line": 1521,
        "end_line": 1559
      },
      {
        "method_name": "clientsCronTrackExpansiveClients",
        "params": "(client *c)",
        "start_line": 1577,
        "end_line": 1602
      },
      {
        "method_name": "clientsCronTrackClientsMemUsage",
        "params": "(client *c)",
        "start_line": 1609,
        "end_line": 1624
      },
      {
        "method_name": "getExpansiveClientsInfo",
        "params": "(size_t *in_usage, size_t *out_usage)",
        "start_line": 1628,
        "end_line": 1636
      },
      {
        "method_name": "clientsCron",
        "params": "(void)",
        "start_line": 1654,
        "end_line": 1688
      },
      {
        "method_name": "databasesCron",
        "params": "(void)",
        "start_line": 1693,
        "end_line": 1744
      },
      {
        "method_name": "updateCachedTime",
        "params": "(int update_daylight_info)",
        "start_line": 1756,
        "end_line": 1772
      },
      {
        "method_name": "checkChildrenDone",
        "params": "(void)",
        "start_line": 1774,
        "end_line": 1828
      },
      {
        "method_name": "run_with_period",
        "params": "(milliseconds)",
        "start_line": 1846,
        "end_line": 1846
      },
      {
        "method_name": "serverCron",
        "params": "(struct aeEventLoop *eventLoop, long long id, void *clientData)",
        "start_line": 1849,
        "end_line": 2092
      },
      {
        "method_name": "beforeSleep",
        "params": "(struct aeEventLoop *eventLoop)",
        "start_line": 2110,
        "end_line": 2199
      },
      {
        "method_name": "afterSleep",
        "params": "(struct aeEventLoop *eventLoop)",
        "start_line": 2204,
        "end_line": 2210
      },
      {
        "method_name": "createSharedObjects",
        "params": "(void)",
        "start_line": 2214,
        "end_line": 2327
      },
      {
        "method_name": "initServerConfig",
        "params": "(void)",
        "start_line": 2329,
        "end_line": 2454
      },
      {
        "method_name": "restartServer",
        "params": "(int flags, mstime_t delay)",
        "start_line": 2473,
        "end_line": 2520
      },
      {
        "method_name": "adjustOpenFilesLimit",
        "params": "(void)",
        "start_line": 2530,
        "end_line": 2603
      },
      {
        "method_name": "checkTcpBacklogSettings",
        "params": "(void)",
        "start_line": 2607,
        "end_line": 2620
      },
      {
        "method_name": "listenToPort",
        "params": "(int port, int *fds, int *count)",
        "start_line": 2640,
        "end_line": 2701
      },
      {
        "method_name": "resetServerStats",
        "params": "(void)",
        "start_line": 2706,
        "end_line": 2740
      },
      {
        "method_name": "initServer",
        "params": "(void)",
        "start_line": 2742,
        "end_line": 2948
      },
      {
        "method_name": "InitServerLast",
        "params": "()",
        "start_line": 2955,
        "end_line": 2960
      },
      {
        "method_name": "populateCommandTableParseFlags",
        "params": "(struct redisCommand *c, char *strflags)",
        "start_line": 2965,
        "end_line": 3023
      },
      {
        "method_name": "populateCommandTable",
        "params": "(void)",
        "start_line": 3027,
        "end_line": 3047
      },
      {
        "method_name": "resetCommandTableStats",
        "params": "(void)",
        "start_line": 3049,
        "end_line": 3062
      },
      {
        "method_name": "redisOpArrayInit",
        "params": "(redisOpArray *oa)",
        "start_line": 3066,
        "end_line": 3069
      },
      {
        "method_name": "redisOpArrayAppend",
        "params": "(redisOpArray *oa, struct redisCommand *cmd, int dbid,\n                       robj **argv, int argc, int target)",
        "start_line": 3073,
        "end_line": 3085
      },
      {
        "method_name": "redisOpArrayFree",
        "params": "(redisOpArray *oa)",
        "start_line": 3087,
        "end_line": 3099
      },
      {
        "method_name": "*lookupCommand",
        "params": "(sds name)",
        "start_line": 3103,
        "end_line": 3105
      },
      {
        "method_name": "*lookupCommandByCString",
        "params": "(char *s)",
        "start_line": 3107,
        "end_line": 3114
      },
      {
        "method_name": "*lookupCommandOrOriginal",
        "params": "(sds name)",
        "start_line": 3123,
        "end_line": 3128
      },
      {
        "method_name": "propagate",
        "params": "(struct redisCommand *cmd, int dbid, robj **argv, int argc,\n               int flags)",
        "start_line": 3148,
        "end_line": 3153
      },
      {
        "method_name": "alsoPropagate",
        "params": "(struct redisCommand *cmd, int dbid, robj **argv, int argc,\n                   int target)",
        "start_line": 3169,
        "end_line": 3181
      },
      {
        "method_name": "forceCommandPropagation",
        "params": "(client *c, int flags)",
        "start_line": 3186,
        "end_line": 3189
      },
      {
        "method_name": "preventCommandPropagation",
        "params": "(client *c)",
        "start_line": 3194,
        "end_line": 3196
      },
      {
        "method_name": "preventCommandAOF",
        "params": "(client *c)",
        "start_line": 3199,
        "end_line": 3201
      },
      {
        "method_name": "preventCommandReplication",
        "params": "(client *c)",
        "start_line": 3204,
        "end_line": 3206
      },
      {
        "method_name": "call",
        "params": "(client *c, int flags)",
        "start_line": 3245,
        "end_line": 3403
      },
      {
        "method_name": "rejectCommand",
        "params": "(client *c, robj *reply)",
        "start_line": 3409,
        "end_line": 3417
      },
      {
        "method_name": "rejectCommandFormat",
        "params": "(client *c, const char *fmt, ...)",
        "start_line": 3419,
        "end_line": 3431
      },
      {
        "method_name": "processCommand",
        "params": "(client *c)",
        "start_line": 3441,
        "end_line": 3685
      },
      {
        "method_name": "closeListeningSockets",
        "params": "(int unlink_unix_socket)",
        "start_line": 3691,
        "end_line": 3703
      },
      {
        "method_name": "prepareForShutdown",
        "params": "(int flags)",
        "start_line": 3705,
        "end_line": 3798
      },
      {
        "method_name": "writeCommandsDeniedByDiskError",
        "params": "(void)",
        "start_line": 3813,
        "end_line": 3826
      },
      {
        "method_name": "pingCommand",
        "params": "(client *c)",
        "start_line": 3830,
        "end_line": 3851
      },
      {
        "method_name": "echoCommand",
        "params": "(client *c)",
        "start_line": 3853,
        "end_line": 3855
      },
      {
        "method_name": "timeCommand",
        "params": "(client *c)",
        "start_line": 3857,
        "end_line": 3866
      },
      {
        "method_name": "addReplyCommandFlag",
        "params": "(client *c, struct redisCommand *cmd, int f, char *reply)",
        "start_line": 3869,
        "end_line": 3875
      },
      {
        "method_name": "addReplyCommand",
        "params": "(client *c, struct redisCommand *cmd)",
        "start_line": 3878,
        "end_line": 3918
      },
      {
        "method_name": "commandCommand",
        "params": "(client *c)",
        "start_line": 3921,
        "end_line": 3977
      },
      {
        "method_name": "bytesToHuman",
        "params": "(char *s, unsigned long long n)",
        "start_line": 3981,
        "end_line": 4006
      },
      {
        "method_name": "genRedisInfoString",
        "params": "(const char *section)",
        "start_line": 4011,
        "end_line": 4605
      },
      {
        "method_name": "infoCommand",
        "params": "(client *c)",
        "start_line": 4607,
        "end_line": 4617
      },
      {
        "method_name": "monitorCommand",
        "params": "(client *c)",
        "start_line": 4619,
        "end_line": 4626
      },
      {
        "method_name": "linuxOvercommitMemoryValue",
        "params": "(void)",
        "start_line": 4631,
        "end_line": 4643
      },
      {
        "method_name": "linuxMemoryWarnings",
        "params": "(void)",
        "start_line": 4645,
        "end_line": 4652
      },
      {
        "method_name": "createPidFile",
        "params": "(void)",
        "start_line": 4655,
        "end_line": 4666
      },
      {
        "method_name": "daemonize",
        "params": "(void)",
        "start_line": 4668,
        "end_line": 4683
      },
      {
        "method_name": "version",
        "params": "(void)",
        "start_line": 4685,
        "end_line": 4694
      },
      {
        "method_name": "usage",
        "params": "(void)",
        "start_line": 4696,
        "end_line": 4711
      },
      {
        "method_name": "redisAsciiArt",
        "params": "(void)",
        "start_line": 4713,
        "end_line": 4747
      },
      {
        "method_name": "sigShutdownHandler",
        "params": "(int sig)",
        "start_line": 4749,
        "end_line": 4778
      },
      {
        "method_name": "setupSignalHandlers",
        "params": "(void)",
        "start_line": 4780,
        "end_line": 4801
      },
      {
        "method_name": "sigKillChildHandler",
        "params": "(int sig)",
        "start_line": 4807,
        "end_line": 4811
      },
      {
        "method_name": "setupChildSignalHandlers",
        "params": "(void)",
        "start_line": 4813,
        "end_line": 4823
      },
      {
        "method_name": "redisFork",
        "params": "()",
        "start_line": 4825,
        "end_line": 4843
      },
      {
        "method_name": "sendChildCOWInfo",
        "params": "(int ptype, char *pname)",
        "start_line": 4845,
        "end_line": 4856
      },
      {
        "method_name": "checkForSentinelMode",
        "params": "(int argc, char **argv)",
        "start_line": 4862,
        "end_line": 4869
      },
      {
        "method_name": "loadDataFromDisk",
        "params": "(void)",
        "start_line": 4872,
        "end_line": 4907
      },
      {
        "method_name": "redisOutOfMemoryHandler",
        "params": "(size_t allocation_size)",
        "start_line": 4909,
        "end_line": 4913
      },
      {
        "method_name": "redisSetProcTitle",
        "params": "(char *title)",
        "start_line": 4915,
        "end_line": 4929
      },
      {
        "method_name": "redisSetCpuAffinity",
        "params": "(const char *cpulist)",
        "start_line": 4931,
        "end_line": 4937
      },
      {
        "method_name": "redisSupervisedUpstart",
        "params": "(void)",
        "start_line": 4943,
        "end_line": 4956
      },
      {
        "method_name": "redisCommunicateSystemd",
        "params": "(const char *sd_notify_msg)",
        "start_line": 4958,
        "end_line": 4971
      },
      {
        "method_name": "redisIsSupervised",
        "params": "(int mode)",
        "start_line": 4973,
        "end_line": 4995
      },
      {
        "method_name": "iAmMaster",
        "params": "(void)",
        "start_line": 4997,
        "end_line": 5000
      },
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 5003,
        "end_line": 5212
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/server.h",
    "line": 2444,
    "headers": [
      "fmacros.h",
      "config.h",
      "solarisfixes.h",
      "rio.h",
      "stdio.h",
      "stdlib.h",
      "string.h",
      "time.h",
      "limits.h",
      "unistd.h",
      "errno.h",
      "inttypes.h",
      "pthread.h",
      "syslog.h",
      "netinet/in.h",
      "sys/socket.h",
      "lua.h",
      "signal.h",
      "systemd/sd-daemon.h",
      "ae.h",
      "sds.h",
      "dict.h",
      "adlist.h",
      "zmalloc.h",
      "anet.h",
      "ziplist.h",
      "intset.h",
      "version.h",
      "util.h",
      "latency.h",
      "sparkline.h",
      "quicklist.h",
      "rax.h",
      "connection.h",
      "redismodule.h",
      "zipmap.h",
      "sha1.h",
      "endianconv.h",
      "crc64.h",
      "stream.h",
      "rdb.h"
    ],
    "methods": [
      {
        "method_name": "if",
        "params": "(robj-\u003etype == OBJ_MODULE)",
        "start_line": 531,
        "end_line": 535
      },
      {
        "method_name": "moduleInitIOContext",
        "params": "(iovar,mtype,rioptr,keyptr)",
        "start_line": 558,
        "end_line": 566
      },
      {
        "method_name": "moduleInitDigestContext",
        "params": "(mdvar)",
        "start_line": 579,
        "end_line": 582
      },
      {
        "method_name": "initStaticStringObject",
        "params": "(_var,_ptr)",
        "start_line": 625,
        "end_line": 630
      }
    ],
    "structs": [
      {
        "struct_name": "RedisModuleType",
        "start_line": 507,
        "end_line": 520
      },
      {
        "struct_name": "moduleValue",
        "start_line": 537,
        "end_line": 540
      },
      {
        "struct_name": "RedisModuleIO",
        "start_line": 545,
        "end_line": 554
      },
      {
        "struct_name": "RedisModuleDigest",
        "start_line": 573,
        "end_line": 576
      },
      {
        "struct_name": "redisObject",
        "start_line": 606,
        "end_line": 614
      },
      {
        "struct_name": "clientReplyBlock",
        "start_line": 636,
        "end_line": 639
      },
      {
        "struct_name": "redisDb",
        "start_line": 644,
        "end_line": 654
      },
      {
        "struct_name": "multiCmd",
        "start_line": 657,
        "end_line": 661
      },
      {
        "struct_name": "multiState",
        "start_line": 663,
        "end_line": 674
      },
      {
        "struct_name": "blockingState",
        "start_line": 678,
        "end_line": 704
      },
      {
        "struct_name": "readyList",
        "start_line": 717,
        "end_line": 720
      },
      {
        "struct_name": "",
        "start_line": 739,
        "end_line": 762
      },
      {
        "struct_name": "client",
        "start_line": 771,
        "end_line": 855
      },
      {
        "struct_name": "saveparam",
        "start_line": 857,
        "end_line": 860
      },
      {
        "struct_name": "moduleLoadQueueEntry",
        "start_line": 862,
        "end_line": 866
      },
      {
        "struct_name": "sharedObjectsStruct",
        "start_line": 868,
        "end_line": 883
      },
      {
        "struct_name": "zskiplistNode",
        "start_line": 886,
        "end_line": 894
      },
      {
        "struct_name": "zskiplist",
        "start_line": 896,
        "end_line": 900
      },
      {
        "struct_name": "zset",
        "start_line": 902,
        "end_line": 905
      },
      {
        "struct_name": "clientBufferLimitsConfig",
        "start_line": 907,
        "end_line": 911
      },
      {
        "struct_name": "redisOp",
        "start_line": 921,
        "end_line": 925
      },
      {
        "struct_name": "redisOpArray",
        "start_line": 934,
        "end_line": 937
      },
      {
        "struct_name": "redisMemOverhead",
        "start_line": 941,
        "end_line": 970
      },
      {
        "struct_name": "rdbSaveInfo",
        "start_line": 980,
        "end_line": 988
      },
      {
        "struct_name": "malloc_stats",
        "start_line": 992,
        "end_line": 998
      },
      {
        "struct_name": "redisTLSContextConfig",
        "start_line": 1004,
        "end_line": 1014
      },
      {
        "struct_name": "redisServer",
        "start_line": 1033,
        "end_line": 1445
      },
      {
        "struct_name": "pubsubPattern",
        "start_line": 1447,
        "end_line": 1450
      },
      {
        "struct_name": "redisCommand",
        "start_line": 1454,
        "end_line": 1473
      },
      {
        "struct_name": "redisFunctionSym",
        "start_line": 1475,
        "end_line": 1478
      },
      {
        "struct_name": "_redisSortObject",
        "start_line": 1480,
        "end_line": 1486
      },
      {
        "struct_name": "_redisSortOperation",
        "start_line": 1488,
        "end_line": 1491
      },
      {
        "struct_name": "",
        "start_line": 1494,
        "end_line": 1499
      },
      {
        "struct_name": "",
        "start_line": 1502,
        "end_line": 1505
      },
      {
        "struct_name": "",
        "start_line": 1508,
        "end_line": 1513
      },
      {
        "struct_name": "",
        "start_line": 1519,
        "end_line": 1527
      },
      {
        "struct_name": "",
        "start_line": 1911,
        "end_line": 1914
      },
      {
        "struct_name": "",
        "start_line": 1917,
        "end_line": 1920
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/setcpuaffinity.c",
    "line": 148,
    "headers": [
      "string.h",
      "ctype.h",
      "sched.h",
      "sys/param.h",
      "sys/cpuset.h",
      "pthread.h",
      "sched.h"
    ],
    "methods": [
      {
        "method_name": "*next_token",
        "params": "(const char *q,  int sep)",
        "start_line": 46,
        "end_line": 53
      },
      {
        "method_name": "next_num",
        "params": "(const char *str, char **end, int *result)",
        "start_line": 55,
        "end_line": 64
      },
      {
        "method_name": "setcpuaffinity",
        "params": "(const char *cpulist)",
        "start_line": 69,
        "end_line": 146
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/setproctitle.c",
    "line": 265,
    "headers": [
      "stdarg.h",
      "stdlib.h",
      "stdio.h",
      "string.h",
      "errno.h"
    ],
    "methods": [
      {
        "method_name": "spt_min",
        "params": "(size_t a, size_t b)",
        "start_line": 74,
        "end_line": 76
      },
      {
        "method_name": "spt_clearenv",
        "params": "(void)",
        "start_line": 83,
        "end_line": 100
      },
      {
        "method_name": "spt_copyenv",
        "params": "(char *oldenv[])",
        "start_line": 103,
        "end_line": 131
      },
      {
        "method_name": "spt_copyargs",
        "params": "(int argc, char *argv[])",
        "start_line": 134,
        "end_line": 149
      },
      {
        "method_name": "spt_init",
        "params": "(int argc, char *argv[])",
        "start_line": 152,
        "end_line": 213
      },
      {
        "method_name": "setproctitle",
        "params": "(const char *fmt, ...)",
        "start_line": 220,
        "end_line": 261
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 55,
        "end_line": 67
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sha1.c",
    "line": 227,
    "headers": [
      "stdio.h",
      "string.h",
      "stdint.h",
      "solarisfixes.h",
      "sha1.h",
      "config.h"
    ],
    "methods": [
      {
        "method_name": "SHA1Transform",
        "params": "(uint32_t state[5], const unsigned char buffer[64])",
        "start_line": 57,
        "end_line": 112
      },
      {
        "method_name": "SHA1Init",
        "params": "(SHA1_CTX* context)",
        "start_line": 118,
        "end_line": 126
      },
      {
        "method_name": "SHA1Update",
        "params": "(SHA1_CTX* context, const unsigned char* data, uint32_t len)",
        "start_line": 132,
        "end_line": 150
      },
      {
        "method_name": "SHA1Final",
        "params": "(unsigned char digest[20], SHA1_CTX* context)",
        "start_line": 156,
        "end_line": 197
      },
      {
        "method_name": "sha1Test",
        "params": "(int argc, char **argv)",
        "start_line": 205,
        "end_line": 226
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sha1.h",
    "line": 24,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 10,
        "end_line": 14
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sha256.c",
    "line": 158,
    "headers": [
      "stdlib.h",
      "string.h",
      "sha256.h"
    ],
    "methods": [
      {
        "method_name": "sha256_transform",
        "params": "(SHA256_CTX *ctx, const BYTE data[])",
        "start_line": 45,
        "end_line": 83
      },
      {
        "method_name": "sha256_init",
        "params": "(SHA256_CTX *ctx)",
        "start_line": 86,
        "end_line": 97
      },
      {
        "method_name": "sha256_update",
        "params": "(SHA256_CTX *ctx, const BYTE data[], size_t len)",
        "start_line": 100,
        "end_line": 112
      },
      {
        "method_name": "sha256_final",
        "params": "(SHA256_CTX *ctx, BYTE hash[])",
        "start_line": 115,
        "end_line": 158
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sha256.h",
    "line": 35,
    "headers": [
      "stddef.h",
      "stdint.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "",
        "start_line": 23,
        "end_line": 28
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/siphash.c",
    "line": 361,
    "headers": [
      "assert.h",
      "stdint.h",
      "stdio.h",
      "string.h",
      "ctype.h"
    ],
    "methods": [
      {
        "method_name": "siptlw",
        "params": "(int c)",
        "start_line": 50,
        "end_line": 56
      },
      {
        "method_name": "siphash",
        "params": "(const uint8_t *in, const size_t inlen, const uint8_t *k)",
        "start_line": 116,
        "end_line": 173
      },
      {
        "method_name": "siphash_nocase",
        "params": "(const uint8_t *in, const size_t inlen, const uint8_t *k)",
        "start_line": 176,
        "end_line": 233
      },
      {
        "method_name": "siphash_test",
        "params": "(void)",
        "start_line": 314,
        "end_line": 349
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 351,
        "end_line": 359
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/slowlog.c",
    "line": 192,
    "headers": [
      "server.h",
      "slowlog.h"
    ],
    "methods": [
      {
        "method_name": "*slowlogCreateEntry",
        "params": "(client *c, robj **argv, int argc, long long duration)",
        "start_line": 48,
        "end_line": 94
      },
      {
        "method_name": "slowlogFreeEntry",
        "params": "(void *septr)",
        "start_line": 100,
        "end_line": 110
      },
      {
        "method_name": "slowlogInit",
        "params": "(void)",
        "start_line": 114,
        "end_line": 118
      },
      {
        "method_name": "slowlogPushEntryIfNeeded",
        "params": "(client *c, robj **argv, int argc, long long duration)",
        "start_line": 123,
        "end_line": 132
      },
      {
        "method_name": "slowlogReset",
        "params": "(void)",
        "start_line": 135,
        "end_line": 138
      },
      {
        "method_name": "slowlogCommand",
        "params": "(client *c)",
        "start_line": 142,
        "end_line": 192
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/slowlog.h",
    "line": 54,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "slowlogEntry",
        "start_line": 37,
        "end_line": 45
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/solarisfixes.h",
    "line": 54,
    "headers": [
      "math.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sort.c",
    "line": 597,
    "headers": [
      "server.h",
      "pqsort.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "*createSortOperation",
        "params": "(int type, robj *pattern)",
        "start_line": 38,
        "end_line": 43
      },
      {
        "method_name": "*lookupKeyByPattern",
        "params": "(redisDb *db, robj *pattern, robj *subst, int writeflag)",
        "start_line": 61,
        "end_line": 136
      },
      {
        "method_name": "sortCompare",
        "params": "(const void *s1, const void *s2)",
        "start_line": 141,
        "end_line": 188
      },
      {
        "method_name": "sortCommand",
        "params": "(client *c)",
        "start_line": 192,
        "end_line": 597
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sparkline.c",
    "line": 176,
    "headers": [
      "server.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "*createSparklineSequence",
        "params": "(void)",
        "start_line": 57,
        "end_line": 62
      },
      {
        "method_name": "sparklineSequenceAddSample",
        "params": "(struct sequence *seq, double value, char *label)",
        "start_line": 65,
        "end_line": 78
      },
      {
        "method_name": "freeSparklineSequence",
        "params": "(struct sequence *seq)",
        "start_line": 81,
        "end_line": 88
      },
      {
        "method_name": "sparklineRenderRange",
        "params": "(sds output, struct sequence *seq, int rows, int offset, int len, int flags)",
        "start_line": 97,
        "end_line": 162
      },
      {
        "method_name": "sparklineRender",
        "params": "(sds output, struct sequence *seq, int columns, int rows, int flags)",
        "start_line": 165,
        "end_line": 175
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/sparkline.h",
    "line": 56,
    "headers": [],
    "methods": [],
    "structs": [
      {
        "struct_name": "sample",
        "start_line": 34,
        "end_line": 37
      },
      {
        "struct_name": "sequence",
        "start_line": 39,
        "end_line": 44
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/stream.h",
    "line": 121,
    "headers": [
      "rax.h",
      "listpack.h"
    ],
    "methods": [],
    "structs": [
      {
        "struct_name": "streamID",
        "start_line": 11,
        "end_line": 14
      },
      {
        "struct_name": "stream",
        "start_line": 16,
        "end_line": 21
      },
      {
        "struct_name": "streamIterator",
        "start_line": 29,
        "end_line": 48
      },
      {
        "struct_name": "streamCG",
        "start_line": 51,
        "end_line": 64
      },
      {
        "struct_name": "streamConsumer",
        "start_line": 67,
        "end_line": 79
      },
      {
        "struct_name": "streamNACK",
        "start_line": 82,
        "end_line": 87
      },
      {
        "struct_name": "streamPropInfo",
        "start_line": 91,
        "end_line": 94
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/syncio.c",
    "line": 145,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "syncWrite",
        "params": "(int fd, char *ptr, ssize_t size, long long timeout)",
        "start_line": 49,
        "end_line": 79
      },
      {
        "method_name": "syncRead",
        "params": "(int fd, char *ptr, ssize_t size, long long timeout)",
        "start_line": 85,
        "end_line": 118
      },
      {
        "method_name": "syncReadLine",
        "params": "(int fd, char *ptr, ssize_t size, long long timeout)",
        "start_line": 125,
        "end_line": 145
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/t_hash.c",
    "line": 834,
    "headers": [
      "server.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "hashTypeTryConversion",
        "params": "(robj *o, robj **argv, int start, int end)",
        "start_line": 40,
        "end_line": 53
      },
      {
        "method_name": "hashTypeGetFromZiplist",
        "params": "(robj *o, sds field,\n                           unsigned char **vstr,\n                           unsigned int *vlen,\n                           long long *vll)",
        "start_line": 61,
        "end_line": 85
      },
      {
        "method_name": "hashTypeGetFromHashTable",
        "params": "(robj *o, sds field)",
        "start_line": 90,
        "end_line": 98
      },
      {
        "method_name": "hashTypeGetValue",
        "params": "(robj *o, sds field, unsigned char **vstr, unsigned int *vlen, long long *vll)",
        "start_line": 109,
        "end_line": 125
      },
      {
        "method_name": "*hashTypeGetValueObject",
        "params": "(robj *o, sds field)",
        "start_line": 131,
        "end_line": 139
      },
      {
        "method_name": "hashTypeGetValueLength",
        "params": "(robj *o, sds field)",
        "start_line": 144,
        "end_line": 162
      },
      {
        "method_name": "hashTypeExists",
        "params": "(robj *o, sds field)",
        "start_line": 166,
        "end_line": 179
      },
      {
        "method_name": "hashTypeSet",
        "params": "(robj *o, sds field, sds value, int flags)",
        "start_line": 202,
        "end_line": 275
      },
      {
        "method_name": "hashTypeDelete",
        "params": "(robj *o, sds field)",
        "start_line": 279,
        "end_line": 308
      },
      {
        "method_name": "hashTypeLength",
        "params": "(const robj *o)",
        "start_line": 311,
        "end_line": 322
      },
      {
        "method_name": "*hashTypeInitIterator",
        "params": "(robj *subject)",
        "start_line": 324,
        "end_line": 338
      },
      {
        "method_name": "hashTypeReleaseIterator",
        "params": "(hashTypeIterator *hi)",
        "start_line": 340,
        "end_line": 344
      },
      {
        "method_name": "hashTypeNext",
        "params": "(hashTypeIterator *hi)",
        "start_line": 348,
        "end_line": 381
      },
      {
        "method_name": "hashTypeCurrentFromZiplist",
        "params": "(hashTypeIterator *hi, int what,\n                                unsigned char **vstr,\n                                unsigned int *vlen,\n                                long long *vll)",
        "start_line": 389,
        "end_line": 401
      },
      {
        "method_name": "hashTypeCurrentFromHashTable",
        "params": "(hashTypeIterator *hi, int what)",
        "start_line": 406,
        "end_line": 414
      },
      {
        "method_name": "hashTypeCurrentObject",
        "params": "(hashTypeIterator *hi, int what, unsigned char **vstr, unsigned int *vlen, long long *vll)",
        "start_line": 426,
        "end_line": 437
      },
      {
        "method_name": "hashTypeCurrentObjectNewSds",
        "params": "(hashTypeIterator *hi, int what)",
        "start_line": 441,
        "end_line": 449
      },
      {
        "method_name": "*hashTypeLookupWriteOrCreate",
        "params": "(client *c, robj *key)",
        "start_line": 451,
        "end_line": 463
      },
      {
        "method_name": "hashTypeConvertZiplist",
        "params": "(robj *o, int enc)",
        "start_line": 465,
        "end_line": 498
      },
      {
        "method_name": "hashTypeConvert",
        "params": "(robj *o, int enc)",
        "start_line": 500,
        "end_line": 508
      },
      {
        "method_name": "hsetnxCommand",
        "params": "(client *c)",
        "start_line": 514,
        "end_line": 528
      },
      {
        "method_name": "hsetCommand",
        "params": "(client *c)",
        "start_line": 530,
        "end_line": 557
      },
      {
        "method_name": "hincrbyCommand",
        "params": "(client *c)",
        "start_line": 559,
        "end_line": 592
      },
      {
        "method_name": "hincrbyfloatCommand",
        "params": "(client *c)",
        "start_line": 594,
        "end_line": 642
      },
      {
        "method_name": "addHashFieldToReply",
        "params": "(client *c, robj *o, sds field)",
        "start_line": 644,
        "end_line": 677
      },
      {
        "method_name": "hgetCommand",
        "params": "(client *c)",
        "start_line": 679,
        "end_line": 686
      },
      {
        "method_name": "hmgetCommand",
        "params": "(client *c)",
        "start_line": 688,
        "end_line": 704
      },
      {
        "method_name": "hdelCommand",
        "params": "(client *c)",
        "start_line": 706,
        "end_line": 732
      },
      {
        "method_name": "hlenCommand",
        "params": "(client *c)",
        "start_line": 734,
        "end_line": 741
      },
      {
        "method_name": "hstrlenCommand",
        "params": "(client *c)",
        "start_line": 743,
        "end_line": 749
      },
      {
        "method_name": "addHashIteratorCursorToReply",
        "params": "(client *c, hashTypeIterator *hi, int what)",
        "start_line": 751,
        "end_line": 768
      },
      {
        "method_name": "genericHgetallCommand",
        "params": "(client *c, int flags)",
        "start_line": 770,
        "end_line": 804
      },
      {
        "method_name": "hkeysCommand",
        "params": "(client *c)",
        "start_line": 806,
        "end_line": 808
      },
      {
        "method_name": "hvalsCommand",
        "params": "(client *c)",
        "start_line": 810,
        "end_line": 812
      },
      {
        "method_name": "hgetallCommand",
        "params": "(client *c)",
        "start_line": 814,
        "end_line": 816
      },
      {
        "method_name": "hexistsCommand",
        "params": "(client *c)",
        "start_line": 818,
        "end_line": 824
      },
      {
        "method_name": "hscanCommand",
        "params": "(client *c)",
        "start_line": 826,
        "end_line": 834
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/t_list.c",
    "line": 886,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "listTypePush",
        "params": "(robj *subject, robj *value, int where)",
        "start_line": 41,
        "end_line": 51
      },
      {
        "method_name": "*listPopSaver",
        "params": "(unsigned char *data, unsigned int sz)",
        "start_line": 53,
        "end_line": 55
      },
      {
        "method_name": "*listTypePop",
        "params": "(robj *subject, int where)",
        "start_line": 57,
        "end_line": 72
      },
      {
        "method_name": "listTypeLength",
        "params": "(const robj *subject)",
        "start_line": 74,
        "end_line": 80
      },
      {
        "method_name": "*listTypeInitIterator",
        "params": "(robj *subject, long index,\n                                       unsigned char direction)",
        "start_line": 84,
        "end_line": 101
      },
      {
        "method_name": "listTypeReleaseIterator",
        "params": "(listTypeIterator *li)",
        "start_line": 104,
        "end_line": 107
      },
      {
        "method_name": "listTypeNext",
        "params": "(listTypeIterator *li, listTypeEntry *entry)",
        "start_line": 112,
        "end_line": 123
      },
      {
        "method_name": "*listTypeGet",
        "params": "(listTypeEntry *entry)",
        "start_line": 126,
        "end_line": 139
      },
      {
        "method_name": "listTypeInsert",
        "params": "(listTypeEntry *entry, robj *value, int where)",
        "start_line": 141,
        "end_line": 157
      },
      {
        "method_name": "listTypeEqual",
        "params": "(listTypeEntry *entry, robj *o)",
        "start_line": 160,
        "end_line": 167
      },
      {
        "method_name": "listTypeDelete",
        "params": "(listTypeIterator *iter, listTypeEntry *entry)",
        "start_line": 170,
        "end_line": 176
      },
      {
        "method_name": "listTypeConvert",
        "params": "(robj *subject, int enc)",
        "start_line": 179,
        "end_line": 191
      },
      {
        "method_name": "pushGenericCommand",
        "params": "(client *c, int where)",
        "start_line": 197,
        "end_line": 224
      },
      {
        "method_name": "lpushCommand",
        "params": "(client *c)",
        "start_line": 226,
        "end_line": 228
      },
      {
        "method_name": "rpushCommand",
        "params": "(client *c)",
        "start_line": 230,
        "end_line": 232
      },
      {
        "method_name": "pushxGenericCommand",
        "params": "(client *c, int where)",
        "start_line": 234,
        "end_line": 254
      },
      {
        "method_name": "lpushxCommand",
        "params": "(client *c)",
        "start_line": 256,
        "end_line": 258
      },
      {
        "method_name": "rpushxCommand",
        "params": "(client *c)",
        "start_line": 260,
        "end_line": 262
      },
      {
        "method_name": "linsertCommand",
        "params": "(client *c)",
        "start_line": 264,
        "end_line": 306
      },
      {
        "method_name": "llenCommand",
        "params": "(client *c)",
        "start_line": 308,
        "end_line": 312
      },
      {
        "method_name": "lindexCommand",
        "params": "(client *c)",
        "start_line": 314,
        "end_line": 339
      },
      {
        "method_name": "lsetCommand",
        "params": "(client *c)",
        "start_line": 341,
        "end_line": 365
      },
      {
        "method_name": "popGenericCommand",
        "params": "(client *c, int where)",
        "start_line": 367,
        "end_line": 388
      },
      {
        "method_name": "lpopCommand",
        "params": "(client *c)",
        "start_line": 390,
        "end_line": 392
      },
      {
        "method_name": "rpopCommand",
        "params": "(client *c)",
        "start_line": 394,
        "end_line": 396
      },
      {
        "method_name": "lrangeCommand",
        "params": "(client *c)",
        "start_line": 398,
        "end_line": 442
      },
      {
        "method_name": "ltrimCommand",
        "params": "(client *c)",
        "start_line": 444,
        "end_line": 488
      },
      {
        "method_name": "lposCommand",
        "params": "(client *c)",
        "start_line": 507,
        "end_line": 604
      },
      {
        "method_name": "lremCommand",
        "params": "(client *c)",
        "start_line": 606,
        "end_line": 648
      },
      {
        "method_name": "rpoplpushHandlePush",
        "params": "(client *c, robj *dstkey, robj *dstobj, robj *value)",
        "start_line": 666,
        "end_line": 679
      },
      {
        "method_name": "rpoplpushCommand",
        "params": "(client *c)",
        "start_line": 681,
        "end_line": 719
      },
      {
        "method_name": "serveClientBlockedOnList",
        "params": "(client *receiver, robj *key, robj *dstkey, redisDb *db, robj *value, int where)",
        "start_line": 745,
        "end_line": 792
      },
      {
        "method_name": "blockingPopGenericCommand",
        "params": "(client *c, int where)",
        "start_line": 795,
        "end_line": 849
      },
      {
        "method_name": "blpopCommand",
        "params": "(client *c)",
        "start_line": 851,
        "end_line": 853
      },
      {
        "method_name": "brpopCommand",
        "params": "(client *c)",
        "start_line": 855,
        "end_line": 857
      },
      {
        "method_name": "brpoplpushCommand",
        "params": "(client *c)",
        "start_line": 859,
        "end_line": 886
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/t_set.c",
    "line": 1116,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "*setTypeCreate",
        "params": "(sds value)",
        "start_line": 42,
        "end_line": 46
      },
      {
        "method_name": "setTypeAdd",
        "params": "(robj *subject, sds value)",
        "start_line": 52,
        "end_line": 86
      },
      {
        "method_name": "setTypeRemove",
        "params": "(robj *setobj, sds value)",
        "start_line": 88,
        "end_line": 105
      },
      {
        "method_name": "setTypeIsMember",
        "params": "(robj *subject, sds value)",
        "start_line": 107,
        "end_line": 119
      },
      {
        "method_name": "*setTypeInitIterator",
        "params": "(robj *subject)",
        "start_line": 121,
        "end_line": 133
      },
      {
        "method_name": "setTypeReleaseIterator",
        "params": "(setTypeIterator *si)",
        "start_line": 135,
        "end_line": 139
      },
      {
        "method_name": "setTypeNext",
        "params": "(setTypeIterator *si, sds *sdsele, int64_t *llele)",
        "start_line": 154,
        "end_line": 168
      },
      {
        "method_name": "setTypeNextObject",
        "params": "(setTypeIterator *si)",
        "start_line": 177,
        "end_line": 193
      },
      {
        "method_name": "setTypeRandomElement",
        "params": "(robj *setobj, sds *sdsele, int64_t *llele)",
        "start_line": 208,
        "end_line": 220
      },
      {
        "method_name": "setTypeSize",
        "params": "(const robj *subject)",
        "start_line": 222,
        "end_line": 230
      },
      {
        "method_name": "setTypeConvert",
        "params": "(robj *setobj, int enc)",
        "start_line": 235,
        "end_line": 262
      },
      {
        "method_name": "saddCommand",
        "params": "(client *c)",
        "start_line": 264,
        "end_line": 288
      },
      {
        "method_name": "sremCommand",
        "params": "(client *c)",
        "start_line": 290,
        "end_line": 316
      },
      {
        "method_name": "smoveCommand",
        "params": "(client *c)",
        "start_line": 318,
        "end_line": 371
      },
      {
        "method_name": "sismemberCommand",
        "params": "(client *c)",
        "start_line": 373,
        "end_line": 383
      },
      {
        "method_name": "scardCommand",
        "params": "(client *c)",
        "start_line": 385,
        "end_line": 392
      },
      {
        "method_name": "spopWithCountCommand",
        "params": "(client *c)",
        "start_line": 402,
        "end_line": 551
      },
      {
        "method_name": "spopCommand",
        "params": "(client *c)",
        "start_line": 553,
        "end_line": 604
      },
      {
        "method_name": "srandmemberWithCountCommand",
        "params": "(client *c)",
        "start_line": 614,
        "end_line": 747
      },
      {
        "method_name": "srandmemberCommand",
        "params": "(client *c)",
        "start_line": 749,
        "end_line": 772
      },
      {
        "method_name": "qsortCompareSetsByCardinality",
        "params": "(const void *s1, const void *s2)",
        "start_line": 774,
        "end_line": 778
      },
      {
        "method_name": "qsortCompareSetsByRevCardinality",
        "params": "(const void *s1, const void *s2)",
        "start_line": 782,
        "end_line": 790
      },
      {
        "method_name": "sinterGenericCommand",
        "params": "(client *c, robj **setkeys,\n                          unsigned long setnum, robj *dstkey)",
        "start_line": 793,
        "end_line": 917
      },
      {
        "method_name": "sinterCommand",
        "params": "(client *c)",
        "start_line": 919,
        "end_line": 921
      },
      {
        "method_name": "sinterstoreCommand",
        "params": "(client *c)",
        "start_line": 923,
        "end_line": 925
      },
      {
        "method_name": "sunionDiffGenericCommand",
        "params": "(client *c, robj **setkeys, int setnum,\n                              robj *dstkey, int op)",
        "start_line": 932,
        "end_line": 1090
      },
      {
        "method_name": "sunionCommand",
        "params": "(client *c)",
        "start_line": 1092,
        "end_line": 1094
      },
      {
        "method_name": "sunionstoreCommand",
        "params": "(client *c)",
        "start_line": 1096,
        "end_line": 1098
      },
      {
        "method_name": "sdiffCommand",
        "params": "(client *c)",
        "start_line": 1100,
        "end_line": 1102
      },
      {
        "method_name": "sdiffstoreCommand",
        "params": "(client *c)",
        "start_line": 1104,
        "end_line": 1106
      },
      {
        "method_name": "sscanCommand",
        "params": "(client *c)",
        "start_line": 1108,
        "end_line": 1116
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/t_stream.c",
    "line": 2782,
    "headers": [
      "server.h",
      "endianconv.h",
      "stream.h"
    ],
    "methods": [
      {
        "method_name": "*streamNew",
        "params": "(void)",
        "start_line": 52,
        "end_line": 60
      },
      {
        "method_name": "freeStream",
        "params": "(stream *s)",
        "start_line": 63,
        "end_line": 68
      },
      {
        "method_name": "streamLength",
        "params": "(const robj *subject)",
        "start_line": 71,
        "end_line": 74
      },
      {
        "method_name": "streamIncrID",
        "params": "(streamID *id)",
        "start_line": 77,
        "end_line": 89
      },
      {
        "method_name": "streamNextID",
        "params": "(streamID *last_id, streamID *new_id)",
        "start_line": 95,
        "end_line": 104
      },
      {
        "method_name": "*lpAppendInteger",
        "params": "(unsigned char *lp, int64_t value)",
        "start_line": 108,
        "end_line": 112
      },
      {
        "method_name": "*lpReplaceInteger",
        "params": "(unsigned char *lp, unsigned char **pos, int64_t value)",
        "start_line": 118,
        "end_line": 122
      },
      {
        "method_name": "lpGetInteger",
        "params": "(unsigned char *ele)",
        "start_line": 127,
        "end_line": 139
      },
      {
        "method_name": "streamLogListpackContent",
        "params": "(unsigned char *lp)",
        "start_line": 143,
        "end_line": 152
      },
      {
        "method_name": "streamEncodeID",
        "params": "(void *buf, streamID *id)",
        "start_line": 156,
        "end_line": 161
      },
      {
        "method_name": "streamDecodeID",
        "params": "(void *buf, streamID *id)",
        "start_line": 166,
        "end_line": 171
      },
      {
        "method_name": "streamCompareID",
        "params": "(streamID *a, streamID *b)",
        "start_line": 174,
        "end_line": 182
      },
      {
        "method_name": "streamAppendItem",
        "params": "(stream *s, robj **argv, int64_t numfields, streamID *added_id, streamID *use_id)",
        "start_line": 196,
        "end_line": 382
      },
      {
        "method_name": "streamTrimByLength",
        "params": "(stream *s, size_t maxlen, int approx)",
        "start_line": 398,
        "end_line": 489
      },
      {
        "method_name": "while(streamIteratorGetID",
        "params": "(\u0026myiterator,\u0026ID,\u0026numfields))",
        "start_line": 502,
        "end_line": 510
      },
      {
        "method_name": "streamIteratorStart",
        "params": "(streamIterator *si, stream *s, streamID *start, streamID *end, int rev)",
        "start_line": 512,
        "end_line": 552
      },
      {
        "method_name": "streamIteratorGetID",
        "params": "(streamIterator *si, streamID *id, int64_t *numfields)",
        "start_line": 557,
        "end_line": 694
      },
      {
        "method_name": "streamIteratorGetField",
        "params": "(streamIterator *si, unsigned char **fieldptr, unsigned char **valueptr, int64_t *fieldlen, int64_t *valuelen)",
        "start_line": 702,
        "end_line": 712
      },
      {
        "method_name": "streamIteratorRemoveEntry",
        "params": "(streamIterator *si, streamID *current)",
        "start_line": 724,
        "end_line": 775
      },
      {
        "method_name": "streamIteratorStop",
        "params": "(streamIterator *si)",
        "start_line": 780,
        "end_line": 782
      },
      {
        "method_name": "streamDeleteItem",
        "params": "(stream *s, streamID *id)",
        "start_line": 786,
        "end_line": 798
      },
      {
        "method_name": "streamLastValidID",
        "params": "(stream *s, streamID *maxid)",
        "start_line": 802,
        "end_line": 808
      },
      {
        "method_name": "addReplyStreamID",
        "params": "(client *c, streamID *id)",
        "start_line": 813,
        "end_line": 816
      },
      {
        "method_name": "*createObjectFromStreamID",
        "params": "(streamID *id)",
        "start_line": 820,
        "end_line": 823
      },
      {
        "method_name": "streamPropagateXCLAIM",
        "params": "(client *c, robj *key, streamCG *group, robj *groupname, robj *id, streamNACK *nack)",
        "start_line": 828,
        "end_line": 868
      },
      {
        "method_name": "streamPropagateGroupID",
        "params": "(client *c, robj *key, streamCG *group, robj *groupname)",
        "start_line": 876,
        "end_line": 892
      },
      {
        "method_name": "streamReplyWithRange",
        "params": "(client *c, stream *s, streamID *start, streamID *end, size_t count, int rev, streamCG *group, streamConsumer *consumer, int flags, streamPropInfo *spi)",
        "start_line": 942,
        "end_line": 1048
      },
      {
        "method_name": "streamReplyWithRangeFromConsumerPEL",
        "params": "(client *c, stream *s, streamID *start, streamID *end, size_t count, streamConsumer *consumer)",
        "start_line": 1063,
        "end_line": 1098
      },
      {
        "method_name": "*streamTypeLookupWriteOrCreate",
        "params": "(client *c, robj *key)",
        "start_line": 1106,
        "end_line": 1118
      },
      {
        "method_name": "streamGenericParseIDOrReply",
        "params": "(client *c, robj *o, streamID *id, uint64_t missing_seq, int strict)",
        "start_line": 1132,
        "end_line": 1166
      },
      {
        "method_name": "streamParseIDOrReply",
        "params": "(client *c, robj *o, streamID *id, uint64_t missing_seq)",
        "start_line": 1170,
        "end_line": 1172
      },
      {
        "method_name": "streamParseStrictIDOrReply",
        "params": "(client *c, robj *o, streamID *id, uint64_t missing_seq)",
        "start_line": 1177,
        "end_line": 1179
      },
      {
        "method_name": "streamRewriteApproxMaxlen",
        "params": "(client *c, stream *s, int maxlen_arg_idx)",
        "start_line": 1183,
        "end_line": 1192
      },
      {
        "method_name": "xaddCommand",
        "params": "(client *c)",
        "start_line": 1195,
        "end_line": 1301
      },
      {
        "method_name": "xrangeGenericCommand",
        "params": "(client *c, int rev)",
        "start_line": 1304,
        "end_line": 1343
      },
      {
        "method_name": "xrangeCommand",
        "params": "(client *c)",
        "start_line": 1346,
        "end_line": 1348
      },
      {
        "method_name": "xrevrangeCommand",
        "params": "(client *c)",
        "start_line": 1351,
        "end_line": 1353
      },
      {
        "method_name": "xlenCommand",
        "params": "(client *c)",
        "start_line": 1356,
        "end_line": 1362
      },
      {
        "method_name": "xreadCommand",
        "params": "(client *c)",
        "start_line": 1372,
        "end_line": 1639
      },
      {
        "method_name": "*streamCreateNACK",
        "params": "(streamConsumer *consumer)",
        "start_line": 1648,
        "end_line": 1654
      },
      {
        "method_name": "streamFreeNACK",
        "params": "(streamNACK *na)",
        "start_line": 1657,
        "end_line": 1659
      },
      {
        "method_name": "streamFreeConsumer",
        "params": "(streamConsumer *sc)",
        "start_line": 1666,
        "end_line": 1671
      },
      {
        "method_name": "*streamCreateCG",
        "params": "(stream *s, char *name, size_t namelen, streamID *id)",
        "start_line": 1677,
        "end_line": 1688
      },
      {
        "method_name": "streamFreeCG",
        "params": "(streamCG *cg)",
        "start_line": 1691,
        "end_line": 1695
      },
      {
        "method_name": "*streamLookupCG",
        "params": "(stream *s, sds groupname)",
        "start_line": 1699,
        "end_line": 1704
      },
      {
        "method_name": "*streamLookupConsumer",
        "params": "(streamCG *cg, sds name, int flags)",
        "start_line": 1710,
        "end_line": 1725
      },
      {
        "method_name": "streamDelConsumer",
        "params": "(streamCG *cg, sds name)",
        "start_line": 1730,
        "end_line": 1753
      },
      {
        "method_name": "xgroupCommand",
        "params": "(client *c)",
        "start_line": 1763,
        "end_line": 1893
      },
      {
        "method_name": "xsetidCommand",
        "params": "(client *c)",
        "start_line": 1898,
        "end_line": 1923
      },
      {
        "method_name": "xackCommand",
        "params": "(client *c)",
        "start_line": 1934,
        "end_line": 1978
      },
      {
        "method_name": "xpendingCommand",
        "params": "(client *c)",
        "start_line": 1989,
        "end_line": 2129
      },
      {
        "method_name": "xclaimCommand",
        "params": "(client *c)",
        "start_line": 2197,
        "end_line": 2382
      },
      {
        "method_name": "xdelCommand",
        "params": "(client *c)",
        "start_line": 2390,
        "end_line": 2419
      },
      {
        "method_name": "xtrimCommand",
        "params": "(client *c)",
        "start_line": 2433,
        "end_line": 2497
      },
      {
        "method_name": "xinfoReplyWithStreamInfo",
        "params": "(client *c, stream *s)",
        "start_line": 2501,
        "end_line": 2681
      },
      {
        "method_name": "xinfoCommand",
        "params": "(client *c)",
        "start_line": 2687,
        "end_line": 2782
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/t_string.c",
    "line": 711,
    "headers": [
      "server.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "checkStringLength",
        "params": "(client *c, long long size)",
        "start_line": 37,
        "end_line": 43
      },
      {
        "method_name": "setGenericCommand",
        "params": "(client *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply)",
        "start_line": 68,
        "end_line": 94
      },
      {
        "method_name": "setCommand",
        "params": "(client *c)",
        "start_line": 97,
        "end_line": 147
      },
      {
        "method_name": "setnxCommand",
        "params": "(client *c)",
        "start_line": 149,
        "end_line": 152
      },
      {
        "method_name": "setexCommand",
        "params": "(client *c)",
        "start_line": 154,
        "end_line": 157
      },
      {
        "method_name": "psetexCommand",
        "params": "(client *c)",
        "start_line": 159,
        "end_line": 162
      },
      {
        "method_name": "getGenericCommand",
        "params": "(client *c)",
        "start_line": 164,
        "end_line": 177
      },
      {
        "method_name": "getCommand",
        "params": "(client *c)",
        "start_line": 179,
        "end_line": 181
      },
      {
        "method_name": "getsetCommand",
        "params": "(client *c)",
        "start_line": 183,
        "end_line": 189
      },
      {
        "method_name": "setrangeCommand",
        "params": "(client *c)",
        "start_line": 191,
        "end_line": 249
      },
      {
        "method_name": "getrangeCommand",
        "params": "(client *c)",
        "start_line": 251,
        "end_line": 290
      },
      {
        "method_name": "mgetCommand",
        "params": "(client *c)",
        "start_line": 292,
        "end_line": 308
      },
      {
        "method_name": "msetGenericCommand",
        "params": "(client *c, int nx)",
        "start_line": 310,
        "end_line": 336
      },
      {
        "method_name": "msetCommand",
        "params": "(client *c)",
        "start_line": 338,
        "end_line": 340
      },
      {
        "method_name": "msetnxCommand",
        "params": "(client *c)",
        "start_line": 342,
        "end_line": 344
      },
      {
        "method_name": "incrDecrCommand",
        "params": "(client *c, long long incr)",
        "start_line": 346,
        "end_line": 382
      },
      {
        "method_name": "incrCommand",
        "params": "(client *c)",
        "start_line": 384,
        "end_line": 386
      },
      {
        "method_name": "decrCommand",
        "params": "(client *c)",
        "start_line": 388,
        "end_line": 390
      },
      {
        "method_name": "incrbyCommand",
        "params": "(client *c)",
        "start_line": 392,
        "end_line": 397
      },
      {
        "method_name": "decrbyCommand",
        "params": "(client *c)",
        "start_line": 399,
        "end_line": 404
      },
      {
        "method_name": "incrbyfloatCommand",
        "params": "(client *c)",
        "start_line": 406,
        "end_line": 441
      },
      {
        "method_name": "appendCommand",
        "params": "(client *c)",
        "start_line": 443,
        "end_line": 474
      },
      {
        "method_name": "strlenCommand",
        "params": "(client *c)",
        "start_line": 476,
        "end_line": 481
      },
      {
        "method_name": "stralgoCommand",
        "params": "(client *c)",
        "start_line": 488,
        "end_line": 495
      },
      {
        "method_name": "stralgoLCS",
        "params": "(client *c)",
        "start_line": 500,
        "end_line": 710
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/t_zset.c",
    "line": 3306,
    "headers": [
      "server.h",
      "math.h"
    ],
    "methods": [
      {
        "method_name": "*zslCreateNode",
        "params": "(int level, double score, sds ele)",
        "start_line": 71,
        "end_line": 77
      },
      {
        "method_name": "*zslCreate",
        "params": "(void)",
        "start_line": 80,
        "end_line": 95
      },
      {
        "method_name": "zslFreeNode",
        "params": "(zskiplistNode *node)",
        "start_line": 100,
        "end_line": 103
      },
      {
        "method_name": "zslFree",
        "params": "(zskiplist *zsl)",
        "start_line": 106,
        "end_line": 116
      },
      {
        "method_name": "zslRandomLevel",
        "params": "(void)",
        "start_line": 122,
        "end_line": 127
      },
      {
        "method_name": "*zslInsert",
        "params": "(zskiplist *zsl, double score, sds ele)",
        "start_line": 132,
        "end_line": 187
      },
      {
        "method_name": "zslDeleteNode",
        "params": "(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update)",
        "start_line": 191,
        "end_line": 209
      },
      {
        "method_name": "zslDelete",
        "params": "(zskiplist *zsl, double score, sds ele, zskiplistNode **node)",
        "start_line": 219,
        "end_line": 246
      },
      {
        "method_name": "*zslUpdateScore",
        "params": "(zskiplist *zsl, double curscore, sds ele, double newscore)",
        "start_line": 259,
        "end_line": 301
      },
      {
        "method_name": "zslValueGteMin",
        "params": "(double value, zrangespec *spec)",
        "start_line": 303,
        "end_line": 305
      },
      {
        "method_name": "zslValueLteMax",
        "params": "(double value, zrangespec *spec)",
        "start_line": 307,
        "end_line": 309
      },
      {
        "method_name": "zslIsInRange",
        "params": "(zskiplist *zsl, zrangespec *range)",
        "start_line": 312,
        "end_line": 326
      },
      {
        "method_name": "*zslFirstInRange",
        "params": "(zskiplist *zsl, zrangespec *range)",
        "start_line": 330,
        "end_line": 352
      },
      {
        "method_name": "*zslLastInRange",
        "params": "(zskiplist *zsl, zrangespec *range)",
        "start_line": 356,
        "end_line": 377
      },
      {
        "method_name": "zslDeleteRangeByScore",
        "params": "(zskiplist *zsl, zrangespec *range, dict *dict)",
        "start_line": 383,
        "end_line": 412
      },
      {
        "method_name": "zslDeleteRangeByLex",
        "params": "(zskiplist *zsl, zlexrangespec *range, dict *dict)",
        "start_line": 414,
        "end_line": 441
      },
      {
        "method_name": "zslDeleteRangeByRank",
        "params": "(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict)",
        "start_line": 445,
        "end_line": 471
      },
      {
        "method_name": "zslGetRank",
        "params": "(zskiplist *zsl, double score, sds ele)",
        "start_line": 477,
        "end_line": 498
      },
      {
        "method_name": "zslGetElementByRank",
        "params": "(zskiplist *zsl, unsigned long rank)",
        "start_line": 501,
        "end_line": 518
      },
      {
        "method_name": "zslParseRange",
        "params": "(robj *min, robj *max, zrangespec *spec)",
        "start_line": 521,
        "end_line": 555
      },
      {
        "method_name": "zslParseLexRangeItem",
        "params": "(robj *item, sds *dest, int *ex)",
        "start_line": 572,
        "end_line": 597
      },
      {
        "method_name": "zslFreeLexRange",
        "params": "(zlexrangespec *spec)",
        "start_line": 601,
        "end_line": 606
      },
      {
        "method_name": "zslParseLexRange",
        "params": "(robj *min, robj *max, zlexrangespec *spec)",
        "start_line": 613,
        "end_line": 627
      },
      {
        "method_name": "sdscmplex",
        "params": "(sds a, sds b)",
        "start_line": 632,
        "end_line": 637
      },
      {
        "method_name": "zslLexValueGteMin",
        "params": "(sds value, zlexrangespec *spec)",
        "start_line": 639,
        "end_line": 643
      },
      {
        "method_name": "zslLexValueLteMax",
        "params": "(sds value, zlexrangespec *spec)",
        "start_line": 645,
        "end_line": 649
      },
      {
        "method_name": "zslIsInLexRange",
        "params": "(zskiplist *zsl, zlexrangespec *range)",
        "start_line": 652,
        "end_line": 666
      },
      {
        "method_name": "*zslFirstInLexRange",
        "params": "(zskiplist *zsl, zlexrangespec *range)",
        "start_line": 670,
        "end_line": 692
      },
      {
        "method_name": "*zslLastInLexRange",
        "params": "(zskiplist *zsl, zlexrangespec *range)",
        "start_line": 696,
        "end_line": 717
      },
      {
        "method_name": "zzlGetScore",
        "params": "(unsigned char *sptr)",
        "start_line": 723,
        "end_line": 742
      },
      {
        "method_name": "ziplistGetObject",
        "params": "(unsigned char *sptr)",
        "start_line": 745,
        "end_line": 758
      },
      {
        "method_name": "zzlCompareElements",
        "params": "(unsigned char *eptr, unsigned char *cstr, unsigned int clen)",
        "start_line": 761,
        "end_line": 779
      },
      {
        "method_name": "zzlLength",
        "params": "(unsigned char *zl)",
        "start_line": 781,
        "end_line": 783
      },
      {
        "method_name": "zzlNext",
        "params": "(unsigned char *zl, unsigned char **eptr, unsigned char **sptr)",
        "start_line": 787,
        "end_line": 802
      },
      {
        "method_name": "zzlPrev",
        "params": "(unsigned char *zl, unsigned char **eptr, unsigned char **sptr)",
        "start_line": 806,
        "end_line": 821
      },
      {
        "method_name": "zzlIsInRange",
        "params": "(unsigned char *zl, zrangespec *range)",
        "start_line": 825,
        "end_line": 847
      },
      {
        "method_name": "*zzlFirstInRange",
        "params": "(unsigned char *zl, zrangespec *range)",
        "start_line": 851,
        "end_line": 875
      },
      {
        "method_name": "*zzlLastInRange",
        "params": "(unsigned char *zl, zrangespec *range)",
        "start_line": 879,
        "end_line": 908
      },
      {
        "method_name": "zzlLexValueGteMin",
        "params": "(unsigned char *p, zlexrangespec *spec)",
        "start_line": 910,
        "end_line": 915
      },
      {
        "method_name": "zzlLexValueLteMax",
        "params": "(unsigned char *p, zlexrangespec *spec)",
        "start_line": 917,
        "end_line": 922
      },
      {
        "method_name": "zzlIsInLexRange",
        "params": "(unsigned char *zl, zlexrangespec *range)",
        "start_line": 926,
        "end_line": 945
      },
      {
        "method_name": "*zzlFirstInLexRange",
        "params": "(unsigned char *zl, zlexrangespec *range)",
        "start_line": 949,
        "end_line": 970
      },
      {
        "method_name": "*zzlLastInLexRange",
        "params": "(unsigned char *zl, zlexrangespec *range)",
        "start_line": 974,
        "end_line": 998
      },
      {
        "method_name": "*zzlFind",
        "params": "(unsigned char *zl, sds ele, double *score)",
        "start_line": 1000,
        "end_line": 1017
      },
      {
        "method_name": "*zzlDelete",
        "params": "(unsigned char *zl, unsigned char *eptr)",
        "start_line": 1021,
        "end_line": 1028
      },
      {
        "method_name": "*zzlInsertAt",
        "params": "(unsigned char *zl, unsigned char *eptr, sds ele, double score)",
        "start_line": 1030,
        "end_line": 1051
      },
      {
        "method_name": "*zzlInsert",
        "params": "(unsigned char *zl, sds ele, double score)",
        "start_line": 1055,
        "end_line": 1086
      },
      {
        "method_name": "*zzlDeleteRangeByScore",
        "params": "(unsigned char *zl, zrangespec *range, unsigned long *deleted)",
        "start_line": 1088,
        "end_line": 1115
      },
      {
        "method_name": "*zzlDeleteRangeByLex",
        "params": "(unsigned char *zl, zlexrangespec *range, unsigned long *deleted)",
        "start_line": 1117,
        "end_line": 1142
      },
      {
        "method_name": "*zzlDeleteRangeByRank",
        "params": "(unsigned char *zl, unsigned int start, unsigned int end, unsigned long *deleted)",
        "start_line": 1146,
        "end_line": 1151
      },
      {
        "method_name": "zsetLength",
        "params": "(const robj *zobj)",
        "start_line": 1157,
        "end_line": 1167
      },
      {
        "method_name": "zsetConvert",
        "params": "(robj *zobj, int encoding)",
        "start_line": 1169,
        "end_line": 1238
      },
      {
        "method_name": "zsetConvertToZiplistIfNeeded",
        "params": "(robj *zobj, size_t maxelelen)",
        "start_line": 1243,
        "end_line": 1250
      },
      {
        "method_name": "zsetScore",
        "params": "(robj *zobj, sds member, double *score)",
        "start_line": 1256,
        "end_line": 1270
      },
      {
        "method_name": "zsetAdd",
        "params": "(robj *zobj, double score, sds ele, int *flags, double *newscore)",
        "start_line": 1315,
        "end_line": 1420
      },
      {
        "method_name": "zsetDel",
        "params": "(robj *zobj, sds ele)",
        "start_line": 1424,
        "end_line": 1460
      },
      {
        "method_name": "zsetRank",
        "params": "(robj *zobj, sds ele, int reverse)",
        "start_line": 1473,
        "end_line": 1526
      },
      {
        "method_name": "zaddGenericCommand",
        "params": "(client *c, int flags)",
        "start_line": 1533,
        "end_line": 1653
      },
      {
        "method_name": "zaddCommand",
        "params": "(client *c)",
        "start_line": 1655,
        "end_line": 1657
      },
      {
        "method_name": "zincrbyCommand",
        "params": "(client *c)",
        "start_line": 1659,
        "end_line": 1661
      },
      {
        "method_name": "zremCommand",
        "params": "(client *c)",
        "start_line": 1663,
        "end_line": 1688
      },
      {
        "method_name": "zremrangeGenericCommand",
        "params": "(client *c, int rangetype)",
        "start_line": 1694,
        "end_line": 1792
      },
      {
        "method_name": "zremrangebyrankCommand",
        "params": "(client *c)",
        "start_line": 1794,
        "end_line": 1796
      },
      {
        "method_name": "zremrangebyscoreCommand",
        "params": "(client *c)",
        "start_line": 1798,
        "end_line": 1800
      },
      {
        "method_name": "zremrangebylexCommand",
        "params": "(client *c)",
        "start_line": 1802,
        "end_line": 1804
      },
      {
        "method_name": "zuiInitIterator",
        "params": "(zsetopsrc *op)",
        "start_line": 1865,
        "end_line": 1899
      },
      {
        "method_name": "zuiClearIterator",
        "params": "(zsetopsrc *op)",
        "start_line": 1901,
        "end_line": 1926
      },
      {
        "method_name": "zuiLength",
        "params": "(zsetopsrc *op)",
        "start_line": 1928,
        "end_line": 1953
      },
      {
        "method_name": "zuiNext",
        "params": "(zsetopsrc *op, zsetopval *val)",
        "start_line": 1958,
        "end_line": 2016
      },
      {
        "method_name": "zuiLongLongFromValue",
        "params": "(zsetopval *val)",
        "start_line": 2018,
        "end_line": 2034
      },
      {
        "method_name": "zuiSdsFromValue",
        "params": "(zsetopval *val)",
        "start_line": 2036,
        "end_line": 2046
      },
      {
        "method_name": "zuiNewSdsFromValue",
        "params": "(zsetopval *val)",
        "start_line": 2050,
        "end_line": 2064
      },
      {
        "method_name": "zuiBufferFromValue",
        "params": "(zsetopval *val)",
        "start_line": 2066,
        "end_line": 2077
      },
      {
        "method_name": "zuiFind",
        "params": "(zsetopsrc *op, zsetopval *val, double *score)",
        "start_line": 2081,
        "end_line": 2132
      },
      {
        "method_name": "zuiCompareByCardinality",
        "params": "(const void *s1, const void *s2)",
        "start_line": 2134,
        "end_line": 2140
      },
      {
        "method_name": "zunionInterAggregate",
        "params": "(double *target, double val, int aggregate)",
        "start_line": 2147,
        "end_line": 2162
      },
      {
        "method_name": "zunionInterGenericCommand",
        "params": "(client *c, robj *dstkey, int op)",
        "start_line": 2176,
        "end_line": 2401
      },
      {
        "method_name": "zunionstoreCommand",
        "params": "(client *c)",
        "start_line": 2403,
        "end_line": 2405
      },
      {
        "method_name": "zinterstoreCommand",
        "params": "(client *c)",
        "start_line": 2407,
        "end_line": 2409
      },
      {
        "method_name": "zrangeGenericCommand",
        "params": "(client *c, int reverse)",
        "start_line": 2411,
        "end_line": 2516
      },
      {
        "method_name": "zrangeCommand",
        "params": "(client *c)",
        "start_line": 2518,
        "end_line": 2520
      },
      {
        "method_name": "zrevrangeCommand",
        "params": "(client *c)",
        "start_line": 2522,
        "end_line": 2524
      },
      {
        "method_name": "genericZrangebyscoreCommand",
        "params": "(client *c, int reverse)",
        "start_line": 2527,
        "end_line": 2710
      },
      {
        "method_name": "zrangebyscoreCommand",
        "params": "(client *c)",
        "start_line": 2712,
        "end_line": 2714
      },
      {
        "method_name": "zrevrangebyscoreCommand",
        "params": "(client *c)",
        "start_line": 2716,
        "end_line": 2718
      },
      {
        "method_name": "zcountCommand",
        "params": "(client *c)",
        "start_line": 2720,
        "end_line": 2795
      },
      {
        "method_name": "zlexcountCommand",
        "params": "(client *c)",
        "start_line": 2797,
        "end_line": 2874
      },
      {
        "method_name": "genericZrangebylexCommand",
        "params": "(client *c, int reverse)",
        "start_line": 2877,
        "end_line": 3054
      },
      {
        "method_name": "zrangebylexCommand",
        "params": "(client *c)",
        "start_line": 3056,
        "end_line": 3058
      },
      {
        "method_name": "zrevrangebylexCommand",
        "params": "(client *c)",
        "start_line": 3060,
        "end_line": 3062
      },
      {
        "method_name": "zcardCommand",
        "params": "(client *c)",
        "start_line": 3064,
        "end_line": 3072
      },
      {
        "method_name": "zscoreCommand",
        "params": "(client *c)",
        "start_line": 3074,
        "end_line": 3087
      },
      {
        "method_name": "zrankGenericCommand",
        "params": "(client *c, int reverse)",
        "start_line": 3089,
        "end_line": 3105
      },
      {
        "method_name": "zrankCommand",
        "params": "(client *c)",
        "start_line": 3107,
        "end_line": 3109
      },
      {
        "method_name": "zrevrankCommand",
        "params": "(client *c)",
        "start_line": 3111,
        "end_line": 3113
      },
      {
        "method_name": "zscanCommand",
        "params": "(client *c)",
        "start_line": 3115,
        "end_line": 3123
      },
      {
        "method_name": "genericZpopCommand",
        "params": "(client *c, robj **keyv, int keyc, int where, int emitkey, robj *countarg)",
        "start_line": 3134,
        "end_line": 3236
      },
      {
        "method_name": "zpopminCommand",
        "params": "(client *c)",
        "start_line": 3239,
        "end_line": 3246
      },
      {
        "method_name": "zpopmaxCommand",
        "params": "(client *c)",
        "start_line": 3249,
        "end_line": 3256
      },
      {
        "method_name": "blockingGenericZpopCommand",
        "params": "(client *c, int where)",
        "start_line": 3259,
        "end_line": 3296
      },
      {
        "method_name": "bzpopminCommand",
        "params": "(client *c)",
        "start_line": 3299,
        "end_line": 3301
      },
      {
        "method_name": "bzpopmaxCommand",
        "params": "(client *c)",
        "start_line": 3304,
        "end_line": 3306
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 1806,
        "end_line": 1838
      },
      {
        "struct_name": "",
        "start_line": 1852,
        "end_line": 1860
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/testhelp.h",
    "line": 57,
    "headers": [],
    "methods": [
      {
        "method_name": "test_cond",
        "params": "(descr,_c)",
        "start_line": 44,
        "end_line": 47
      },
      {
        "method_name": "test_report",
        "params": "()",
        "start_line": 48,
        "end_line": 55
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/timeout.c",
    "line": 189,
    "headers": [
      "server.h",
      "cluster.h"
    ],
    "methods": [
      {
        "method_name": "checkBlockedClientTimeout",
        "params": "(client *c, mstime_t now)",
        "start_line": 37,
        "end_line": 49
      },
      {
        "method_name": "clientsCronHandleTimeout",
        "params": "(client *c, mstime_t now_ms)",
        "start_line": 55,
        "end_line": 78
      },
      {
        "method_name": "encodeTimeoutKey",
        "params": "(unsigned char *buf, uint64_t timeout, client *c)",
        "start_line": 96,
        "end_line": 101
      },
      {
        "method_name": "decodeTimeoutKey",
        "params": "(unsigned char *buf, uint64_t *toptr, client **cptr)",
        "start_line": 105,
        "end_line": 109
      },
      {
        "method_name": "addClientToTimeoutTable",
        "params": "(client *c)",
        "start_line": 114,
        "end_line": 121
      },
      {
        "method_name": "removeClientFromTimeoutTable",
        "params": "(client *c)",
        "start_line": 125,
        "end_line": 132
      },
      {
        "method_name": "handleBlockedClientsTimeout",
        "params": "(void)",
        "start_line": 136,
        "end_line": 153
      },
      {
        "method_name": "getTimeoutFromObjectOrReply",
        "params": "(client *c, robj *object, mstime_t *timeout, int unit)",
        "start_line": 163,
        "end_line": 189
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/tls.c",
    "line": 858,
    "headers": [
      "server.h",
      "connhelpers.h",
      "adlist.h",
      "openssl/ssl.h",
      "openssl/err.h",
      "openssl/rand.h"
    ],
    "methods": [
      {
        "method_name": "parseProtocolsConfig",
        "params": "(const char *str)",
        "start_line": 57,
        "end_line": 90
      },
      {
        "method_name": "sslLockingCallback",
        "params": "(int mode, int lock_id, const char *f, int line)",
        "start_line": 109,
        "end_line": 120
      },
      {
        "method_name": "initCryptoLocks",
        "params": "(void)",
        "start_line": 122,
        "end_line": 134
      },
      {
        "method_name": "tlsInit",
        "params": "(void)",
        "start_line": 137,
        "end_line": 154
      },
      {
        "method_name": "tlsConfigure",
        "params": "(redisTLSContextConfig *ctx_config)",
        "start_line": 159,
        "end_line": 283
      },
      {
        "method_name": "*connCreateTLS",
        "params": "(void)",
        "start_line": 326,
        "end_line": 332
      },
      {
        "method_name": "*connCreateAcceptedTLS",
        "params": "(int fd, int require_auth)",
        "start_line": 334,
        "end_line": 349
      },
      {
        "method_name": "handleSSLReturnCode",
        "params": "(tls_connection *conn, int ret_value, WantIOType *want)",
        "start_line": 358,
        "end_line": 386
      },
      {
        "method_name": "registerSSLEvent",
        "params": "(tls_connection *conn, WantIOType want)",
        "start_line": 388,
        "end_line": 406
      },
      {
        "method_name": "updateSSLEvent",
        "params": "(tls_connection *conn)",
        "start_line": 408,
        "end_line": 422
      },
      {
        "method_name": "tlsHandleEvent",
        "params": "(tls_connection *conn, int mask)",
        "start_line": 424,
        "end_line": 548
      },
      {
        "method_name": "tlsEventHandler",
        "params": "(struct aeEventLoop *el, int fd, void *clientData, int mask)",
        "start_line": 550,
        "end_line": 555
      },
      {
        "method_name": "connTLSClose",
        "params": "(connection *conn_)",
        "start_line": 557,
        "end_line": 576
      },
      {
        "method_name": "connTLSAccept",
        "params": "(connection *_conn, ConnectionCallbackFunc accept_handler)",
        "start_line": 578,
        "end_line": 605
      },
      {
        "method_name": "connTLSConnect",
        "params": "(connection *conn_, const char *addr, int port, const char *src_addr, ConnectionCallbackFunc connect_handler)",
        "start_line": 607,
        "end_line": 620
      },
      {
        "method_name": "connTLSWrite",
        "params": "(connection *conn_, const void *data, size_t data_len)",
        "start_line": 622,
        "end_line": 650
      },
      {
        "method_name": "connTLSRead",
        "params": "(connection *conn_, void *buf, size_t buf_len)",
        "start_line": 652,
        "end_line": 681
      },
      {
        "method_name": "*connTLSGetLastError",
        "params": "(connection *conn_)",
        "start_line": 683,
        "end_line": 688
      },
      {
        "method_name": "connTLSSetWriteHandler",
        "params": "(connection *conn, ConnectionCallbackFunc func, int barrier)",
        "start_line": 690,
        "end_line": 698
      },
      {
        "method_name": "connTLSSetReadHandler",
        "params": "(connection *conn, ConnectionCallbackFunc func)",
        "start_line": 700,
        "end_line": 704
      },
      {
        "method_name": "setBlockingTimeout",
        "params": "(tls_connection *conn, long long timeout)",
        "start_line": 706,
        "end_line": 710
      },
      {
        "method_name": "unsetBlockingTimeout",
        "params": "(tls_connection *conn)",
        "start_line": 712,
        "end_line": 716
      },
      {
        "method_name": "connTLSBlockingConnect",
        "params": "(connection *conn_, const char *addr, int port, long long timeout)",
        "start_line": 718,
        "end_line": 740
      },
      {
        "method_name": "connTLSSyncWrite",
        "params": "(connection *conn_, char *ptr, ssize_t size, long long timeout)",
        "start_line": 742,
        "end_line": 752
      },
      {
        "method_name": "connTLSSyncRead",
        "params": "(connection *conn_, char *ptr, ssize_t size, long long timeout)",
        "start_line": 754,
        "end_line": 762
      },
      {
        "method_name": "connTLSSyncReadLine",
        "params": "(connection *conn_, char *ptr, ssize_t size, long long timeout)",
        "start_line": 764,
        "end_line": 792
      },
      {
        "method_name": "tlsHasPendingData",
        "params": "()",
        "start_line": 810,
        "end_line": 814
      },
      {
        "method_name": "tlsProcessPendingData",
        "params": "()",
        "start_line": 816,
        "end_line": 827
      },
      {
        "method_name": "tlsInit",
        "params": "(void)",
        "start_line": 831,
        "end_line": 832
      },
      {
        "method_name": "tlsConfigure",
        "params": "(redisTLSContextConfig *ctx_config)",
        "start_line": 834,
        "end_line": 837
      },
      {
        "method_name": "*connCreateTLS",
        "params": "(void)",
        "start_line": 839,
        "end_line": 841
      },
      {
        "method_name": "*connCreateAcceptedTLS",
        "params": "(int fd, int require_auth)",
        "start_line": 843,
        "end_line": 848
      },
      {
        "method_name": "tlsHasPendingData",
        "params": "()",
        "start_line": 850,
        "end_line": 852
      },
      {
        "method_name": "tlsProcessPendingData",
        "params": "()",
        "start_line": 854,
        "end_line": 856
      }
    ],
    "structs": [
      {
        "struct_name": "tls_connection",
        "start_line": 318,
        "end_line": 324
      }
    ],
    "enums": [
      {
        "enum_name": "",
        "start_line": 309,
        "end_line": 312
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/tracking.c",
    "line": 537,
    "headers": [
      "server.h"
    ],
    "methods": [
      {
        "method_name": "disableTracking",
        "params": "(client *c)",
        "start_line": 67,
        "end_line": 100
      },
      {
        "method_name": "enableBcastTrackingForPrefix",
        "params": "(client *c, char *prefix, size_t plen)",
        "start_line": 104,
        "end_line": 120
      },
      {
        "method_name": "enableTracking",
        "params": "(client *c, uint64_t redirect_to, uint64_t options, robj **prefix, size_t numprefix)",
        "start_line": 129,
        "end_line": 158
      },
      {
        "method_name": "trackingRememberKeys",
        "params": "(client *c)",
        "start_line": 166,
        "end_line": 192
      },
      {
        "method_name": "sendTrackingMessage",
        "params": "(client *c, char *keyname, size_t keylen, int proto)",
        "start_line": 204,
        "end_line": 250
      },
      {
        "method_name": "trackingRememberKeyToBroadcast",
        "params": "(client *c, char *keyname, size_t keylen)",
        "start_line": 258,
        "end_line": 274
      },
      {
        "method_name": "trackingInvalidateKeyRaw",
        "params": "(client *c, char *key, size_t keylen, int bcast)",
        "start_line": 292,
        "end_line": 337
      },
      {
        "method_name": "trackingInvalidateKey",
        "params": "(client *c, robj *keyobj)",
        "start_line": 341,
        "end_line": 343
      },
      {
        "method_name": "freeTrackingRadixTree",
        "params": "(void *rt)",
        "start_line": 352,
        "end_line": 354
      },
      {
        "method_name": "trackingInvalidateKeysOnFlush",
        "params": "(int dbid)",
        "start_line": 356,
        "end_line": 375
      },
      {
        "method_name": "trackingLimitUsedSlots",
        "params": "(void)",
        "start_line": 387,
        "end_line": 422
      },
      {
        "method_name": "trackingBuildBroadcastReply",
        "params": "(client *c, rax *keys)",
        "start_line": 430,
        "end_line": 470
      },
      {
        "method_name": "trackingBroadcastInvalidationMessages",
        "params": "(void)",
        "start_line": 475,
        "end_line": 521
      },
      {
        "method_name": "trackingGetTotalItems",
        "params": "(void)",
        "start_line": 525,
        "end_line": 527
      },
      {
        "method_name": "trackingGetTotalKeys",
        "params": "(void)",
        "start_line": 529,
        "end_line": 532
      },
      {
        "method_name": "trackingGetTotalPrefixes",
        "params": "(void)",
        "start_line": 534,
        "end_line": 537
      }
    ],
    "structs": [
      {
        "struct_name": "bcastState",
        "start_line": 55,
        "end_line": 59
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/util.c",
    "line": 932,
    "headers": [
      "fmacros.h",
      "stdlib.h",
      "stdio.h",
      "string.h",
      "ctype.h",
      "limits.h",
      "math.h",
      "unistd.h",
      "sys/time.h",
      "float.h",
      "stdint.h",
      "errno.h",
      "time.h",
      "util.h",
      "sha256.h",
      "assert.h"
    ],
    "methods": [
      {
        "method_name": "stringmatchlen",
        "params": "(const char *pattern, int patternLen,\n        const char *string, int stringLen, int nocase)",
        "start_line": 50,
        "end_line": 166
      },
      {
        "method_name": "stringmatch",
        "params": "(const char *pattern, const char *string, int nocase)",
        "start_line": 168,
        "end_line": 170
      },
      {
        "method_name": "stringmatchlen_fuzz_test",
        "params": "(void)",
        "start_line": 173,
        "end_line": 186
      },
      {
        "method_name": "memtoll",
        "params": "(const char *p, int *err)",
        "start_line": 195,
        "end_line": 245
      },
      {
        "method_name": "digits10",
        "params": "(uint64_t v)",
        "start_line": 249,
        "end_line": 267
      },
      {
        "method_name": "sdigits10",
        "params": "(int64_t v)",
        "start_line": 270,
        "end_line": 279
      },
      {
        "method_name": "ll2string",
        "params": "(char *dst, size_t dstlen, long long svalue)",
        "start_line": 292,
        "end_line": 344
      },
      {
        "method_name": "string2ll",
        "params": "(const char *s, size_t slen, long long *value)",
        "start_line": 358,
        "end_line": 422
      },
      {
        "method_name": "string2ull",
        "params": "(const char *s, unsigned long long *value)",
        "start_line": 429,
        "end_line": 442
      },
      {
        "method_name": "string2l",
        "params": "(const char *s, size_t slen, long *lval)",
        "start_line": 447,
        "end_line": 458
      },
      {
        "method_name": "string2ld",
        "params": "(const char *s, size_t slen, long double *dp)",
        "start_line": 467,
        "end_line": 488
      },
      {
        "method_name": "string2d",
        "params": "(const char *s, size_t slen, double *dp)",
        "start_line": 497,
        "end_line": 509
      },
      {
        "method_name": "d2string",
        "params": "(char *buf, size_t len, double value)",
        "start_line": 516,
        "end_line": 551
      },
      {
        "method_name": "ld2string",
        "params": "(char *buf, size_t len, long double value, ld2string_mode mode)",
        "start_line": 562,
        "end_line": 613
      },
      {
        "method_name": "getRandomBytes",
        "params": "(unsigned char *p, size_t len)",
        "start_line": 620,
        "end_line": 682
      },
      {
        "method_name": "getRandomHexChars",
        "params": "(char *p, size_t len)",
        "start_line": 688,
        "end_line": 694
      },
      {
        "method_name": "getAbsolutePath",
        "params": "(char *filename)",
        "start_line": 703,
        "end_line": 746
      },
      {
        "method_name": "getTimeZone",
        "params": "(void)",
        "start_line": 753,
        "end_line": 764
      },
      {
        "method_name": "pathIsBaseName",
        "params": "(char *path)",
        "start_line": 770,
        "end_line": 772
      },
      {
        "method_name": "test_string2ll",
        "params": "(void)",
        "start_line": 777,
        "end_line": 830
      },
      {
        "method_name": "test_string2l",
        "params": "(void)",
        "start_line": 832,
        "end_line": 879
      },
      {
        "method_name": "test_ll2string",
        "params": "(void)",
        "start_line": 881,
        "end_line": 920
      },
      {
        "method_name": "utilTest",
        "params": "(int argc, char **argv)",
        "start_line": 923,
        "end_line": 931
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/util.h",
    "line": 70,
    "headers": [
      "stdint.h",
      "sds.h"
    ],
    "methods": [],
    "structs": [],
    "enums": [
      {
        "enum_name": "",
        "start_line": 42,
        "end_line": 46
      }
    ]
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/version.h",
    "line": 1,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ziplist.c",
    "line": 1932,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "string.h",
      "stdint.h",
      "limits.h",
      "zmalloc.h",
      "util.h",
      "ziplist.h",
      "endianconv.h",
      "redisassert.h",
      "sys/time.h",
      "adlist.h",
      "sds.h"
    ],
    "methods": [
      {
        "method_name": "ZIPLIST_INCR_LENGTH",
        "params": "(zl,incr)",
        "start_line": 263,
        "end_line": 266
      },
      {
        "method_name": "ZIPLIST_ENTRY_ZERO",
        "params": "(zle)",
        "start_line": 291,
        "end_line": 296
      },
      {
        "method_name": "ZIP_ENTRY_ENCODING",
        "params": "(ptr, encoding)",
        "start_line": 300,
        "end_line": 303
      },
      {
        "method_name": "zipIntSize",
        "params": "(unsigned char encoding)",
        "start_line": 306,
        "end_line": 318
      },
      {
        "method_name": "zipStoreEntryEncoding",
        "params": "(unsigned char *p, unsigned char encoding, unsigned int rawlen)",
        "start_line": 332,
        "end_line": 364
      },
      {
        "method_name": "ZIP_DECODE_LENGTH",
        "params": "(ptr, encoding, lensize, len)",
        "start_line": 371,
        "end_line": 393
      },
      {
        "method_name": "zipStorePrevEntryLengthLarge",
        "params": "(unsigned char *p, unsigned int len)",
        "start_line": 397,
        "end_line": 404
      },
      {
        "method_name": "zipStorePrevEntryLength",
        "params": "(unsigned char *p, unsigned int len)",
        "start_line": 408,
        "end_line": 419
      },
      {
        "method_name": "ZIP_DECODE_PREVLENSIZE",
        "params": "(ptr, prevlensize)",
        "start_line": 423,
        "end_line": 429
      },
      {
        "method_name": "ZIP_DECODE_PREVLEN",
        "params": "(ptr, prevlensize, prevlen)",
        "start_line": 438,
        "end_line": 447
      },
      {
        "method_name": "zipPrevLenByteDiff",
        "params": "(unsigned char *p, unsigned int len)",
        "start_line": 464,
        "end_line": 468
      },
      {
        "method_name": "zipRawEntryLength",
        "params": "(unsigned char *p)",
        "start_line": 471,
        "end_line": 476
      },
      {
        "method_name": "zipTryEncoding",
        "params": "(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding)",
        "start_line": 480,
        "end_line": 504
      },
      {
        "method_name": "zipSaveInteger",
        "params": "(unsigned char *p, int64_t value, unsigned char encoding)",
        "start_line": 507,
        "end_line": 534
      },
      {
        "method_name": "zipLoadInteger",
        "params": "(unsigned char *p, unsigned char encoding)",
        "start_line": 537,
        "end_line": 566
      },
      {
        "method_name": "zipEntry",
        "params": "(unsigned char *p, zlentry *e)",
        "start_line": 569,
        "end_line": 575
      },
      {
        "method_name": "*ziplistNew",
        "params": "(void)",
        "start_line": 578,
        "end_line": 586
      },
      {
        "method_name": "*ziplistResize",
        "params": "(unsigned char *zl, unsigned int len)",
        "start_line": 589,
        "end_line": 594
      },
      {
        "method_name": "*__ziplistCascadeUpdate",
        "params": "(unsigned char *zl, unsigned char *p)",
        "start_line": 616,
        "end_line": 675
      },
      {
        "method_name": "*__ziplistDelete",
        "params": "(unsigned char *zl, unsigned char *p, unsigned int num)",
        "start_line": 678,
        "end_line": 740
      },
      {
        "method_name": "*__ziplistInsert",
        "params": "(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen)",
        "start_line": 743,
        "end_line": 839
      },
      {
        "method_name": "*ziplistMerge",
        "params": "(unsigned char **first, unsigned char **second)",
        "start_line": 856,
        "end_line": 954
      },
      {
        "method_name": "*ziplistPush",
        "params": "(unsigned char *zl, unsigned char *s, unsigned int slen, int where)",
        "start_line": 956,
        "end_line": 960
      },
      {
        "method_name": "*ziplistIndex",
        "params": "(unsigned char *zl, int index)",
        "start_line": 965,
        "end_line": 985
      },
      {
        "method_name": "*ziplistNext",
        "params": "(unsigned char *zl, unsigned char *p)",
        "start_line": 993,
        "end_line": 1009
      },
      {
        "method_name": "*ziplistPrev",
        "params": "(unsigned char *zl, unsigned char *p)",
        "start_line": 1012,
        "end_line": 1028
      },
      {
        "method_name": "ziplistGet",
        "params": "(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval)",
        "start_line": 1034,
        "end_line": 1051
      },
      {
        "method_name": "*ziplistInsert",
        "params": "(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen)",
        "start_line": 1054,
        "end_line": 1056
      },
      {
        "method_name": "*ziplistDelete",
        "params": "(unsigned char *zl, unsigned char **p)",
        "start_line": 1061,
        "end_line": 1071
      },
      {
        "method_name": "*ziplistDeleteRange",
        "params": "(unsigned char *zl, int index, unsigned int num)",
        "start_line": 1074,
        "end_line": 1077
      },
      {
        "method_name": "ziplistCompare",
        "params": "(unsigned char *p, unsigned char *sstr, unsigned int slen)",
        "start_line": 1081,
        "end_line": 1104
      },
      {
        "method_name": "*ziplistFind",
        "params": "(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip)",
        "start_line": 1108,
        "end_line": 1165
      },
      {
        "method_name": "ziplistLen",
        "params": "(unsigned char *zl)",
        "start_line": 1168,
        "end_line": 1183
      },
      {
        "method_name": "ziplistBlobLen",
        "params": "(unsigned char *zl)",
        "start_line": 1186,
        "end_line": 1188
      },
      {
        "method_name": "ziplistRepr",
        "params": "(unsigned char *zl)",
        "start_line": 1190,
        "end_line": 1246
      },
      {
        "method_name": "debug",
        "params": "(f, ...)",
        "start_line": 1253,
        "end_line": 1253
      },
      {
        "method_name": "*createList",
        "params": "()",
        "start_line": 1255,
        "end_line": 1262
      },
      {
        "method_name": "*createIntList",
        "params": "()",
        "start_line": 1264,
        "end_line": 1281
      },
      {
        "method_name": "usec",
        "params": "(void)",
        "start_line": 1283,
        "end_line": 1287
      },
      {
        "method_name": "stress",
        "params": "(int pos, int num, int maxsize, int dnum)",
        "start_line": 1289,
        "end_line": 1310
      },
      {
        "method_name": "*pop",
        "params": "(unsigned char *zl, int where)",
        "start_line": 1312,
        "end_line": 1337
      },
      {
        "method_name": "randstring",
        "params": "(char *target, unsigned int min, unsigned int max)",
        "start_line": 1339,
        "end_line": 1363
      },
      {
        "method_name": "verify",
        "params": "(unsigned char *zl, zlentry *e)",
        "start_line": 1365,
        "end_line": 1380
      },
      {
        "method_name": "ziplistTest",
        "params": "(int argc, char **argv)",
        "start_line": 1382,
        "end_line": 1931
      }
    ],
    "structs": [
      {
        "struct_name": "zlentry",
        "start_line": 271,
        "end_line": 289
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/ziplist.h",
    "line": 57,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/zipmap.c",
    "line": 469,
    "headers": [
      "stdio.h",
      "string.h",
      "zmalloc.h",
      "endianconv.h"
    ],
    "methods": [
      {
        "method_name": "*zipmapNew",
        "params": "(void)",
        "start_line": 96,
        "end_line": 102
      },
      {
        "method_name": "zipmapDecodeLength",
        "params": "(unsigned char *p)",
        "start_line": 105,
        "end_line": 112
      },
      {
        "method_name": "zipmapEncodeLength",
        "params": "(unsigned char *p, unsigned int len)",
        "start_line": 116,
        "end_line": 130
      },
      {
        "method_name": "*zipmapLookupRaw",
        "params": "(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen)",
        "start_line": 138,
        "end_line": 166
      },
      {
        "method_name": "zipmapRequiredLength",
        "params": "(unsigned int klen, unsigned int vlen)",
        "start_line": 168,
        "end_line": 175
      },
      {
        "method_name": "zipmapRawKeyLength",
        "params": "(unsigned char *p)",
        "start_line": 178,
        "end_line": 181
      },
      {
        "method_name": "zipmapRawValueLength",
        "params": "(unsigned char *p)",
        "start_line": 185,
        "end_line": 192
      },
      {
        "method_name": "zipmapRawEntryLength",
        "params": "(unsigned char *p)",
        "start_line": 197,
        "end_line": 200
      },
      {
        "method_name": "*zipmapResize",
        "params": "(unsigned char *zm, unsigned int len)",
        "start_line": 202,
        "end_line": 206
      },
      {
        "method_name": "*zipmapSet",
        "params": "(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update)",
        "start_line": 211,
        "end_line": 277
      },
      {
        "method_name": "*zipmapDel",
        "params": "(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted)",
        "start_line": 281,
        "end_line": 297
      },
      {
        "method_name": "*zipmapRewind",
        "params": "(unsigned char *zm)",
        "start_line": 300,
        "end_line": 302
      },
      {
        "method_name": "zipmapNext",
        "params": "(i,\u0026key,\u0026klen,\u0026value,\u0026vlen)) != NULL)",
        "start_line": 310,
        "end_line": 313
      },
      {
        "method_name": "*zipmapNext",
        "params": "(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen)",
        "start_line": 315,
        "end_line": 330
      },
      {
        "method_name": "zipmapGet",
        "params": "(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen)",
        "start_line": 334,
        "end_line": 342
      },
      {
        "method_name": "zipmapExists",
        "params": "(unsigned char *zm, unsigned char *key, unsigned int klen)",
        "start_line": 345,
        "end_line": 347
      },
      {
        "method_name": "zipmapLen",
        "params": "(unsigned char *zm)",
        "start_line": 350,
        "end_line": 362
      },
      {
        "method_name": "zipmapBlobLen",
        "params": "(unsigned char *zm)",
        "start_line": 367,
        "end_line": 371
      },
      {
        "method_name": "zipmapRepr",
        "params": "(unsigned char *p)",
        "start_line": 374,
        "end_line": 405
      },
      {
        "method_name": "zipmapTest",
        "params": "(int argc, char *argv[])",
        "start_line": 408,
        "end_line": 468
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/zipmap.h",
    "line": 53,
    "headers": [],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/zmalloc.c",
    "line": 542,
    "headers": [
      "stdio.h",
      "stdlib.h",
      "stdint.h",
      "string.h",
      "pthread.h",
      "config.h",
      "zmalloc.h",
      "atomicvar.h",
      "unistd.h",
      "sys/types.h",
      "sys/stat.h",
      "fcntl.h",
      "unistd.h",
      "stdio.h",
      "stdlib.h",
      "sys/types.h",
      "sys/sysctl.h",
      "mach/task.h",
      "mach/mach_init.h",
      "sys/types.h",
      "sys/sysctl.h",
      "sys/user.h",
      "unistd.h",
      "libproc.h"
    ],
    "methods": [
      {
        "method_name": "zlibc_free",
        "params": "(void *ptr)",
        "start_line": 39,
        "end_line": 41
      },
      {
        "method_name": "update_zmalloc_stat_alloc",
        "params": "(__n)",
        "start_line": 74,
        "end_line": 78
      },
      {
        "method_name": "update_zmalloc_stat_free",
        "params": "(__n)",
        "start_line": 80,
        "end_line": 84
      },
      {
        "method_name": "zmalloc_default_oom",
        "params": "(size_t size)",
        "start_line": 89,
        "end_line": 94
      },
      {
        "method_name": "*zmalloc",
        "params": "(size_t size)",
        "start_line": 98,
        "end_line": 110
      },
      {
        "method_name": "*zmalloc_no_tcache",
        "params": "(size_t size)",
        "start_line": 116,
        "end_line": 121
      },
      {
        "method_name": "zfree_no_tcache",
        "params": "(void *ptr)",
        "start_line": 123,
        "end_line": 127
      },
      {
        "method_name": "*zcalloc",
        "params": "(size_t size)",
        "start_line": 130,
        "end_line": 142
      },
      {
        "method_name": "*zrealloc",
        "params": "(void *ptr, size_t size)",
        "start_line": 144,
        "end_line": 175
      },
      {
        "method_name": "zmalloc_size",
        "params": "(void *ptr)",
        "start_line": 181,
        "end_line": 188
      },
      {
        "method_name": "zmalloc_usable",
        "params": "(void *ptr)",
        "start_line": 189,
        "end_line": 191
      },
      {
        "method_name": "zfree",
        "params": "(void *ptr)",
        "start_line": 194,
        "end_line": 210
      },
      {
        "method_name": "*zstrdup",
        "params": "(const char *s)",
        "start_line": 212,
        "end_line": 218
      },
      {
        "method_name": "zmalloc_used_memory",
        "params": "(void)",
        "start_line": 220,
        "end_line": 224
      },
      {
        "method_name": "(*oom_handler)",
        "params": "(size_t))",
        "start_line": 226,
        "end_line": 228
      },
      {
        "method_name": "zmalloc_get_rss",
        "params": "(void)",
        "start_line": 246,
        "end_line": 276
      },
      {
        "method_name": "zmalloc_get_rss",
        "params": "(void)",
        "start_line": 286,
        "end_line": 296
      },
      {
        "method_name": "zmalloc_get_rss",
        "params": "(void)",
        "start_line": 303,
        "end_line": 316
      },
      {
        "method_name": "zmalloc_get_rss",
        "params": "(void)",
        "start_line": 318,
        "end_line": 325
      },
      {
        "method_name": "zmalloc_get_allocator_info",
        "params": "(size_t *allocated,\n                               size_t *active,\n                               size_t *resident)",
        "start_line": 332,
        "end_line": 350
      },
      {
        "method_name": "set_jemalloc_bg_thread",
        "params": "(int enable)",
        "start_line": 352,
        "end_line": 357
      },
      {
        "method_name": "jemalloc_purge",
        "params": "()",
        "start_line": 359,
        "end_line": 370
      },
      {
        "method_name": "zmalloc_get_allocator_info",
        "params": "(size_t *allocated,\n                               size_t *active,\n                               size_t *resident)",
        "start_line": 376,
        "end_line": 379
      },
      {
        "method_name": "set_jemalloc_bg_thread",
        "params": "(int enable)",
        "start_line": 381,
        "end_line": 383
      },
      {
        "method_name": "jemalloc_purge",
        "params": "()",
        "start_line": 385,
        "end_line": 387
      },
      {
        "method_name": "zmalloc_get_smap_bytes_by_field",
        "params": "(char *field, long pid)",
        "start_line": 410,
        "end_line": 436
      },
      {
        "method_name": "zmalloc_get_smap_bytes_by_field",
        "params": "(char *field, long pid)",
        "start_line": 445,
        "end_line": 463
      },
      {
        "method_name": "zmalloc_get_private_dirty",
        "params": "(long pid)",
        "start_line": 466,
        "end_line": 468
      },
      {
        "method_name": "zmalloc_get_memory_size",
        "params": "(void)",
        "start_line": 483,
        "end_line": 524
      },
      {
        "method_name": "zmalloc_test",
        "params": "(int argc, char **argv)",
        "start_line": 528,
        "end_line": 541
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/src/zmalloc.h",
    "line": 112,
    "headers": [
      "google/tcmalloc.h",
      "jemalloc/jemalloc.h",
      "malloc/malloc.h",
      "malloc.h"
    ],
    "methods": [],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/auth.c",
    "line": 90,
    "headers": [
      "redismodule.h"
    ],
    "methods": [
      {
        "method_name": "UserChangedCallback",
        "params": "(uint64_t client_id, void *privdata)",
        "start_line": 8,
        "end_line": 12
      },
      {
        "method_name": "Auth_CreateModuleUser",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 14,
        "end_line": 28
      },
      {
        "method_name": "Auth_AuthModuleUser",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 30,
        "end_line": 37
      },
      {
        "method_name": "Auth_AuthRealUser",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 39,
        "end_line": 54
      },
      {
        "method_name": "Auth_ChangeCount",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 56,
        "end_line": 62
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 66,
        "end_line": 90
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/blockonkeys.c",
    "line": 338,
    "headers": [
      "redismodule.h",
      "string.h",
      "assert.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "*fsl_type_create",
        "params": "()",
        "start_line": 17,
        "end_line": 22
      },
      {
        "method_name": "fsl_type_free",
        "params": "(fsl_t *o)",
        "start_line": 24,
        "end_line": 26
      },
      {
        "method_name": "*fsl_rdb_load",
        "params": "(RedisModuleIO *rdb, int encver)",
        "start_line": 30,
        "end_line": 39
      },
      {
        "method_name": "fsl_rdb_save",
        "params": "(RedisModuleIO *rdb, void *value)",
        "start_line": 41,
        "end_line": 46
      },
      {
        "method_name": "fsl_aofrw",
        "params": "(RedisModuleIO *aof, RedisModuleString *key, void *value)",
        "start_line": 48,
        "end_line": 52
      },
      {
        "method_name": "fsl_free",
        "params": "(void *value)",
        "start_line": 54,
        "end_line": 56
      },
      {
        "method_name": "get_fsl",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode, int create, fsl_t **fsl, int reply_on_failure)",
        "start_line": 60,
        "end_line": 87
      },
      {
        "method_name": "fsl_push",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 93,
        "end_line": 115
      },
      {
        "method_name": "bpop_reply_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 117,
        "end_line": 128
      },
      {
        "method_name": "bpop_timeout_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 130,
        "end_line": 134
      },
      {
        "method_name": "fsl_bpop",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 138,
        "end_line": 158
      },
      {
        "method_name": "bpopgt_reply_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 160,
        "end_line": 175
      },
      {
        "method_name": "bpopgt_timeout_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 177,
        "end_line": 181
      },
      {
        "method_name": "bpopgt_free_privdata",
        "params": "(RedisModuleCtx *ctx, void *privdata)",
        "start_line": 183,
        "end_line": 186
      },
      {
        "method_name": "fsl_bpopgt",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 190,
        "end_line": 217
      },
      {
        "method_name": "bpoppush_reply_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 219,
        "end_line": 237
      },
      {
        "method_name": "bpoppush_timeout_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 239,
        "end_line": 243
      },
      {
        "method_name": "bpoppush_free_privdata",
        "params": "(RedisModuleCtx *ctx, void *privdata)",
        "start_line": 245,
        "end_line": 247
      },
      {
        "method_name": "fsl_bpoppush",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 252,
        "end_line": 281
      },
      {
        "method_name": "fsl_getall",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 284,
        "end_line": 299
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 301,
        "end_line": 338
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 10,
        "end_line": 13
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/commandfilter.c",
    "line": 154,
    "headers": [
      "redismodule.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "CommandFilter_UnregisterCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 16,
        "end_line": 24
      },
      {
        "method_name": "CommandFilter_PingCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 27,
        "end_line": 40
      },
      {
        "method_name": "CommandFilter_LogCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 43,
        "end_line": 75
      },
      {
        "method_name": "CommandFilter_CommandFilter",
        "params": "(RedisModuleCommandFilterCtx *filter)",
        "start_line": 78,
        "end_line": 117
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 119,
        "end_line": 149
      },
      {
        "method_name": "RedisModule_OnUnload",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 151,
        "end_line": 154
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/datatype.c",
    "line": 186,
    "headers": [
      "redismodule.h"
    ],
    "methods": [
      {
        "method_name": "*datatype_load",
        "params": "(RedisModuleIO *io, int encver)",
        "start_line": 14,
        "end_line": 27
      },
      {
        "method_name": "datatype_save",
        "params": "(RedisModuleIO *io, void *value)",
        "start_line": 29,
        "end_line": 33
      },
      {
        "method_name": "datatype_free",
        "params": "(void *value)",
        "start_line": 35,
        "end_line": 42
      },
      {
        "method_name": "datatype_set",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 44,
        "end_line": 68
      },
      {
        "method_name": "datatype_restore",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 70,
        "end_line": 88
      },
      {
        "method_name": "datatype_get",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 90,
        "end_line": 104
      },
      {
        "method_name": "datatype_dump",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 106,
        "end_line": 125
      },
      {
        "method_name": "datatype_swap",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 127,
        "end_line": 148
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 150,
        "end_line": 186
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 9,
        "end_line": 12
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/fork.c",
    "line": 88,
    "headers": [
      "redismodule.h",
      "string.h",
      "assert.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "done_handler",
        "params": "(int exitcode, int bysignal, void *user_data)",
        "start_line": 17,
        "end_line": 22
      },
      {
        "method_name": "fork_create",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 25,
        "end_line": 50
      },
      {
        "method_name": "fork_exitcode",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 53,
        "end_line": 58
      },
      {
        "method_name": "fork_kill",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 61,
        "end_line": 70
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 72,
        "end_line": 88
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/hooks.c",
    "line": 311,
    "headers": [
      "redismodule.h",
      "stdio.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "LogStringEvent",
        "params": "(RedisModuleCtx *ctx, const char* keyname, const char* data)",
        "start_line": 48,
        "end_line": 58
      },
      {
        "method_name": "LogNumericEvent",
        "params": "(RedisModuleCtx *ctx, const char* keyname, long data)",
        "start_line": 60,
        "end_line": 70
      },
      {
        "method_name": "FreeEvent",
        "params": "(RedisModuleCtx *ctx, EventElement *event)",
        "start_line": 72,
        "end_line": 76
      },
      {
        "method_name": "cmdEventCount",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 79,
        "end_line": 88
      },
      {
        "method_name": "cmdEventLast",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 91,
        "end_line": 105
      },
      {
        "method_name": "clearEvents",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 108,
        "end_line": 121
      },
      {
        "method_name": "cmdEventsClear",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 124,
        "end_line": 129
      },
      {
        "method_name": "clientChangeCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 133,
        "end_line": 140
      },
      {
        "method_name": "flushdbCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 143,
        "end_line": 150
      },
      {
        "method_name": "roleChangeCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 153,
        "end_line": 161
      },
      {
        "method_name": "replicationChangeCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 164,
        "end_line": 171
      },
      {
        "method_name": "rasterLinkChangeCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 174,
        "end_line": 181
      },
      {
        "method_name": "persistenceCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 184,
        "end_line": 200
      },
      {
        "method_name": "loadingCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 203,
        "end_line": 216
      },
      {
        "method_name": "loadingProgressCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 219,
        "end_line": 226
      },
      {
        "method_name": "shutdownCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 229,
        "end_line": 235
      },
      {
        "method_name": "cronLoopCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 238,
        "end_line": 244
      },
      {
        "method_name": "moduleChangeCallback",
        "params": "(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)",
        "start_line": 247,
        "end_line": 254
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 258,
        "end_line": 303
      },
      {
        "method_name": "RedisModule_OnUnload",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 305,
        "end_line": 310
      }
    ],
    "structs": [
      {
        "struct_name": "EventElement",
        "start_line": 42,
        "end_line": 46
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/infotest.c",
    "line": 114,
    "headers": [
      "redismodule.h",
      "string.h"
    ],
    "methods": [
      {
        "method_name": "InfoFunc",
        "params": "(RedisModuleInfoCtx *ctx, int for_crash_report)",
        "start_line": 5,
        "end_line": 31
      },
      {
        "method_name": "info_get",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc, char field_type)",
        "start_line": 34,
        "end_line": 72
      },
      {
        "method_name": "info_gets",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 74,
        "end_line": 76
      },
      {
        "method_name": "info_getc",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 78,
        "end_line": 80
      },
      {
        "method_name": "info_geti",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 82,
        "end_line": 84
      },
      {
        "method_name": "info_getu",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 86,
        "end_line": 88
      },
      {
        "method_name": "info_getd",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 90,
        "end_line": 92
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 94,
        "end_line": 114
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/misc.c",
    "line": 226,
    "headers": [
      "redismodule.h",
      "string.h",
      "assert.h",
      "unistd.h",
      "errno.h"
    ],
    "methods": [
      {
        "method_name": "test_call_generic",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 12,
        "end_line": 27
      },
      {
        "method_name": "test_call_info",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 30,
        "end_line": 43
      },
      {
        "method_name": "test_ld_conv",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 45,
        "end_line": 95
      },
      {
        "method_name": "test_flushall",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 98,
        "end_line": 104
      },
      {
        "method_name": "test_dbsize",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 107,
        "end_line": 113
      },
      {
        "method_name": "test_randomkey",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 116,
        "end_line": 123
      },
      {
        "method_name": "*open_key_or_reply",
        "params": "(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode)",
        "start_line": 125,
        "end_line": 132
      },
      {
        "method_name": "test_getlru",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 135,
        "end_line": 146
      },
      {
        "method_name": "test_setlru",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 149,
        "end_line": 164
      },
      {
        "method_name": "test_getlfu",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 167,
        "end_line": 178
      },
      {
        "method_name": "test_setlfu",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 181,
        "end_line": 196
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 198,
        "end_line": 226
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/propagate.c",
    "line": 148,
    "headers": [
      "redismodule.h",
      "pthread.h"
    ],
    "methods": [
      {
        "method_name": "timerHandler",
        "params": "(RedisModuleCtx *ctx, void *data)",
        "start_line": 45,
        "end_line": 58
      },
      {
        "method_name": "*threadMain",
        "params": "(void *arg)",
        "start_line": 61,
        "end_line": 73
      },
      {
        "method_name": "propagateTestCommand",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 76,
        "end_line": 91
      },
      {
        "method_name": "propagateTest2Command",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 94,
        "end_line": 103
      },
      {
        "method_name": "propagateTest3Command",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 106,
        "end_line": 123
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 125,
        "end_line": 148
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/scan.c",
    "line": 121,
    "headers": [
      "redismodule.h",
      "string.h",
      "assert.h",
      "unistd.h"
    ],
    "methods": [
      {
        "method_name": "scan_strings_callback",
        "params": "(RedisModuleCtx *ctx, RedisModuleString* keyname, RedisModuleKey* key, void *privdata)",
        "start_line": 11,
        "end_line": 29
      },
      {
        "method_name": "scan_strings",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 32,
        "end_line": 47
      },
      {
        "method_name": "scan_key_callback",
        "params": "(RedisModuleKey *key, RedisModuleString* field, RedisModuleString* value, void *privdata)",
        "start_line": 54,
        "end_line": 76
      },
      {
        "method_name": "scan_key",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 79,
        "end_line": 104
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 106,
        "end_line": 119
      }
    ],
    "structs": [
      {
        "struct_name": "",
        "start_line": 7,
        "end_line": 9
      },
      {
        "struct_name": "",
        "start_line": 49,
        "end_line": 52
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/tests/modules/testrdb.c",
    "line": 259,
    "headers": [
      "redismodule.h",
      "string.h",
      "assert.h"
    ],
    "methods": [
      {
        "method_name": "*testrdb_type_load",
        "params": "(RedisModuleIO *rdb, int encver)",
        "start_line": 16,
        "end_line": 33
      },
      {
        "method_name": "testrdb_type_save",
        "params": "(RedisModuleIO *rdb, void *value)",
        "start_line": 35,
        "end_line": 41
      },
      {
        "method_name": "testrdb_aux_save",
        "params": "(RedisModuleIO *rdb, int when)",
        "start_line": 43,
        "end_line": 61
      },
      {
        "method_name": "testrdb_aux_load",
        "params": "(RedisModuleIO *rdb, int encver, int when)",
        "start_line": 63,
        "end_line": 90
      },
      {
        "method_name": "testrdb_type_free",
        "params": "(void *value)",
        "start_line": 92,
        "end_line": 95
      },
      {
        "method_name": "testrdb_set_before",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 98,
        "end_line": 110
      },
      {
        "method_name": "testrdb_get_before",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 113,
        "end_line": 124
      },
      {
        "method_name": "testrdb_set_after",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 127,
        "end_line": 139
      },
      {
        "method_name": "testrdb_get_after",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 142,
        "end_line": 153
      },
      {
        "method_name": "testrdb_set_key",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 156,
        "end_line": 171
      },
      {
        "method_name": "testrdb_get_key",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 174,
        "end_line": 185
      },
      {
        "method_name": "RedisModule_OnLoad",
        "params": "(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
        "start_line": 187,
        "end_line": 251
      },
      {
        "method_name": "RedisModule_OnUnload",
        "params": "(RedisModuleCtx *ctx)",
        "start_line": 253,
        "end_line": 259
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/utils/corrupt_rdb.c",
    "line": 45,
    "headers": [
      "stdio.h",
      "fcntl.h",
      "sys/stat.h",
      "stdlib.h",
      "unistd.h",
      "time.h"
    ],
    "methods": [
      {
        "method_name": "main",
        "params": "(int argc, char **argv)",
        "start_line": 14,
        "end_line": 45
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/utils/hashtable/rehashing.c",
    "line": 142,
    "headers": [
      "redis.h",
      "dict.h"
    ],
    "methods": [
      {
        "method_name": "_redisAssert",
        "params": "(char *x, char *y, int l)",
        "start_line": 4,
        "end_line": 7
      },
      {
        "method_name": "dictKeyHash",
        "params": "(const void *keyp)",
        "start_line": 9,
        "end_line": 19
      },
      {
        "method_name": "dictKeyCompare",
        "params": "(void *privdata, const void *key1, const void *key2)",
        "start_line": 21,
        "end_line": 25
      },
      {
        "method_name": "showBuckets",
        "params": "(dictht ht)",
        "start_line": 36,
        "end_line": 46
      },
      {
        "method_name": "show",
        "params": "(dict *d)",
        "start_line": 48,
        "end_line": 61
      },
      {
        "method_name": "sortPointers",
        "params": "(const void *a, const void *b)",
        "start_line": 63,
        "end_line": 69
      },
      {
        "method_name": "stressGetKeys",
        "params": "(dict *d, int times, int *perfect_run, int *approx_run)",
        "start_line": 71,
        "end_line": 97
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 101,
        "end_line": 142
      }
    ],
    "structs": [],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/utils/lru/lfu-simulation.c",
    "line": 158,
    "headers": [
      "stdio.h",
      "time.h",
      "stdint.h",
      "stdlib.h"
    ],
    "methods": [
      {
        "method_name": "minutes_diff",
        "params": "(uint16_t now, uint16_t prev)",
        "start_line": 28,
        "end_line": 31
      },
      {
        "method_name": "log_incr",
        "params": "(uint8_t counter)",
        "start_line": 36,
        "end_line": 44
      },
      {
        "method_name": "access_entry",
        "params": "(struct entry *e)",
        "start_line": 47,
        "end_line": 50
      },
      {
        "method_name": "scan_entry",
        "params": "(struct entry *e)",
        "start_line": 54,
        "end_line": 68
      },
      {
        "method_name": "show_entry",
        "params": "(long pos, struct entry *e)",
        "start_line": 71,
        "end_line": 81
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 83,
        "end_line": 157
      }
    ],
    "structs": [
      {
        "struct_name": "entry",
        "start_line": 10,
        "end_line": 19
      }
    ],
    "enums": []
  },
  {
    "path": "/Users/wujun/Software/dataset/redis/utils/tracking_collisions.c",
    "line": 76,
    "headers": [
      "stdlib.h",
      "stdint.h",
      "string.h",
      "stdio.h",
      "../src/crc64.h",
      "../src/sha1.h"
    ],
    "methods": [
      {
        "method_name": "crc64Hash",
        "params": "(char *key, size_t len)",
        "start_line": 34,
        "end_line": 36
      },
      {
        "method_name": "sha1Hash",
        "params": "(char *key, size_t len)",
        "start_line": 38,
        "end_line": 48
      },
      {
        "method_name": "(*hash)",
        "params": "(char *, size_t))",
        "start_line": 52,
        "end_line": 70
      },
      {
        "method_name": "main",
        "params": "(void)",
        "start_line": 72,
        "end_line": 76
      }
    ],
    "structs": [],
    "enums": []
  }
]